
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007b74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000258  00800060  00007b74  00007c08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008002b8  008002b8  00007e60  2**0
                  ALLOC
  3 .stab         00005a18  00000000  00000000  00007e60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001121  00000000  00000000  0000d878  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000e999  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000eaf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000ec88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00010ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00011dce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00012d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00012ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00013192  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013a20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 5d 39 	jmp	0x72ba	; 0x72ba <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	fb e7       	ldi	r31, 0x7B	; 123
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3b       	cpi	r26, 0xB8	; 184
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 eb       	ldi	r26, 0xB8	; 184
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3b       	cpi	r26, 0xBD	; 189
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ae 10 	call	0x215c	; 0x215c <main>
      8a:	0c 94 b8 3d 	jmp	0x7b70	; 0x7b70 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5b 3d 	jmp	0x7ab6	; 0x7ab6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ea       	ldi	r26, 0xA0	; 160
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 77 3d 	jmp	0x7aee	; 0x7aee <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 67 3d 	jmp	0x7ace	; 0x7ace <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 83 3d 	jmp	0x7b06	; 0x7b06 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 67 3d 	jmp	0x7ace	; 0x7ace <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 83 3d 	jmp	0x7b06	; 0x7b06 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5b 3d 	jmp	0x7ab6	; 0x7ab6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ea       	ldi	r24, 0xA0	; 160
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 77 3d 	jmp	0x7aee	; 0x7aee <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 63 3d 	jmp	0x7ac6	; 0x7ac6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 ea       	ldi	r22, 0xA0	; 160
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 67 3d 	jmp	0x7ace	; 0x7ace <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 83 3d 	jmp	0x7b06	; 0x7b06 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 67 3d 	jmp	0x7ace	; 0x7ace <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 83 3d 	jmp	0x7b06	; 0x7b06 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 67 3d 	jmp	0x7ace	; 0x7ace <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 83 3d 	jmp	0x7b06	; 0x7b06 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 6b 3d 	jmp	0x7ad6	; 0x7ad6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 87 3d 	jmp	0x7b0e	; 0x7b0e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_vsetPINDir>:

#include <avr/io.h>
#include "std_macros.h"
#include "DIO.h"
void DIO_vsetPINDir(uint8 portname,uint8 pinnumber,uint8 direction)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_vsetPINDir+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <DIO_vsetPINDir+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	6a 83       	std	Y+2, r22	; 0x02
     cb0:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	3d 83       	std	Y+5, r19	; 0x05
     cba:	2c 83       	std	Y+4, r18	; 0x04
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	9d 81       	ldd	r25, Y+5	; 0x05
     cc0:	82 34       	cpi	r24, 0x42	; 66
     cc2:	91 05       	cpc	r25, r1
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <DIO_vsetPINDir+0x2a>
     cc6:	44 c0       	rjmp	.+136    	; 0xd50 <DIO_vsetPINDir+0xb2>
     cc8:	2c 81       	ldd	r18, Y+4	; 0x04
     cca:	3d 81       	ldd	r19, Y+5	; 0x05
     ccc:	23 34       	cpi	r18, 0x43	; 67
     cce:	31 05       	cpc	r19, r1
     cd0:	34 f4       	brge	.+12     	; 0xcde <DIO_vsetPINDir+0x40>
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	9d 81       	ldd	r25, Y+5	; 0x05
     cd6:	81 34       	cpi	r24, 0x41	; 65
     cd8:	91 05       	cpc	r25, r1
     cda:	71 f0       	breq	.+28     	; 0xcf8 <DIO_vsetPINDir+0x5a>
     cdc:	bc c0       	rjmp	.+376    	; 0xe56 <DIO_vsetPINDir+0x1b8>
     cde:	2c 81       	ldd	r18, Y+4	; 0x04
     ce0:	3d 81       	ldd	r19, Y+5	; 0x05
     ce2:	23 34       	cpi	r18, 0x43	; 67
     ce4:	31 05       	cpc	r19, r1
     ce6:	09 f4       	brne	.+2      	; 0xcea <DIO_vsetPINDir+0x4c>
     ce8:	5f c0       	rjmp	.+190    	; 0xda8 <DIO_vsetPINDir+0x10a>
     cea:	8c 81       	ldd	r24, Y+4	; 0x04
     cec:	9d 81       	ldd	r25, Y+5	; 0x05
     cee:	84 34       	cpi	r24, 0x44	; 68
     cf0:	91 05       	cpc	r25, r1
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <DIO_vsetPINDir+0x58>
     cf4:	85 c0       	rjmp	.+266    	; 0xe00 <DIO_vsetPINDir+0x162>
     cf6:	af c0       	rjmp	.+350    	; 0xe56 <DIO_vsetPINDir+0x1b8>
	{
		
		
		case 'A':
		if(direction==1)
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	a1 f4       	brne	.+40     	; 0xd26 <DIO_vsetPINDir+0x88>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
     cfe:	aa e3       	ldi	r26, 0x3A	; 58
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	ea e3       	ldi	r30, 0x3A	; 58
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <DIO_vsetPINDir+0x7e>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <DIO_vsetPINDir+0x7a>
     d20:	84 2b       	or	r24, r20
     d22:	8c 93       	st	X, r24
     d24:	98 c0       	rjmp	.+304    	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
     d26:	aa e3       	ldi	r26, 0x3A	; 58
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	ea e3       	ldi	r30, 0x3A	; 58
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 2e       	mov	r0, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <DIO_vsetPINDir+0xa6>
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	0a 94       	dec	r0
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <DIO_vsetPINDir+0xa2>
     d48:	80 95       	com	r24
     d4a:	84 23       	and	r24, r20
     d4c:	8c 93       	st	X, r24
     d4e:	83 c0       	rjmp	.+262    	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'B':
		if(direction==1)
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	a1 f4       	brne	.+40     	; 0xd7e <DIO_vsetPINDir+0xe0>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
     d56:	a7 e3       	ldi	r26, 0x37	; 55
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e7 e3       	ldi	r30, 0x37	; 55
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_vsetPINDir+0xd6>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_vsetPINDir+0xd2>
     d78:	84 2b       	or	r24, r20
     d7a:	8c 93       	st	X, r24
     d7c:	6c c0       	rjmp	.+216    	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
     d7e:	a7 e3       	ldi	r26, 0x37	; 55
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e7 e3       	ldi	r30, 0x37	; 55
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	48 2f       	mov	r20, r24
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	02 2e       	mov	r0, r18
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <DIO_vsetPINDir+0xfe>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	0a 94       	dec	r0
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <DIO_vsetPINDir+0xfa>
     da0:	80 95       	com	r24
     da2:	84 23       	and	r24, r20
     da4:	8c 93       	st	X, r24
     da6:	57 c0       	rjmp	.+174    	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'C':
		if(direction==1)
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	a1 f4       	brne	.+40     	; 0xdd6 <DIO_vsetPINDir+0x138>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
     dae:	a4 e3       	ldi	r26, 0x34	; 52
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e4 e3       	ldi	r30, 0x34	; 52
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	48 2f       	mov	r20, r24
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 2e       	mov	r0, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <DIO_vsetPINDir+0x12e>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <DIO_vsetPINDir+0x12a>
     dd0:	84 2b       	or	r24, r20
     dd2:	8c 93       	st	X, r24
     dd4:	40 c0       	rjmp	.+128    	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
     dd6:	a4 e3       	ldi	r26, 0x34	; 52
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e4 e3       	ldi	r30, 0x34	; 52
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_vsetPINDir+0x156>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_vsetPINDir+0x152>
     df8:	80 95       	com	r24
     dfa:	84 23       	and	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	2b c0       	rjmp	.+86     	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'D':
		if(direction==1)
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	a1 f4       	brne	.+40     	; 0xe2e <DIO_vsetPINDir+0x190>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
     e06:	a1 e3       	ldi	r26, 0x31	; 49
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e1 e3       	ldi	r30, 0x31	; 49
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_vsetPINDir+0x186>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_vsetPINDir+0x182>
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	14 c0       	rjmp	.+40     	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
     e2e:	a1 e3       	ldi	r26, 0x31	; 49
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e1 e3       	ldi	r30, 0x31	; 49
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <DIO_vsetPINDir+0x1ae>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <DIO_vsetPINDir+0x1aa>
     e50:	80 95       	com	r24
     e52:	84 23       	and	r24, r20
     e54:	8c 93       	st	X, r24
		}
		break;
		default: break;
	}
}
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <DIO_write>:


void DIO_write(uint8 portname,uint8 pinnumber,uint8 outputvalue)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <DIO_write+0x6>
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <DIO_write+0x8>
     e6e:	0f 92       	push	r0
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	6a 83       	std	Y+2, r22	; 0x02
     e78:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	3d 83       	std	Y+5, r19	; 0x05
     e82:	2c 83       	std	Y+4, r18	; 0x04
     e84:	8c 81       	ldd	r24, Y+4	; 0x04
     e86:	9d 81       	ldd	r25, Y+5	; 0x05
     e88:	82 34       	cpi	r24, 0x42	; 66
     e8a:	91 05       	cpc	r25, r1
     e8c:	09 f4       	brne	.+2      	; 0xe90 <DIO_write+0x2a>
     e8e:	44 c0       	rjmp	.+136    	; 0xf18 <DIO_write+0xb2>
     e90:	2c 81       	ldd	r18, Y+4	; 0x04
     e92:	3d 81       	ldd	r19, Y+5	; 0x05
     e94:	23 34       	cpi	r18, 0x43	; 67
     e96:	31 05       	cpc	r19, r1
     e98:	34 f4       	brge	.+12     	; 0xea6 <DIO_write+0x40>
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	9d 81       	ldd	r25, Y+5	; 0x05
     e9e:	81 34       	cpi	r24, 0x41	; 65
     ea0:	91 05       	cpc	r25, r1
     ea2:	71 f0       	breq	.+28     	; 0xec0 <DIO_write+0x5a>
     ea4:	bc c0       	rjmp	.+376    	; 0x101e <DIO_write+0x1b8>
     ea6:	2c 81       	ldd	r18, Y+4	; 0x04
     ea8:	3d 81       	ldd	r19, Y+5	; 0x05
     eaa:	23 34       	cpi	r18, 0x43	; 67
     eac:	31 05       	cpc	r19, r1
     eae:	09 f4       	brne	.+2      	; 0xeb2 <DIO_write+0x4c>
     eb0:	5f c0       	rjmp	.+190    	; 0xf70 <DIO_write+0x10a>
     eb2:	8c 81       	ldd	r24, Y+4	; 0x04
     eb4:	9d 81       	ldd	r25, Y+5	; 0x05
     eb6:	84 34       	cpi	r24, 0x44	; 68
     eb8:	91 05       	cpc	r25, r1
     eba:	09 f4       	brne	.+2      	; 0xebe <DIO_write+0x58>
     ebc:	85 c0       	rjmp	.+266    	; 0xfc8 <DIO_write+0x162>
     ebe:	af c0       	rjmp	.+350    	; 0x101e <DIO_write+0x1b8>
	{
		case 'A' :
		
		if(outputvalue==1)
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	a1 f4       	brne	.+40     	; 0xeee <DIO_write+0x88>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
     ec6:	ab e3       	ldi	r26, 0x3B	; 59
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	eb e3       	ldi	r30, 0x3B	; 59
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 2e       	mov	r0, r18
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <DIO_write+0x7e>
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	0a 94       	dec	r0
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <DIO_write+0x7a>
     ee8:	84 2b       	or	r24, r20
     eea:	8c 93       	st	X, r24
     eec:	98 c0       	rjmp	.+304    	; 0x101e <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
     eee:	ab e3       	ldi	r26, 0x3B	; 59
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	eb e3       	ldi	r30, 0x3B	; 59
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_write+0xa6>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_write+0xa2>
     f10:	80 95       	com	r24
     f12:	84 23       	and	r24, r20
     f14:	8c 93       	st	X, r24
     f16:	83 c0       	rjmp	.+262    	; 0x101e <DIO_write+0x1b8>
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	a1 f4       	brne	.+40     	; 0xf46 <DIO_write+0xe0>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
     f1e:	a8 e3       	ldi	r26, 0x38	; 56
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e8 e3       	ldi	r30, 0x38	; 56
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_write+0xd6>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_write+0xd2>
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	6c c0       	rjmp	.+216    	; 0x101e <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
     f46:	a8 e3       	ldi	r26, 0x38	; 56
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e8 e3       	ldi	r30, 0x38	; 56
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_write+0xfe>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_write+0xfa>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	57 c0       	rjmp	.+174    	; 0x101e <DIO_write+0x1b8>
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	a1 f4       	brne	.+40     	; 0xf9e <DIO_write+0x138>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
     f76:	a5 e3       	ldi	r26, 0x35	; 53
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e5 e3       	ldi	r30, 0x35	; 53
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_write+0x12e>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <DIO_write+0x12a>
     f98:	84 2b       	or	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	40 c0       	rjmp	.+128    	; 0x101e <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
     f9e:	a5 e3       	ldi	r26, 0x35	; 53
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e5 e3       	ldi	r30, 0x35	; 53
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <DIO_write+0x156>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <DIO_write+0x152>
     fc0:	80 95       	com	r24
     fc2:	84 23       	and	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	2b c0       	rjmp	.+86     	; 0x101e <DIO_write+0x1b8>
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	a1 f4       	brne	.+40     	; 0xff6 <DIO_write+0x190>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
     fce:	a2 e3       	ldi	r26, 0x32	; 50
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e2 e3       	ldi	r30, 0x32	; 50
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_write+0x186>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_write+0x182>
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	14 c0       	rjmp	.+40     	; 0x101e <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
     ff6:	a2 e3       	ldi	r26, 0x32	; 50
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e2 e3       	ldi	r30, 0x32	; 50
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_write+0x1ae>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_write+0x1aa>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
		}
		break ;
		default: break ;
	}
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <DIO_u8read>:


uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	00 d0       	rcall	.+0      	; 0x1034 <DIO_u8read+0x6>
    1034:	00 d0       	rcall	.+0      	; 0x1036 <DIO_u8read+0x8>
    1036:	0f 92       	push	r0
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	8a 83       	std	Y+2, r24	; 0x02
    103e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 return_value=0;
    1040:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	3d 83       	std	Y+5, r19	; 0x05
    104a:	2c 83       	std	Y+4, r18	; 0x04
    104c:	4c 81       	ldd	r20, Y+4	; 0x04
    104e:	5d 81       	ldd	r21, Y+5	; 0x05
    1050:	42 34       	cpi	r20, 0x42	; 66
    1052:	51 05       	cpc	r21, r1
    1054:	b1 f1       	breq	.+108    	; 0x10c2 <DIO_u8read+0x94>
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	9d 81       	ldd	r25, Y+5	; 0x05
    105a:	83 34       	cpi	r24, 0x43	; 67
    105c:	91 05       	cpc	r25, r1
    105e:	34 f4       	brge	.+12     	; 0x106c <DIO_u8read+0x3e>
    1060:	2c 81       	ldd	r18, Y+4	; 0x04
    1062:	3d 81       	ldd	r19, Y+5	; 0x05
    1064:	21 34       	cpi	r18, 0x41	; 65
    1066:	31 05       	cpc	r19, r1
    1068:	71 f0       	breq	.+28     	; 0x1086 <DIO_u8read+0x58>
    106a:	84 c0       	rjmp	.+264    	; 0x1174 <DIO_u8read+0x146>
    106c:	4c 81       	ldd	r20, Y+4	; 0x04
    106e:	5d 81       	ldd	r21, Y+5	; 0x05
    1070:	43 34       	cpi	r20, 0x43	; 67
    1072:	51 05       	cpc	r21, r1
    1074:	09 f4       	brne	.+2      	; 0x1078 <DIO_u8read+0x4a>
    1076:	43 c0       	rjmp	.+134    	; 0x10fe <DIO_u8read+0xd0>
    1078:	8c 81       	ldd	r24, Y+4	; 0x04
    107a:	9d 81       	ldd	r25, Y+5	; 0x05
    107c:	84 34       	cpi	r24, 0x44	; 68
    107e:	91 05       	cpc	r25, r1
    1080:	09 f4       	brne	.+2      	; 0x1084 <DIO_u8read+0x56>
    1082:	5b c0       	rjmp	.+182    	; 0x113a <DIO_u8read+0x10c>
    1084:	77 c0       	rjmp	.+238    	; 0x1174 <DIO_u8read+0x146>
	{
		case 'A' :
		return_value=Read_bIT(PINA,pinnumber);//Read the value from the given pin in port A
    1086:	e9 e3       	ldi	r30, 0x39	; 57
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_u8read+0x72>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	2a 95       	dec	r18
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_u8read+0x6e>
    10a4:	9a 01       	movw	r18, r20
    10a6:	28 23       	and	r18, r24
    10a8:	39 23       	and	r19, r25
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	a9 01       	movw	r20, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <DIO_u8read+0x8a>
    10b4:	55 95       	asr	r21
    10b6:	47 95       	ror	r20
    10b8:	8a 95       	dec	r24
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <DIO_u8read+0x86>
    10bc:	ca 01       	movw	r24, r20
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	59 c0       	rjmp	.+178    	; 0x1174 <DIO_u8read+0x146>
		break;
		
		case 'B' :
		return_value=Read_bIT(PINB,pinnumber);//Read the value from the given pin in port B
    10c2:	e6 e3       	ldi	r30, 0x36	; 54
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <DIO_u8read+0xae>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	2a 95       	dec	r18
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <DIO_u8read+0xaa>
    10e0:	9a 01       	movw	r18, r20
    10e2:	28 23       	and	r18, r24
    10e4:	39 23       	and	r19, r25
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	a9 01       	movw	r20, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_u8read+0xc6>
    10f0:	55 95       	asr	r21
    10f2:	47 95       	ror	r20
    10f4:	8a 95       	dec	r24
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_u8read+0xc2>
    10f8:	ca 01       	movw	r24, r20
    10fa:	89 83       	std	Y+1, r24	; 0x01
    10fc:	3b c0       	rjmp	.+118    	; 0x1174 <DIO_u8read+0x146>
		break;
		
		case 'C' :
		return_value=Read_bIT(PINC,pinnumber);//Read the value from the given pin in port C
    10fe:	e3 e3       	ldi	r30, 0x33	; 51
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	48 2f       	mov	r20, r24
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <DIO_u8read+0xea>
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	2a 95       	dec	r18
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <DIO_u8read+0xe6>
    111c:	9a 01       	movw	r18, r20
    111e:	28 23       	and	r18, r24
    1120:	39 23       	and	r19, r25
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a9 01       	movw	r20, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_u8read+0x102>
    112c:	55 95       	asr	r21
    112e:	47 95       	ror	r20
    1130:	8a 95       	dec	r24
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_u8read+0xfe>
    1134:	ca 01       	movw	r24, r20
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	1d c0       	rjmp	.+58     	; 0x1174 <DIO_u8read+0x146>
		break;
		
		case 'D' :
		return_value=Read_bIT(PIND,pinnumber);//Read the value from the given pin in port D
    113a:	e0 e3       	ldi	r30, 0x30	; 48
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_u8read+0x126>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	2a 95       	dec	r18
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_u8read+0x122>
    1158:	9a 01       	movw	r18, r20
    115a:	28 23       	and	r18, r24
    115c:	39 23       	and	r19, r25
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	a9 01       	movw	r20, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <DIO_u8read+0x13e>
    1168:	55 95       	asr	r21
    116a:	47 95       	ror	r20
    116c:	8a 95       	dec	r24
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <DIO_u8read+0x13a>
    1170:	ca 01       	movw	r24, r20
    1172:	89 83       	std	Y+1, r24	; 0x01
		break;
		default: break;
	}
	return return_value ;
    1174:	89 81       	ldd	r24, Y+1	; 0x01
}
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <DIO_toggle>:
void DIO_toggle(uint8 portname,uint8 pinnumber)
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	00 d0       	rcall	.+0      	; 0x118c <DIO_toggle+0x6>
    118c:	00 d0       	rcall	.+0      	; 0x118e <DIO_toggle+0x8>
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	3c 83       	std	Y+4, r19	; 0x04
    119e:	2b 83       	std	Y+3, r18	; 0x03
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	82 34       	cpi	r24, 0x42	; 66
    11a6:	91 05       	cpc	r25, r1
    11a8:	51 f1       	breq	.+84     	; 0x11fe <DIO_toggle+0x78>
    11aa:	2b 81       	ldd	r18, Y+3	; 0x03
    11ac:	3c 81       	ldd	r19, Y+4	; 0x04
    11ae:	23 34       	cpi	r18, 0x43	; 67
    11b0:	31 05       	cpc	r19, r1
    11b2:	34 f4       	brge	.+12     	; 0x11c0 <DIO_toggle+0x3a>
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	81 34       	cpi	r24, 0x41	; 65
    11ba:	91 05       	cpc	r25, r1
    11bc:	61 f0       	breq	.+24     	; 0x11d6 <DIO_toggle+0x50>
    11be:	5a c0       	rjmp	.+180    	; 0x1274 <DIO_toggle+0xee>
    11c0:	2b 81       	ldd	r18, Y+3	; 0x03
    11c2:	3c 81       	ldd	r19, Y+4	; 0x04
    11c4:	23 34       	cpi	r18, 0x43	; 67
    11c6:	31 05       	cpc	r19, r1
    11c8:	71 f1       	breq	.+92     	; 0x1226 <DIO_toggle+0xa0>
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	9c 81       	ldd	r25, Y+4	; 0x04
    11ce:	84 34       	cpi	r24, 0x44	; 68
    11d0:	91 05       	cpc	r25, r1
    11d2:	e9 f1       	breq	.+122    	; 0x124e <DIO_toggle+0xc8>
    11d4:	4f c0       	rjmp	.+158    	; 0x1274 <DIO_toggle+0xee>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
    11d6:	ab e3       	ldi	r26, 0x3B	; 59
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	eb e3       	ldi	r30, 0x3B	; 59
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_toggle+0x6e>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_toggle+0x6a>
    11f8:	84 27       	eor	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	3b c0       	rjmp	.+118    	; 0x1274 <DIO_toggle+0xee>
		break;
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
    11fe:	a8 e3       	ldi	r26, 0x38	; 56
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e8 e3       	ldi	r30, 0x38	; 56
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_toggle+0x96>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_toggle+0x92>
    1220:	84 27       	eor	r24, r20
    1222:	8c 93       	st	X, r24
    1224:	27 c0       	rjmp	.+78     	; 0x1274 <DIO_toggle+0xee>
		break;
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
    1226:	a5 e3       	ldi	r26, 0x35	; 53
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e5 e3       	ldi	r30, 0x35	; 53
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO_toggle+0xbe>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <DIO_toggle+0xba>
    1248:	84 27       	eor	r24, r20
    124a:	8c 93       	st	X, r24
    124c:	13 c0       	rjmp	.+38     	; 0x1274 <DIO_toggle+0xee>
		break;
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
    124e:	a2 e3       	ldi	r26, 0x32	; 50
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e2 e3       	ldi	r30, 0x32	; 50
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <DIO_toggle+0xe6>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <DIO_toggle+0xe2>
    1270:	84 27       	eor	r24, r20
    1272:	8c 93       	st	X, r24
		break;
		default: break;
	}
}
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <DIO_write_port>:
void DIO_write_port(uint8 portname,uint8 portvalue)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	00 d0       	rcall	.+0      	; 0x1288 <DIO_write_port+0x6>
    1288:	00 d0       	rcall	.+0      	; 0x128a <DIO_write_port+0x8>
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	3c 83       	std	Y+4, r19	; 0x04
    129a:	2b 83       	std	Y+3, r18	; 0x03
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	9c 81       	ldd	r25, Y+4	; 0x04
    12a0:	82 34       	cpi	r24, 0x42	; 66
    12a2:	91 05       	cpc	r25, r1
    12a4:	d9 f0       	breq	.+54     	; 0x12dc <DIO_write_port+0x5a>
    12a6:	2b 81       	ldd	r18, Y+3	; 0x03
    12a8:	3c 81       	ldd	r19, Y+4	; 0x04
    12aa:	23 34       	cpi	r18, 0x43	; 67
    12ac:	31 05       	cpc	r19, r1
    12ae:	34 f4       	brge	.+12     	; 0x12bc <DIO_write_port+0x3a>
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	81 34       	cpi	r24, 0x41	; 65
    12b6:	91 05       	cpc	r25, r1
    12b8:	61 f0       	breq	.+24     	; 0x12d2 <DIO_write_port+0x50>
    12ba:	1e c0       	rjmp	.+60     	; 0x12f8 <DIO_write_port+0x76>
    12bc:	2b 81       	ldd	r18, Y+3	; 0x03
    12be:	3c 81       	ldd	r19, Y+4	; 0x04
    12c0:	23 34       	cpi	r18, 0x43	; 67
    12c2:	31 05       	cpc	r19, r1
    12c4:	81 f0       	breq	.+32     	; 0x12e6 <DIO_write_port+0x64>
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	84 34       	cpi	r24, 0x44	; 68
    12cc:	91 05       	cpc	r25, r1
    12ce:	81 f0       	breq	.+32     	; 0x12f0 <DIO_write_port+0x6e>
    12d0:	13 c0       	rjmp	.+38     	; 0x12f8 <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
    12d2:	eb e3       	ldi	r30, 0x3B	; 59
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	80 83       	st	Z, r24
    12da:	0e c0       	rjmp	.+28     	; 0x12f8 <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
    12dc:	e8 e3       	ldi	r30, 0x38	; 56
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	80 83       	st	Z, r24
    12e4:	09 c0       	rjmp	.+18     	; 0x12f8 <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
    12e6:	e5 e3       	ldi	r30, 0x35	; 53
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	80 83       	st	Z, r24
    12ee:	04 c0       	rjmp	.+8      	; 0x12f8 <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
    12f0:	e2 e3       	ldi	r30, 0x32	; 50
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	80 83       	st	Z, r24
		break ;
		default: break ;
	}
}
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <dio_write_highnibble>:
void dio_write_highnibble(uint8 portname,uint8 value)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	00 d0       	rcall	.+0      	; 0x130c <dio_write_highnibble+0x6>
    130c:	00 d0       	rcall	.+0      	; 0x130e <dio_write_highnibble+0x8>
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	3c 83       	std	Y+4, r19	; 0x04
    131e:	2b 83       	std	Y+3, r18	; 0x03
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	82 34       	cpi	r24, 0x42	; 66
    1326:	91 05       	cpc	r25, r1
    1328:	09 f1       	breq	.+66     	; 0x136c <dio_write_highnibble+0x66>
    132a:	2b 81       	ldd	r18, Y+3	; 0x03
    132c:	3c 81       	ldd	r19, Y+4	; 0x04
    132e:	23 34       	cpi	r18, 0x43	; 67
    1330:	31 05       	cpc	r19, r1
    1332:	34 f4       	brge	.+12     	; 0x1340 <dio_write_highnibble+0x3a>
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	81 34       	cpi	r24, 0x41	; 65
    133a:	91 05       	cpc	r25, r1
    133c:	61 f0       	breq	.+24     	; 0x1356 <dio_write_highnibble+0x50>
    133e:	36 c0       	rjmp	.+108    	; 0x13ac <dio_write_highnibble+0xa6>
    1340:	2b 81       	ldd	r18, Y+3	; 0x03
    1342:	3c 81       	ldd	r19, Y+4	; 0x04
    1344:	23 34       	cpi	r18, 0x43	; 67
    1346:	31 05       	cpc	r19, r1
    1348:	e1 f0       	breq	.+56     	; 0x1382 <dio_write_highnibble+0x7c>
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	84 34       	cpi	r24, 0x44	; 68
    1350:	91 05       	cpc	r25, r1
    1352:	11 f1       	breq	.+68     	; 0x1398 <dio_write_highnibble+0x92>
    1354:	2b c0       	rjmp	.+86     	; 0x13ac <dio_write_highnibble+0xa6>
	{
		case 'A' :
		PORTA|=(value&0xf0);//Set only the high nibble of the port A by the given value
    1356:	ab e3       	ldi	r26, 0x3B	; 59
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	eb e3       	ldi	r30, 0x3B	; 59
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	98 2f       	mov	r25, r24
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	80 7f       	andi	r24, 0xF0	; 240
    1366:	89 2b       	or	r24, r25
    1368:	8c 93       	st	X, r24
    136a:	20 c0       	rjmp	.+64     	; 0x13ac <dio_write_highnibble+0xa6>
		break ;
		case 'B':
		PORTB|=(value&0xf0);//Set only the high nibble of the port B by the given value
    136c:	a8 e3       	ldi	r26, 0x38	; 56
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e8 e3       	ldi	r30, 0x38	; 56
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	98 2f       	mov	r25, r24
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	80 7f       	andi	r24, 0xF0	; 240
    137c:	89 2b       	or	r24, r25
    137e:	8c 93       	st	X, r24
    1380:	15 c0       	rjmp	.+42     	; 0x13ac <dio_write_highnibble+0xa6>
		break ;
		case 'C' :
		PORTC|=(value&0xf0);//Set only the high nibble of the port C by the given value
    1382:	a5 e3       	ldi	r26, 0x35	; 53
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e5 e3       	ldi	r30, 0x35	; 53
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	98 2f       	mov	r25, r24
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	80 7f       	andi	r24, 0xF0	; 240
    1392:	89 2b       	or	r24, r25
    1394:	8c 93       	st	X, r24
    1396:	0a c0       	rjmp	.+20     	; 0x13ac <dio_write_highnibble+0xa6>
		break ;
		case 'D':
		PORTD|=(value&0xf0);//Set only the high nibble of the port D by the given value
    1398:	a2 e3       	ldi	r26, 0x32	; 50
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e2 e3       	ldi	r30, 0x32	; 50
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	98 2f       	mov	r25, r24
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	80 7f       	andi	r24, 0xF0	; 240
    13a8:	89 2b       	or	r24, r25
    13aa:	8c 93       	st	X, r24
		break ;
		default: break ;
		
	}
}
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <clear_high_nibble>:

void clear_high_nibble(uint8 portname)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <clear_high_nibble+0x6>
    13c0:	0f 92       	push	r0
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	3b 83       	std	Y+3, r19	; 0x03
    13d0:	2a 83       	std	Y+2, r18	; 0x02
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	9b 81       	ldd	r25, Y+3	; 0x03
    13d6:	82 34       	cpi	r24, 0x42	; 66
    13d8:	91 05       	cpc	r25, r1
    13da:	f1 f0       	breq	.+60     	; 0x1418 <clear_high_nibble+0x5e>
    13dc:	2a 81       	ldd	r18, Y+2	; 0x02
    13de:	3b 81       	ldd	r19, Y+3	; 0x03
    13e0:	23 34       	cpi	r18, 0x43	; 67
    13e2:	31 05       	cpc	r19, r1
    13e4:	34 f4       	brge	.+12     	; 0x13f2 <clear_high_nibble+0x38>
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ea:	81 34       	cpi	r24, 0x41	; 65
    13ec:	91 05       	cpc	r25, r1
    13ee:	61 f0       	breq	.+24     	; 0x1408 <clear_high_nibble+0x4e>
    13f0:	2a c0       	rjmp	.+84     	; 0x1446 <clear_high_nibble+0x8c>
    13f2:	2a 81       	ldd	r18, Y+2	; 0x02
    13f4:	3b 81       	ldd	r19, Y+3	; 0x03
    13f6:	23 34       	cpi	r18, 0x43	; 67
    13f8:	31 05       	cpc	r19, r1
    13fa:	b1 f0       	breq	.+44     	; 0x1428 <clear_high_nibble+0x6e>
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1400:	84 34       	cpi	r24, 0x44	; 68
    1402:	91 05       	cpc	r25, r1
    1404:	c9 f0       	breq	.+50     	; 0x1438 <clear_high_nibble+0x7e>
    1406:	1f c0       	rjmp	.+62     	; 0x1446 <clear_high_nibble+0x8c>
	{
		case 'A' :
		PORTA&=0x0f;//set the value of the high nibble of the port A as low
    1408:	ab e3       	ldi	r26, 0x3B	; 59
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	eb e3       	ldi	r30, 0x3B	; 59
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	8f 70       	andi	r24, 0x0F	; 15
    1414:	8c 93       	st	X, r24
    1416:	17 c0       	rjmp	.+46     	; 0x1446 <clear_high_nibble+0x8c>
		break ;
		case 'B':
		PORTB&=0x0f;//set the value of the high nibble of the port B as low
    1418:	a8 e3       	ldi	r26, 0x38	; 56
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e8 e3       	ldi	r30, 0x38	; 56
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	8f 70       	andi	r24, 0x0F	; 15
    1424:	8c 93       	st	X, r24
    1426:	0f c0       	rjmp	.+30     	; 0x1446 <clear_high_nibble+0x8c>
		break ;
		case 'C' :
		PORTC&=0x0f;//set the value of the high nibble of the port C as low
    1428:	a5 e3       	ldi	r26, 0x35	; 53
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e5 e3       	ldi	r30, 0x35	; 53
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	8f 70       	andi	r24, 0x0F	; 15
    1434:	8c 93       	st	X, r24
    1436:	07 c0       	rjmp	.+14     	; 0x1446 <clear_high_nibble+0x8c>
		break ;
		case 'D':
		PORTD&=0x0f;//set the value of the high nibble of the port D as low
    1438:	a2 e3       	ldi	r26, 0x32	; 50
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e2 e3       	ldi	r30, 0x32	; 50
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	8f 70       	andi	r24, 0x0F	; 15
    1444:	8c 93       	st	X, r24
		break ;
		default: break ;
		
	}
}
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <DIO_vconnectpullup>:

void DIO_vconnectpullup(uint8 portname ,uint8 pinnumber, uint8 connect_pullup)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	00 d0       	rcall	.+0      	; 0x1458 <DIO_vconnectpullup+0x6>
    1458:	00 d0       	rcall	.+0      	; 0x145a <DIO_vconnectpullup+0x8>
    145a:	0f 92       	push	r0
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	89 83       	std	Y+1, r24	; 0x01
    1462:	6a 83       	std	Y+2, r22	; 0x02
    1464:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	3d 83       	std	Y+5, r19	; 0x05
    146e:	2c 83       	std	Y+4, r18	; 0x04
    1470:	8c 81       	ldd	r24, Y+4	; 0x04
    1472:	9d 81       	ldd	r25, Y+5	; 0x05
    1474:	82 34       	cpi	r24, 0x42	; 66
    1476:	91 05       	cpc	r25, r1
    1478:	09 f4       	brne	.+2      	; 0x147c <DIO_vconnectpullup+0x2a>
    147a:	5e c0       	rjmp	.+188    	; 0x1538 <DIO_vconnectpullup+0xe6>
    147c:	2c 81       	ldd	r18, Y+4	; 0x04
    147e:	3d 81       	ldd	r19, Y+5	; 0x05
    1480:	23 34       	cpi	r18, 0x43	; 67
    1482:	31 05       	cpc	r19, r1
    1484:	34 f4       	brge	.+12     	; 0x1492 <DIO_vconnectpullup+0x40>
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	81 34       	cpi	r24, 0x41	; 65
    148c:	91 05       	cpc	r25, r1
    148e:	71 f0       	breq	.+28     	; 0x14ac <DIO_vconnectpullup+0x5a>
    1490:	24 c1       	rjmp	.+584    	; 0x16da <DIO_vconnectpullup+0x288>
    1492:	2c 81       	ldd	r18, Y+4	; 0x04
    1494:	3d 81       	ldd	r19, Y+5	; 0x05
    1496:	23 34       	cpi	r18, 0x43	; 67
    1498:	31 05       	cpc	r19, r1
    149a:	09 f4       	brne	.+2      	; 0x149e <DIO_vconnectpullup+0x4c>
    149c:	93 c0       	rjmp	.+294    	; 0x15c4 <DIO_vconnectpullup+0x172>
    149e:	8c 81       	ldd	r24, Y+4	; 0x04
    14a0:	9d 81       	ldd	r25, Y+5	; 0x05
    14a2:	84 34       	cpi	r24, 0x44	; 68
    14a4:	91 05       	cpc	r25, r1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <DIO_vconnectpullup+0x58>
    14a8:	d3 c0       	rjmp	.+422    	; 0x1650 <DIO_vconnectpullup+0x1fe>
    14aa:	17 c1       	rjmp	.+558    	; 0x16da <DIO_vconnectpullup+0x288>
	{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case 'A':
		if(connect_pullup==1)
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	81 30       	cpi	r24, 0x01	; 1
    14b0:	71 f5       	brne	.+92     	; 0x150e <DIO_vconnectpullup+0xbc>
		{
			CLR_BIT(SFIOR,PUD);
    14b2:	a0 e5       	ldi	r26, 0x50	; 80
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e0 e5       	ldi	r30, 0x50	; 80
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	8b 7f       	andi	r24, 0xFB	; 251
    14be:	8c 93       	st	X, r24
			CLR_BIT(DDRA,pinnumber);
    14c0:	aa e3       	ldi	r26, 0x3A	; 58
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	ea e3       	ldi	r30, 0x3A	; 58
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	48 2f       	mov	r20, r24
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <DIO_vconnectpullup+0x8a>
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	2a 95       	dec	r18
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <DIO_vconnectpullup+0x86>
    14e0:	80 95       	com	r24
    14e2:	84 23       	and	r24, r20
    14e4:	8c 93       	st	X, r24
			SET_BIT(PORTA,pinnumber);
    14e6:	ab e3       	ldi	r26, 0x3B	; 59
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	eb e3       	ldi	r30, 0x3B	; 59
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	48 2f       	mov	r20, r24
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	02 2e       	mov	r0, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <DIO_vconnectpullup+0xb2>
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	0a 94       	dec	r0
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <DIO_vconnectpullup+0xae>
    1508:	84 2b       	or	r24, r20
    150a:	8c 93       	st	X, r24
    150c:	e6 c0       	rjmp	.+460    	; 0x16da <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
    150e:	ab e3       	ldi	r26, 0x3B	; 59
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	eb e3       	ldi	r30, 0x3B	; 59
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	48 2f       	mov	r20, r24
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	02 2e       	mov	r0, r18
    1526:	02 c0       	rjmp	.+4      	; 0x152c <DIO_vconnectpullup+0xda>
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	0a 94       	dec	r0
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <DIO_vconnectpullup+0xd6>
    1530:	80 95       	com	r24
    1532:	84 23       	and	r24, r20
    1534:	8c 93       	st	X, r24
    1536:	d1 c0       	rjmp	.+418    	; 0x16da <DIO_vconnectpullup+0x288>
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port B */
		case 'B':
		if(connect_pullup==1)
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	81 30       	cpi	r24, 0x01	; 1
    153c:	71 f5       	brne	.+92     	; 0x159a <DIO_vconnectpullup+0x148>
		{
			CLR_BIT(SFIOR,PUD);
    153e:	a0 e5       	ldi	r26, 0x50	; 80
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e0 e5       	ldi	r30, 0x50	; 80
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	8b 7f       	andi	r24, 0xFB	; 251
    154a:	8c 93       	st	X, r24
			CLR_BIT(DDRB,pinnumber);
    154c:	a7 e3       	ldi	r26, 0x37	; 55
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e7 e3       	ldi	r30, 0x37	; 55
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	48 2f       	mov	r20, r24
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <DIO_vconnectpullup+0x116>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	2a 95       	dec	r18
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <DIO_vconnectpullup+0x112>
    156c:	80 95       	com	r24
    156e:	84 23       	and	r24, r20
    1570:	8c 93       	st	X, r24
			SET_BIT(PORTB,pinnumber);
    1572:	a8 e3       	ldi	r26, 0x38	; 56
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e8 e3       	ldi	r30, 0x38	; 56
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	48 2f       	mov	r20, r24
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 2e       	mov	r0, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO_vconnectpullup+0x13e>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	0a 94       	dec	r0
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO_vconnectpullup+0x13a>
    1594:	84 2b       	or	r24, r20
    1596:	8c 93       	st	X, r24
    1598:	a0 c0       	rjmp	.+320    	; 0x16da <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
    159a:	a8 e3       	ldi	r26, 0x38	; 56
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e8 e3       	ldi	r30, 0x38	; 56
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	48 2f       	mov	r20, r24
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 2e       	mov	r0, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <DIO_vconnectpullup+0x166>
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <DIO_vconnectpullup+0x162>
    15bc:	80 95       	com	r24
    15be:	84 23       	and	r24, r20
    15c0:	8c 93       	st	X, r24
    15c2:	8b c0       	rjmp	.+278    	; 0x16da <DIO_vconnectpullup+0x288>
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port C */
		case 'C':
		if(connect_pullup==1)
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	71 f5       	brne	.+92     	; 0x1626 <DIO_vconnectpullup+0x1d4>
		{
			CLR_BIT(SFIOR,PUD);
    15ca:	a0 e5       	ldi	r26, 0x50	; 80
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e0 e5       	ldi	r30, 0x50	; 80
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	8b 7f       	andi	r24, 0xFB	; 251
    15d6:	8c 93       	st	X, r24
			CLR_BIT(DDRC,pinnumber);
    15d8:	a4 e3       	ldi	r26, 0x34	; 52
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e4 e3       	ldi	r30, 0x34	; 52
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <DIO_vconnectpullup+0x1a2>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	2a 95       	dec	r18
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <DIO_vconnectpullup+0x19e>
    15f8:	80 95       	com	r24
    15fa:	84 23       	and	r24, r20
    15fc:	8c 93       	st	X, r24
			SET_BIT(PORTC,pinnumber);
    15fe:	a5 e3       	ldi	r26, 0x35	; 53
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e5 e3       	ldi	r30, 0x35	; 53
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_vconnectpullup+0x1ca>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <DIO_vconnectpullup+0x1c6>
    1620:	84 2b       	or	r24, r20
    1622:	8c 93       	st	X, r24
    1624:	5a c0       	rjmp	.+180    	; 0x16da <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
    1626:	a5 e3       	ldi	r26, 0x35	; 53
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e5 e3       	ldi	r30, 0x35	; 53
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	48 2f       	mov	r20, r24
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 2e       	mov	r0, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <DIO_vconnectpullup+0x1f2>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <DIO_vconnectpullup+0x1ee>
    1648:	80 95       	com	r24
    164a:	84 23       	and	r24, r20
    164c:	8c 93       	st	X, r24
    164e:	45 c0       	rjmp	.+138    	; 0x16da <DIO_vconnectpullup+0x288>
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port D */
		case 'D':
		if(connect_pullup==1)
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	71 f5       	brne	.+92     	; 0x16b2 <DIO_vconnectpullup+0x260>
		{
			CLR_BIT(SFIOR,PUD);
    1656:	a0 e5       	ldi	r26, 0x50	; 80
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e0 e5       	ldi	r30, 0x50	; 80
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	8b 7f       	andi	r24, 0xFB	; 251
    1662:	8c 93       	st	X, r24
			CLR_BIT(DDRD,pinnumber);
    1664:	a1 e3       	ldi	r26, 0x31	; 49
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e1 e3       	ldi	r30, 0x31	; 49
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	48 2f       	mov	r20, r24
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <DIO_vconnectpullup+0x22e>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	2a 95       	dec	r18
    1682:	e2 f7       	brpl	.-8      	; 0x167c <DIO_vconnectpullup+0x22a>
    1684:	80 95       	com	r24
    1686:	84 23       	and	r24, r20
    1688:	8c 93       	st	X, r24
			SET_BIT(PORTD,pinnumber);
    168a:	a2 e3       	ldi	r26, 0x32	; 50
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e2 e3       	ldi	r30, 0x32	; 50
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	48 2f       	mov	r20, r24
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 2e       	mov	r0, r18
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <DIO_vconnectpullup+0x256>
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	0a 94       	dec	r0
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <DIO_vconnectpullup+0x252>
    16ac:	84 2b       	or	r24, r20
    16ae:	8c 93       	st	X, r24
    16b0:	14 c0       	rjmp	.+40     	; 0x16da <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
    16b2:	a2 e3       	ldi	r26, 0x32	; 50
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e2 e3       	ldi	r30, 0x32	; 50
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	48 2f       	mov	r20, r24
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	02 2e       	mov	r0, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <DIO_vconnectpullup+0x27e>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	0a 94       	dec	r0
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <DIO_vconnectpullup+0x27a>
    16d4:	80 95       	com	r24
    16d6:	84 23       	and	r24, r20
    16d8:	8c 93       	st	X, r24
		}
		break;
		
	}
}
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <EEPROM_ui8ReadByteFromAddress>:
#include "EEPROM.h"
#include <avr/io.h>

uint8 EEPROM_ui8ReadByteFromAddress(const uint16 u16Address)
{
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <EEPROM_ui8ReadByteFromAddress+0x6>
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	9a 83       	std	Y+2, r25	; 0x02
    16f6:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
    16f8:	ec e3       	ldi	r30, 0x3C	; 60
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	88 2f       	mov	r24, r24
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	82 70       	andi	r24, 0x02	; 2
    1704:	90 70       	andi	r25, 0x00	; 0
    1706:	95 95       	asr	r25
    1708:	87 95       	ror	r24
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	91 05       	cpc	r25, r1
    170e:	a1 f3       	breq	.-24     	; 0x16f8 <EEPROM_ui8ReadByteFromAddress+0xe>
	;
	/* Set up address register */
	EEAR = u16Address;
    1710:	ee e3       	ldi	r30, 0x3E	; 62
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	9a 81       	ldd	r25, Y+2	; 0x02
    1718:	91 83       	std	Z+1, r25	; 0x01
    171a:	80 83       	st	Z, r24
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
    171c:	ac e3       	ldi	r26, 0x3C	; 60
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	ec e3       	ldi	r30, 0x3C	; 60
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	81 60       	ori	r24, 0x01	; 1
    1728:	8c 93       	st	X, r24
	/* Return data from data register */
	return EEDR;
    172a:	ed e3       	ldi	r30, 0x3D	; 61
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
}
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <EEPROM_vReadBlockFromAddress>:

void EEPROM_vReadBlockFromAddress(const uint16 uiAddress, uint8* dist,const uint16 size)
{
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	28 97       	sbiw	r28, 0x08	; 8
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
    174e:	9c 83       	std	Y+4, r25	; 0x04
    1750:	8b 83       	std	Y+3, r24	; 0x03
    1752:	7e 83       	std	Y+6, r23	; 0x06
    1754:	6d 83       	std	Y+5, r22	; 0x05
    1756:	58 87       	std	Y+8, r21	; 0x08
    1758:	4f 83       	std	Y+7, r20	; 0x07
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
    175a:	ec e3       	ldi	r30, 0x3C	; 60
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	82 70       	andi	r24, 0x02	; 2
    1766:	90 70       	andi	r25, 0x00	; 0
    1768:	95 95       	asr	r25
    176a:	87 95       	ror	r24
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	91 05       	cpc	r25, r1
    1770:	a1 f3       	breq	.-24     	; 0x175a <EEPROM_vReadBlockFromAddress+0x20>
	;

	uint16 counter = 0;//the counter of bytes that are read
    1772:	1a 82       	std	Y+2, r1	; 0x02
    1774:	19 82       	std	Y+1, r1	; 0x01
    1776:	21 c0       	rjmp	.+66     	; 0x17ba <EEPROM_vReadBlockFromAddress+0x80>

	while (counter < size) //loop until move all bytes to the given array
	{
		/* Set up address register */
		EEAR = uiAddress + counter;
    1778:	ee e3       	ldi	r30, 0x3E	; 62
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	2b 81       	ldd	r18, Y+3	; 0x03
    177e:	3c 81       	ldd	r19, Y+4	; 0x04
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	9a 81       	ldd	r25, Y+2	; 0x02
    1784:	82 0f       	add	r24, r18
    1786:	93 1f       	adc	r25, r19
    1788:	91 83       	std	Z+1, r25	; 0x01
    178a:	80 83       	st	Z, r24
		/* Start EEPROM read by writing EERE */
		EECR |= (1 << EERE);
    178c:	ac e3       	ldi	r26, 0x3C	; 60
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	ec e3       	ldi	r30, 0x3C	; 60
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	81 60       	ori	r24, 0x01	; 1
    1798:	8c 93       	st	X, r24
		/* move data from data register to the array */
		*(dist + counter) = EEDR;
    179a:	2d 81       	ldd	r18, Y+5	; 0x05
    179c:	3e 81       	ldd	r19, Y+6	; 0x06
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	9a 81       	ldd	r25, Y+2	; 0x02
    17a2:	d9 01       	movw	r26, r18
    17a4:	a8 0f       	add	r26, r24
    17a6:	b9 1f       	adc	r27, r25
    17a8:	ed e3       	ldi	r30, 0x3D	; 61
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	8c 93       	st	X, r24

		counter++;//increase the bytes counter
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	01 96       	adiw	r24, 0x01	; 1
    17b6:	9a 83       	std	Y+2, r25	; 0x02
    17b8:	89 83       	std	Y+1, r24	; 0x01
	while (((EECR & (1 << EEWE))>>EEWE)==1)
	;

	uint16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
    17ba:	29 81       	ldd	r18, Y+1	; 0x01
    17bc:	3a 81       	ldd	r19, Y+2	; 0x02
    17be:	8f 81       	ldd	r24, Y+7	; 0x07
    17c0:	98 85       	ldd	r25, Y+8	; 0x08
    17c2:	28 17       	cp	r18, r24
    17c4:	39 07       	cpc	r19, r25
    17c6:	c0 f2       	brcs	.-80     	; 0x1778 <EEPROM_vReadBlockFromAddress+0x3e>
		/* move data from data register to the array */
		*(dist + counter) = EEDR;

		counter++;//increase the bytes counter
	}
}
    17c8:	28 96       	adiw	r28, 0x08	; 8
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <EEPROM_vWriteByteToAddress>:

void EEPROM_vWriteByteToAddress(const uint16 uiAddress, const uint8 uiData)
{
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <EEPROM_vWriteByteToAddress+0x6>
    17e0:	0f 92       	push	r0
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	9a 83       	std	Y+2, r25	; 0x02
    17e8:	89 83       	std	Y+1, r24	; 0x01
    17ea:	6b 83       	std	Y+3, r22	; 0x03

	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
    17ec:	ec e3       	ldi	r30, 0x3C	; 60
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	88 2f       	mov	r24, r24
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	82 70       	andi	r24, 0x02	; 2
    17f8:	90 70       	andi	r25, 0x00	; 0
    17fa:	95 95       	asr	r25
    17fc:	87 95       	ror	r24
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	91 05       	cpc	r25, r1
    1802:	a1 f3       	breq	.-24     	; 0x17ec <EEPROM_vWriteByteToAddress+0x12>
	;
	/* Set up address register */
	EEAR = uiAddress;
    1804:	ee e3       	ldi	r30, 0x3E	; 62
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	9a 81       	ldd	r25, Y+2	; 0x02
    180c:	91 83       	std	Z+1, r25	; 0x01
    180e:	80 83       	st	Z, r24

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
    1810:	ac e3       	ldi	r26, 0x3C	; 60
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	ec e3       	ldi	r30, 0x3C	; 60
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	81 60       	ori	r24, 0x01	; 1
    181c:	8c 93       	st	X, r24
	if (EEDR != uiData)//compare the value read to the value to be written
    181e:	ed e3       	ldi	r30, 0x3D	; 61
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	90 81       	ld	r25, Z
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	98 17       	cp	r25, r24
    1828:	91 f0       	breq	.+36     	; 0x184e <EEPROM_vWriteByteToAddress+0x74>
	{//if they are not equal then write the data 
		EEDR = uiData;//move the data to EEDR
    182a:	ed e3       	ldi	r30, 0x3D	; 61
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	80 83       	st	Z, r24

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
    1832:	ac e3       	ldi	r26, 0x3C	; 60
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	ec e3       	ldi	r30, 0x3C	; 60
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	84 60       	ori	r24, 0x04	; 4
    183e:	8c 93       	st	X, r24
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
    1840:	ac e3       	ldi	r26, 0x3C	; 60
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	ec e3       	ldi	r30, 0x3C	; 60
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	82 60       	ori	r24, 0x02	; 2
    184c:	8c 93       	st	X, r24
	else
	{

	}

}
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <EEPROM_vWriteBlockToAddress>:

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	28 97       	sbiw	r28, 0x08	; 8
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	9c 83       	std	Y+4, r25	; 0x04
    1870:	8b 83       	std	Y+3, r24	; 0x03
    1872:	7e 83       	std	Y+6, r23	; 0x06
    1874:	6d 83       	std	Y+5, r22	; 0x05
    1876:	58 87       	std	Y+8, r21	; 0x08
    1878:	4f 83       	std	Y+7, r20	; 0x07
	uint16 counter = 0;//Bytes write counter
    187a:	1a 82       	std	Y+2, r1	; 0x02
    187c:	19 82       	std	Y+1, r1	; 0x01
    187e:	48 c0       	rjmp	.+144    	; 0x1910 <EEPROM_vWriteBlockToAddress+0xb6>
	while (counter < size)
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
    1880:	ec e3       	ldi	r30, 0x3C	; 60
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	88 2f       	mov	r24, r24
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	82 70       	andi	r24, 0x02	; 2
    188c:	90 70       	andi	r25, 0x00	; 0
    188e:	95 95       	asr	r25
    1890:	87 95       	ror	r24
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	91 05       	cpc	r25, r1
    1896:	a1 f3       	breq	.-24     	; 0x1880 <EEPROM_vWriteBlockToAddress+0x26>
		;
		/* Set up address register */
		EEAR = uiAddress + counter;
    1898:	ee e3       	ldi	r30, 0x3E	; 62
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	2b 81       	ldd	r18, Y+3	; 0x03
    189e:	3c 81       	ldd	r19, Y+4	; 0x04
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	9a 81       	ldd	r25, Y+2	; 0x02
    18a4:	82 0f       	add	r24, r18
    18a6:	93 1f       	adc	r25, r19
    18a8:	91 83       	std	Z+1, r25	; 0x01
    18aa:	80 83       	st	Z, r24

		/* Read the byte in the address of EEAR */
		EECR |= (1 << EERE);
    18ac:	ac e3       	ldi	r26, 0x3C	; 60
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	ec e3       	ldi	r30, 0x3C	; 60
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	81 60       	ori	r24, 0x01	; 1
    18b8:	8c 93       	st	X, r24
		if (EEDR != (*(uiData + counter)))//compare the value read to the value to be written
    18ba:	ed e3       	ldi	r30, 0x3D	; 61
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	40 81       	ld	r20, Z
    18c0:	2d 81       	ldd	r18, Y+5	; 0x05
    18c2:	3e 81       	ldd	r19, Y+6	; 0x06
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	9a 81       	ldd	r25, Y+2	; 0x02
    18c8:	f9 01       	movw	r30, r18
    18ca:	e8 0f       	add	r30, r24
    18cc:	f9 1f       	adc	r31, r25
    18ce:	80 81       	ld	r24, Z
    18d0:	48 17       	cp	r20, r24
    18d2:	c9 f0       	breq	.+50     	; 0x1906 <EEPROM_vWriteBlockToAddress+0xac>
		{//if they are not equal then write the data 
			EEDR = *(uiData + counter);//move the data to EEDR
    18d4:	ad e3       	ldi	r26, 0x3D	; 61
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	2d 81       	ldd	r18, Y+5	; 0x05
    18da:	3e 81       	ldd	r19, Y+6	; 0x06
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	9a 81       	ldd	r25, Y+2	; 0x02
    18e0:	f9 01       	movw	r30, r18
    18e2:	e8 0f       	add	r30, r24
    18e4:	f9 1f       	adc	r31, r25
    18e6:	80 81       	ld	r24, Z
    18e8:	8c 93       	st	X, r24

			/* Write logical one to EEMWE */
			EECR |= (1 << EEMWE);
    18ea:	ac e3       	ldi	r26, 0x3C	; 60
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	ec e3       	ldi	r30, 0x3C	; 60
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	84 60       	ori	r24, 0x04	; 4
    18f6:	8c 93       	st	X, r24
			/* Start EEPROM write by setting EEWE */
			EECR |= (1 << EEWE);
    18f8:	ac e3       	ldi	r26, 0x3C	; 60
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	ec e3       	ldi	r30, 0x3C	; 60
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	82 60       	ori	r24, 0x02	; 2
    1904:	8c 93       	st	X, r24
		}
		else
		{

		}
		counter++;//increase bytes counter
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	9a 81       	ldd	r25, Y+2	; 0x02
    190a:	01 96       	adiw	r24, 0x01	; 1
    190c:	9a 83       	std	Y+2, r25	; 0x02
    190e:	89 83       	std	Y+1, r24	; 0x01
}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
{
	uint16 counter = 0;//Bytes write counter
	while (counter < size)
    1910:	29 81       	ldd	r18, Y+1	; 0x01
    1912:	3a 81       	ldd	r19, Y+2	; 0x02
    1914:	8f 81       	ldd	r24, Y+7	; 0x07
    1916:	98 85       	ldd	r25, Y+8	; 0x08
    1918:	28 17       	cp	r18, r24
    191a:	39 07       	cpc	r19, r25
    191c:	08 f4       	brcc	.+2      	; 0x1920 <EEPROM_vWriteBlockToAddress+0xc6>
    191e:	b0 cf       	rjmp	.-160    	; 0x1880 <EEPROM_vWriteBlockToAddress+0x26>
		{

		}
		counter++;//increase bytes counter
	}
}
    1920:	28 96       	adiw	r28, 0x08	; 8
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <LCD_vInit>:
static void send_falling_edge(void); //prototype of the private function

#include "LCD.h" 

void LCD_vInit(void)
{
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	2e 97       	sbiw	r28, 0x0e	; 14
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
	#if defined eight_bits_mode //depend on pre-defined configurations which exist in lcd_config.h
	/* set LCD pins as output pins in case of 8 bit LCD*/
	DIO_vsetPINDir(LCD_PORT,LCD_FIRST_PIN,1);
    1946:	81 e4       	ldi	r24, 0x41	; 65
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	41 e0       	ldi	r20, 0x01	; 1
    194c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_SECOND_PIN,1);
    1950:	81 e4       	ldi	r24, 0x41	; 65
    1952:	61 e0       	ldi	r22, 0x01	; 1
    1954:	41 e0       	ldi	r20, 0x01	; 1
    1956:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_THIRD_PIN,1);
    195a:	81 e4       	ldi	r24, 0x41	; 65
    195c:	62 e0       	ldi	r22, 0x02	; 2
    195e:	41 e0       	ldi	r20, 0x01	; 1
    1960:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_FOURTH_PIN,1);
    1964:	81 e4       	ldi	r24, 0x41	; 65
    1966:	63 e0       	ldi	r22, 0x03	; 3
    1968:	41 e0       	ldi	r20, 0x01	; 1
    196a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_FIFTH_PIN,1);
    196e:	81 e4       	ldi	r24, 0x41	; 65
    1970:	64 e0       	ldi	r22, 0x04	; 4
    1972:	41 e0       	ldi	r20, 0x01	; 1
    1974:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_SIXTH_PIN,1);
    1978:	81 e4       	ldi	r24, 0x41	; 65
    197a:	65 e0       	ldi	r22, 0x05	; 5
    197c:	41 e0       	ldi	r20, 0x01	; 1
    197e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_SEVENTH_PIN,1);
    1982:	81 e4       	ldi	r24, 0x41	; 65
    1984:	66 e0       	ldi	r22, 0x06	; 6
    1986:	41 e0       	ldi	r20, 0x01	; 1
    1988:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_EIGHTH_PIN,1);
    198c:	81 e4       	ldi	r24, 0x41	; 65
    198e:	67 e0       	ldi	r22, 0x07	; 7
    1990:	41 e0       	ldi	r20, 0x01	; 1
    1992:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	/*****************************/
	/* set LCD control pins as output pins in case of 8 bit LCD */
	DIO_vsetPINDir(LCD_CONTROL_PORT,LCD_EN_PIN,1);
    1996:	82 e4       	ldi	r24, 0x42	; 66
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	41 e0       	ldi	r20, 0x01	; 1
    199c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_CONTROL_PORT,LCD_RW_PIN,1);
    19a0:	82 e4       	ldi	r24, 0x42	; 66
    19a2:	62 e0       	ldi	r22, 0x02	; 2
    19a4:	41 e0       	ldi	r20, 0x01	; 1
    19a6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_CONTROL_PORT,LCD_RS_PIN,1);
    19aa:	82 e4       	ldi	r24, 0x42	; 66
    19ac:	61 e0       	ldi	r22, 0x01	; 1
    19ae:	41 e0       	ldi	r20, 0x01	; 1
    19b0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	/*****************************/
	DIO_write(LCD_CONTROL_PORT,LCD_RW_PIN,0); // enable write to LCD 
    19b4:	82 e4       	ldi	r24, 0x42	; 66
    19b6:	62 e0       	ldi	r22, 0x02	; 2
    19b8:	40 e0       	ldi	r20, 0x00	; 0
    19ba:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
	LCD_vSend_cmd(EIGHT_BIT_MODE); //enable 8 bit LCD Mode 
    19be:	88 e3       	ldi	r24, 0x38	; 56
    19c0:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_vSend_cmd>
	LCD_vSend_cmd(CLR_SCREEN); // CLR LCD screen 
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_vSend_cmd>
	LCD_vSend_cmd(DISPLAY_ON_CURSOR_ON); // enable cursor and display on 
    19ca:	8e e0       	ldi	r24, 0x0E	; 14
    19cc:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_vSend_cmd>
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	a0 e2       	ldi	r26, 0x20	; 32
    19d6:	b1 e4       	ldi	r27, 0x41	; 65
    19d8:	8b 87       	std	Y+11, r24	; 0x0b
    19da:	9c 87       	std	Y+12, r25	; 0x0c
    19dc:	ad 87       	std	Y+13, r26	; 0x0d
    19de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	4a ef       	ldi	r20, 0xFA	; 250
    19ee:	54 e4       	ldi	r21, 0x44	; 68
    19f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	8f 83       	std	Y+7, r24	; 0x07
    19fa:	98 87       	std	Y+8, r25	; 0x08
    19fc:	a9 87       	std	Y+9, r26	; 0x09
    19fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a00:	6f 81       	ldd	r22, Y+7	; 0x07
    1a02:	78 85       	ldd	r23, Y+8	; 0x08
    1a04:	89 85       	ldd	r24, Y+9	; 0x09
    1a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e8       	ldi	r20, 0x80	; 128
    1a0e:	5f e3       	ldi	r21, 0x3F	; 63
    1a10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a14:	88 23       	and	r24, r24
    1a16:	2c f4       	brge	.+10     	; 0x1a22 <LCD_vInit+0xf0>
		__ticks = 1;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	9e 83       	std	Y+6, r25	; 0x06
    1a1e:	8d 83       	std	Y+5, r24	; 0x05
    1a20:	3f c0       	rjmp	.+126    	; 0x1aa0 <LCD_vInit+0x16e>
	else if (__tmp > 65535)
    1a22:	6f 81       	ldd	r22, Y+7	; 0x07
    1a24:	78 85       	ldd	r23, Y+8	; 0x08
    1a26:	89 85       	ldd	r24, Y+9	; 0x09
    1a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	3f ef       	ldi	r19, 0xFF	; 255
    1a2e:	4f e7       	ldi	r20, 0x7F	; 127
    1a30:	57 e4       	ldi	r21, 0x47	; 71
    1a32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a36:	18 16       	cp	r1, r24
    1a38:	4c f5       	brge	.+82     	; 0x1a8c <LCD_vInit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e2       	ldi	r20, 0x20	; 32
    1a48:	51 e4       	ldi	r21, 0x41	; 65
    1a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	bc 01       	movw	r22, r24
    1a54:	cd 01       	movw	r24, r26
    1a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	9e 83       	std	Y+6, r25	; 0x06
    1a60:	8d 83       	std	Y+5, r24	; 0x05
    1a62:	0f c0       	rjmp	.+30     	; 0x1a82 <LCD_vInit+0x150>
    1a64:	88 ec       	ldi	r24, 0xC8	; 200
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	9c 83       	std	Y+4, r25	; 0x04
    1a6a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <LCD_vInit+0x13e>
    1a74:	9c 83       	std	Y+4, r25	; 0x04
    1a76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a78:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	9e 83       	std	Y+6, r25	; 0x06
    1a80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a82:	8d 81       	ldd	r24, Y+5	; 0x05
    1a84:	9e 81       	ldd	r25, Y+6	; 0x06
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	69 f7       	brne	.-38     	; 0x1a64 <LCD_vInit+0x132>
    1a8a:	14 c0       	rjmp	.+40     	; 0x1ab4 <LCD_vInit+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8e:	78 85       	ldd	r23, Y+8	; 0x08
    1a90:	89 85       	ldd	r24, Y+9	; 0x09
    1a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9e 83       	std	Y+6, r25	; 0x06
    1a9e:	8d 83       	std	Y+5, r24	; 0x05
    1aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa4:	9a 83       	std	Y+2, r25	; 0x02
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <LCD_vInit+0x17a>
    1ab0:	9a 83       	std	Y+2, r25	; 0x02
    1ab2:	89 83       	std	Y+1, r24	; 0x01
	LCD_vSend_cmd(FOUR_BIT_MODE_II); //enable 4 bit LCD Mode 
	LCD_vSend_cmd(CLR_SCREEN); // CLR LCD screen 
	LCD_vSend_cmd(DISPLAY_ON_CURSOR_ON); // enable cursor and display on 
	_delay_ms(10); //small delay to ensure LCD finish the initialization
	#endif
} // end of LCD initialization
    1ab4:	2e 96       	adiw	r28, 0x0e	; 14
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <send_falling_edge>:


static void send_falling_edge(void)
{
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	6c 97       	sbiw	r28, 0x1c	; 28
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
	/* to enable printing the sent character to LCD ,we should send send falling edge to the lcd*/ 
	DIO_write(LCD_CONTROL_PORT,LCD_EN_PIN,1); // set enable pin to one
    1ada:	82 e4       	ldi	r24, 0x42	; 66
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	41 e0       	ldi	r20, 0x01	; 1
    1ae0:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a0 e0       	ldi	r26, 0x00	; 0
    1aea:	b0 e4       	ldi	r27, 0x40	; 64
    1aec:	89 8f       	std	Y+25, r24	; 0x19
    1aee:	9a 8f       	std	Y+26, r25	; 0x1a
    1af0:	ab 8f       	std	Y+27, r26	; 0x1b
    1af2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af4:	69 8d       	ldd	r22, Y+25	; 0x19
    1af6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1afa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	4a ef       	ldi	r20, 0xFA	; 250
    1b02:	54 e4       	ldi	r21, 0x44	; 68
    1b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	8d 8b       	std	Y+21, r24	; 0x15
    1b0e:	9e 8b       	std	Y+22, r25	; 0x16
    1b10:	af 8b       	std	Y+23, r26	; 0x17
    1b12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b14:	6d 89       	ldd	r22, Y+21	; 0x15
    1b16:	7e 89       	ldd	r23, Y+22	; 0x16
    1b18:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e8       	ldi	r20, 0x80	; 128
    1b22:	5f e3       	ldi	r21, 0x3F	; 63
    1b24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b28:	88 23       	and	r24, r24
    1b2a:	2c f4       	brge	.+10     	; 0x1b36 <send_falling_edge+0x70>
		__ticks = 1;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	9c 8b       	std	Y+20, r25	; 0x14
    1b32:	8b 8b       	std	Y+19, r24	; 0x13
    1b34:	3f c0       	rjmp	.+126    	; 0x1bb4 <send_falling_edge+0xee>
	else if (__tmp > 65535)
    1b36:	6d 89       	ldd	r22, Y+21	; 0x15
    1b38:	7e 89       	ldd	r23, Y+22	; 0x16
    1b3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	3f ef       	ldi	r19, 0xFF	; 255
    1b42:	4f e7       	ldi	r20, 0x7F	; 127
    1b44:	57 e4       	ldi	r21, 0x47	; 71
    1b46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b4a:	18 16       	cp	r1, r24
    1b4c:	4c f5       	brge	.+82     	; 0x1ba0 <send_falling_edge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e2       	ldi	r20, 0x20	; 32
    1b5c:	51 e4       	ldi	r21, 0x41	; 65
    1b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	bc 01       	movw	r22, r24
    1b68:	cd 01       	movw	r24, r26
    1b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	9c 8b       	std	Y+20, r25	; 0x14
    1b74:	8b 8b       	std	Y+19, r24	; 0x13
    1b76:	0f c0       	rjmp	.+30     	; 0x1b96 <send_falling_edge+0xd0>
    1b78:	88 ec       	ldi	r24, 0xC8	; 200
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	9a 8b       	std	Y+18, r25	; 0x12
    1b7e:	89 8b       	std	Y+17, r24	; 0x11
    1b80:	89 89       	ldd	r24, Y+17	; 0x11
    1b82:	9a 89       	ldd	r25, Y+18	; 0x12
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <send_falling_edge+0xbe>
    1b88:	9a 8b       	std	Y+18, r25	; 0x12
    1b8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	9c 8b       	std	Y+20, r25	; 0x14
    1b94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b96:	8b 89       	ldd	r24, Y+19	; 0x13
    1b98:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	69 f7       	brne	.-38     	; 0x1b78 <send_falling_edge+0xb2>
    1b9e:	14 c0       	rjmp	.+40     	; 0x1bc8 <send_falling_edge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	9c 8b       	std	Y+20, r25	; 0x14
    1bb2:	8b 8b       	std	Y+19, r24	; 0x13
    1bb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb8:	98 8b       	std	Y+16, r25	; 0x10
    1bba:	8f 87       	std	Y+15, r24	; 0x0f
    1bbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bbe:	98 89       	ldd	r25, Y+16	; 0x10
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <send_falling_edge+0xfa>
    1bc4:	98 8b       	std	Y+16, r25	; 0x10
    1bc6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2); //period of high
	DIO_write(LCD_CONTROL_PORT,LCD_EN_PIN,0); // clear enable pin 
    1bc8:	82 e4       	ldi	r24, 0x42	; 66
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	40 e0       	ldi	r20, 0x00	; 0
    1bce:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	a0 e0       	ldi	r26, 0x00	; 0
    1bd8:	b0 e4       	ldi	r27, 0x40	; 64
    1bda:	8b 87       	std	Y+11, r24	; 0x0b
    1bdc:	9c 87       	std	Y+12, r25	; 0x0c
    1bde:	ad 87       	std	Y+13, r26	; 0x0d
    1be0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1be8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	4a ef       	ldi	r20, 0xFA	; 250
    1bf0:	54 e4       	ldi	r21, 0x44	; 68
    1bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	8f 83       	std	Y+7, r24	; 0x07
    1bfc:	98 87       	std	Y+8, r25	; 0x08
    1bfe:	a9 87       	std	Y+9, r26	; 0x09
    1c00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c02:	6f 81       	ldd	r22, Y+7	; 0x07
    1c04:	78 85       	ldd	r23, Y+8	; 0x08
    1c06:	89 85       	ldd	r24, Y+9	; 0x09
    1c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e8       	ldi	r20, 0x80	; 128
    1c10:	5f e3       	ldi	r21, 0x3F	; 63
    1c12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c16:	88 23       	and	r24, r24
    1c18:	2c f4       	brge	.+10     	; 0x1c24 <send_falling_edge+0x15e>
		__ticks = 1;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	9e 83       	std	Y+6, r25	; 0x06
    1c20:	8d 83       	std	Y+5, r24	; 0x05
    1c22:	3f c0       	rjmp	.+126    	; 0x1ca2 <send_falling_edge+0x1dc>
	else if (__tmp > 65535)
    1c24:	6f 81       	ldd	r22, Y+7	; 0x07
    1c26:	78 85       	ldd	r23, Y+8	; 0x08
    1c28:	89 85       	ldd	r24, Y+9	; 0x09
    1c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	3f ef       	ldi	r19, 0xFF	; 255
    1c30:	4f e7       	ldi	r20, 0x7F	; 127
    1c32:	57 e4       	ldi	r21, 0x47	; 71
    1c34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c38:	18 16       	cp	r1, r24
    1c3a:	4c f5       	brge	.+82     	; 0x1c8e <send_falling_edge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e2       	ldi	r20, 0x20	; 32
    1c4a:	51 e4       	ldi	r21, 0x41	; 65
    1c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	bc 01       	movw	r22, r24
    1c56:	cd 01       	movw	r24, r26
    1c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	9e 83       	std	Y+6, r25	; 0x06
    1c62:	8d 83       	std	Y+5, r24	; 0x05
    1c64:	0f c0       	rjmp	.+30     	; 0x1c84 <send_falling_edge+0x1be>
    1c66:	88 ec       	ldi	r24, 0xC8	; 200
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	9c 83       	std	Y+4, r25	; 0x04
    1c6c:	8b 83       	std	Y+3, r24	; 0x03
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <send_falling_edge+0x1ac>
    1c76:	9c 83       	std	Y+4, r25	; 0x04
    1c78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	9e 83       	std	Y+6, r25	; 0x06
    1c82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c84:	8d 81       	ldd	r24, Y+5	; 0x05
    1c86:	9e 81       	ldd	r25, Y+6	; 0x06
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	69 f7       	brne	.-38     	; 0x1c66 <send_falling_edge+0x1a0>
    1c8c:	14 c0       	rjmp	.+40     	; 0x1cb6 <send_falling_edge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c90:	78 85       	ldd	r23, Y+8	; 0x08
    1c92:	89 85       	ldd	r24, Y+9	; 0x09
    1c94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
    1ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca6:	9a 83       	std	Y+2, r25	; 0x02
    1ca8:	89 83       	std	Y+1, r24	; 0x01
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	9a 81       	ldd	r25, Y+2	; 0x02
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <send_falling_edge+0x1e8>
    1cb2:	9a 83       	std	Y+2, r25	; 0x02
    1cb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); // period of low
}
    1cb6:	6c 96       	adiw	r28, 0x1c	; 28
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	f8 94       	cli
    1cbc:	de bf       	out	0x3e, r29	; 62
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	cd bf       	out	0x3d, r28	; 61
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <LCD_vSend_cmd>:
void LCD_vSend_cmd(uint8 cmd)
{
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	0f 92       	push	r0
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	89 83       	std	Y+1, r24	; 0x01
	#if defined eight_bits_mode //depend on pre-defined configurations which exist in lcd_config.h
	DIO_write_port(LCD_PORT,cmd); //send the command to LCD
    1cd4:	81 e4       	ldi	r24, 0x41	; 65
    1cd6:	69 81       	ldd	r22, Y+1	; 0x01
    1cd8:	0e 94 41 09 	call	0x1282	; 0x1282 <DIO_write_port>
	DIO_write(LCD_CONTROL_PORT,LCD_RS_PIN,0); //enable LCD to receive command 
    1cdc:	82 e4       	ldi	r24, 0x42	; 66
    1cde:	61 e0       	ldi	r22, 0x01	; 1
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
	send_falling_edge(); //send falling edge
    1ce6:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <send_falling_edge>
	DIO_write(LCD_CONTROL_PORT,LCD_RS_PIN,0); //enable LCD to receive command
	send_falling_edge(); //send falling edge
	/***************************************/
	#endif
	
}
    1cea:	0f 90       	pop	r0
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <LCD_vSend_char>:
void LCD_vSend_char(uint8 data)
{
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	0f 92       	push	r0
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
    1cfc:	89 83       	std	Y+1, r24	; 0x01
	#if defined eight_bits_mode //depend on pre-defined configurations which exist in lcd_config.h
	DIO_write_port(LCD_PORT,data); //send the data to LCD
    1cfe:	81 e4       	ldi	r24, 0x41	; 65
    1d00:	69 81       	ldd	r22, Y+1	; 0x01
    1d02:	0e 94 41 09 	call	0x1282	; 0x1282 <DIO_write_port>
	DIO_write(LCD_CONTROL_PORT,LCD_RS_PIN,1); //enable LCD to receive data
    1d06:	82 e4       	ldi	r24, 0x42	; 66
    1d08:	61 e0       	ldi	r22, 0x01	; 1
    1d0a:	41 e0       	ldi	r20, 0x01	; 1
    1d0c:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
	send_falling_edge(); //send falling edge
    1d10:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <send_falling_edge>
	dio_write_highnibble(LCD_PORT,data<<4);
	DIO_write(LCD_CONTROL_PORT,LCD_RS_PIN,1); //enable LCD to receive data
	send_falling_edge(); //send falling edge
	/******************************************/
	#endif
}
    1d14:	0f 90       	pop	r0
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <LCD_vSend_string>:

void LCD_vSend_string(char *data)
{
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <LCD_vSend_string+0x6>
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	9a 83       	std	Y+2, r25	; 0x02
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	0a c0       	rjmp	.+20     	; 0x1d40 <LCD_vSend_string+0x24>
	while((*data)!=0) //keep in the loop until the end of the string 
	{
		LCD_vSend_char(*data); // print the characters of the string 
    1d2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d30:	80 81       	ld	r24, Z
    1d32:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
		data++; // make the pointer points to the next character
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3a:	01 96       	adiw	r24, 0x01	; 1
    1d3c:	9a 83       	std	Y+2, r25	; 0x02
    1d3e:	89 83       	std	Y+1, r24	; 0x01
	#endif
}

void LCD_vSend_string(char *data)
{
	while((*data)!=0) //keep in the loop until the end of the string 
    1d40:	e9 81       	ldd	r30, Y+1	; 0x01
    1d42:	fa 81       	ldd	r31, Y+2	; 0x02
    1d44:	80 81       	ld	r24, Z
    1d46:	88 23       	and	r24, r24
    1d48:	89 f7       	brne	.-30     	; 0x1d2c <LCD_vSend_string+0x10>
	{
		LCD_vSend_char(*data); // print the characters of the string 
		data++; // make the pointer points to the next character
	}
}
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <LCD_clearscreen>:

void LCD_clearscreen(void)
{
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
	LCD_vSend_cmd(CLR_SCREEN); // clear the screen
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_vSend_cmd>
}
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	08 95       	ret

00001d68 <LCD_movecursor>:
void LCD_movecursor(uint8 row,uint8 coloumn)
{
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <LCD_movecursor+0x6>
    1d6e:	0f 92       	push	r0
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	8a 83       	std	Y+2, r24	; 0x02
    1d76:	6b 83       	std	Y+3, r22	; 0x03
	uint8 data ; // the command which will set the position of the cursor
	/* in case of wrong input set the cursor to the first position of the LCD*/
	if(row>2||row<1||coloumn>16||coloumn<1)
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	83 30       	cpi	r24, 0x03	; 3
    1d7c:	48 f4       	brcc	.+18     	; 0x1d90 <LCD_movecursor+0x28>
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	88 23       	and	r24, r24
    1d82:	31 f0       	breq	.+12     	; 0x1d90 <LCD_movecursor+0x28>
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	81 31       	cpi	r24, 0x11	; 17
    1d88:	18 f4       	brcc	.+6      	; 0x1d90 <LCD_movecursor+0x28>
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	88 23       	and	r24, r24
    1d8e:	11 f4       	brne	.+4      	; 0x1d94 <LCD_movecursor+0x2c>
	{
		data=0x80;
    1d90:	80 e8       	ldi	r24, 0x80	; 128
    1d92:	89 83       	std	Y+1, r24	; 0x01
	}
	/********************************************/
	/*set the postion of cursor depend on the selected row and coloumn*/
	if(row==1)
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	81 30       	cpi	r24, 0x01	; 1
    1d98:	21 f4       	brne	.+8      	; 0x1da2 <LCD_movecursor+0x3a>
	{
		data=0x80+coloumn-1 ;
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	81 58       	subi	r24, 0x81	; 129
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    1da0:	06 c0       	rjmp	.+12     	; 0x1dae <LCD_movecursor+0x46>
	}
	else if (row==2)
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	82 30       	cpi	r24, 0x02	; 2
    1da6:	19 f4       	brne	.+6      	; 0x1dae <LCD_movecursor+0x46>
	{
		data=0xc0+coloumn-1;
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	81 54       	subi	r24, 0x41	; 65
    1dac:	89 83       	std	Y+1, r24	; 0x01
	}
	/**************************************/
	
	LCD_vSend_cmd(data); //set the position  of the cursor
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_vSend_cmd>
}
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <LED_vInit>:

#include "LED.h"
void LED_vInit(uint8 portname,uint8 pinnumber)
{
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <LED_vInit+0x6>
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	89 83       	std	Y+1, r24	; 0x01
    1dcc:	6a 83       	std	Y+2, r22	; 0x02
	DIO_vsetPINDir(portname,pinnumber,1);//Set the given pin in the given port as an output
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	6a 81       	ldd	r22, Y+2	; 0x02
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
}
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <LED_vTurnOn>:
void LED_vTurnOn(uint8 portname,uint8 pinnumber)
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <LED_vTurnOn+0x6>
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(portname,pinnumber,1);//Set the given pin in the given port to one(on)
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	6a 81       	ldd	r22, Y+2	; 0x02
    1df4:	41 e0       	ldi	r20, 0x01	; 1
    1df6:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
}
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <LED_vTurnOff>:
void LED_vTurnOff(uint8 portname,uint8 pinnumber)
{
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <LED_vTurnOff+0x6>
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	89 83       	std	Y+1, r24	; 0x01
    1e10:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	6a 81       	ldd	r22, Y+2	; 0x02
    1e16:	40 e0       	ldi	r20, 0x00	; 0
    1e18:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
}
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <LED_vToggle>:
void LED_vToggle(uint8 portname,uint8 pinnumber)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <LED_vToggle+0x6>
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	89 83       	std	Y+1, r24	; 0x01
    1e32:	6a 83       	std	Y+2, r22	; 0x02
	DIO_toggle(portname,pinnumber);//Set the given pin in the given port to zero if it is one or set it to one if it is zero
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	6a 81       	ldd	r22, Y+2	; 0x02
    1e38:	0e 94 c3 08 	call	0x1186	; 0x1186 <DIO_toggle>
}
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <LED_u8ReadStatus>:
uint8 LED_u8ReadStatus(uint8 portname,uint8 pinnumber)
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <LED_u8ReadStatus+0x6>
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	89 83       	std	Y+1, r24	; 0x01
    1e52:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_u8read(portname,pinnumber);//return the current status of the given pin
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	6a 81       	ldd	r22, Y+2	; 0x02
    1e58:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_u8read>
}
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <SPI_vInitMaster>:
#include "SPI.h"
#include "STD_MESSAGES.h"
#include "std_macros.h"

void SPI_vInitMaster (void)
{
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
	DDRB |=(1<<SPI_MOSI) |(1<<SPI_SS)|(1<<SPI_SCK);//Set the port B mosi(master out slave in ) ,port B ss(slave select),sck(spi clock)  pins as output
    1e6e:	a7 e3       	ldi	r26, 0x37	; 55
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e7 e3       	ldi	r30, 0x37	; 55
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	80 6b       	ori	r24, 0xB0	; 176
    1e7a:	8c 93       	st	X, r24
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//Enable the SPI,master mode ,Set the clock speed to F/16
    1e7c:	ad e2       	ldi	r26, 0x2D	; 45
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	ed e2       	ldi	r30, 0x2D	; 45
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	81 65       	ori	r24, 0x51	; 81
    1e88:	8c 93       	st	X, r24
}
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <SPI_vInitSlave>:

void SPI_vInitSlave (void)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
    1e98:	a7 e3       	ldi	r26, 0x37	; 55
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e7 e3       	ldi	r30, 0x37	; 55
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	80 64       	ori	r24, 0x40	; 64
    1ea4:	8c 93       	st	X, r24
	SPCR |= (1<<SPE);//Enable the SPI
    1ea6:	ad e2       	ldi	r26, 0x2D	; 45
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	ed e2       	ldi	r30, 0x2D	; 45
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	80 64       	ori	r24, 0x40	; 64
    1eb2:	8c 93       	st	X, r24
}
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <SPI_ui8TransmitRecive>:

uint8 SPI_ui8TransmitRecive (uint8 data)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	0f 92       	push	r0
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;//move the given data to SPI Data register
    1ec6:	ef e2       	ldi	r30, 0x2F	; 47
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	80 83       	st	Z, r24
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
    1ece:	ee e2       	ldi	r30, 0x2E	; 46
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	88 1f       	adc	r24, r24
    1ed6:	88 27       	eor	r24, r24
    1ed8:	88 1f       	adc	r24, r24
    1eda:	88 2f       	mov	r24, r24
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	90 70       	andi	r25, 0x00	; 0
    1ee0:	00 97       	sbiw	r24, 0x00	; 0
    1ee2:	a9 f3       	breq	.-22     	; 0x1ece <SPI_ui8TransmitRecive+0x14>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
    1ee4:	ef e2       	ldi	r30, 0x2F	; 47
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	0f 90       	pop	r0
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <keypad_vInit>:

#include "keypad_driver.h"
void keypad_vInit(void)
{
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
	/* Initialize first four bits in keypad as output pins */
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_FIRST_PIN,1);
    1efa:	83 e4       	ldi	r24, 0x43	; 67
    1efc:	60 e0       	ldi	r22, 0x00	; 0
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_SECOND_PIN,1);
    1f04:	83 e4       	ldi	r24, 0x43	; 67
    1f06:	61 e0       	ldi	r22, 0x01	; 1
    1f08:	41 e0       	ldi	r20, 0x01	; 1
    1f0a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_THIRD_PIN,1);
    1f0e:	83 e4       	ldi	r24, 0x43	; 67
    1f10:	62 e0       	ldi	r22, 0x02	; 2
    1f12:	41 e0       	ldi	r20, 0x01	; 1
    1f14:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_FOURTH_PIN,1);
    1f18:	83 e4       	ldi	r24, 0x43	; 67
    1f1a:	63 e0       	ldi	r22, 0x03	; 3
    1f1c:	41 e0       	ldi	r20, 0x01	; 1
    1f1e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	/******************************************************/
	/* initalize second four bits in keypad as input pins */
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_FIFTH_PIN,0);
    1f22:	83 e4       	ldi	r24, 0x43	; 67
    1f24:	64 e0       	ldi	r22, 0x04	; 4
    1f26:	40 e0       	ldi	r20, 0x00	; 0
    1f28:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_SIXTH_PIN,0);
    1f2c:	83 e4       	ldi	r24, 0x43	; 67
    1f2e:	65 e0       	ldi	r22, 0x05	; 5
    1f30:	40 e0       	ldi	r20, 0x00	; 0
    1f32:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_SEVENTH_PIN,0);
    1f36:	83 e4       	ldi	r24, 0x43	; 67
    1f38:	66 e0       	ldi	r22, 0x06	; 6
    1f3a:	40 e0       	ldi	r20, 0x00	; 0
    1f3c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_EIGHTH_PIN,0);
    1f40:	83 e4       	ldi	r24, 0x43	; 67
    1f42:	67 e0       	ldi	r22, 0x07	; 7
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	/*****************************************************/
	/*connect pull up resistance to the input pins*/
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_FIFTH_PIN,1);
    1f4a:	83 e4       	ldi	r24, 0x43	; 67
    1f4c:	64 e0       	ldi	r22, 0x04	; 4
    1f4e:	41 e0       	ldi	r20, 0x01	; 1
    1f50:	0e 94 29 0a 	call	0x1452	; 0x1452 <DIO_vconnectpullup>
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_SIXTH_PIN,1);
    1f54:	83 e4       	ldi	r24, 0x43	; 67
    1f56:	65 e0       	ldi	r22, 0x05	; 5
    1f58:	41 e0       	ldi	r20, 0x01	; 1
    1f5a:	0e 94 29 0a 	call	0x1452	; 0x1452 <DIO_vconnectpullup>
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_SEVENTH_PIN,1);
    1f5e:	83 e4       	ldi	r24, 0x43	; 67
    1f60:	66 e0       	ldi	r22, 0x06	; 6
    1f62:	41 e0       	ldi	r20, 0x01	; 1
    1f64:	0e 94 29 0a 	call	0x1452	; 0x1452 <DIO_vconnectpullup>
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_EIGHTH_PIN,1);
    1f68:	83 e4       	ldi	r24, 0x43	; 67
    1f6a:	67 e0       	ldi	r22, 0x07	; 7
    1f6c:	41 e0       	ldi	r20, 0x01	; 1
    1f6e:	0e 94 29 0a 	call	0x1452	; 0x1452 <DIO_vconnectpullup>
	/****************************************************/
}
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <keypad_u8check_press>:
uint8 keypad_u8check_press(void)
{
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	a7 97       	sbiw	r28, 0x27	; 39
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
	uint8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}}; //keypad buttons
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	43 96       	adiw	r24, 0x13	; 19
    1f90:	9c a3       	std	Y+36, r25	; 0x24
    1f92:	8b a3       	std	Y+35, r24	; 0x23
    1f94:	e8 ea       	ldi	r30, 0xA8	; 168
    1f96:	f2 e0       	ldi	r31, 0x02	; 2
    1f98:	fe a3       	std	Y+38, r31	; 0x26
    1f9a:	ed a3       	std	Y+37, r30	; 0x25
    1f9c:	f0 e1       	ldi	r31, 0x10	; 16
    1f9e:	ff a3       	std	Y+39, r31	; 0x27
    1fa0:	ed a1       	ldd	r30, Y+37	; 0x25
    1fa2:	fe a1       	ldd	r31, Y+38	; 0x26
    1fa4:	00 80       	ld	r0, Z
    1fa6:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa8:	9e a1       	ldd	r25, Y+38	; 0x26
    1faa:	01 96       	adiw	r24, 0x01	; 1
    1fac:	9e a3       	std	Y+38, r25	; 0x26
    1fae:	8d a3       	std	Y+37, r24	; 0x25
    1fb0:	eb a1       	ldd	r30, Y+35	; 0x23
    1fb2:	fc a1       	ldd	r31, Y+36	; 0x24
    1fb4:	00 82       	st	Z, r0
    1fb6:	8b a1       	ldd	r24, Y+35	; 0x23
    1fb8:	9c a1       	ldd	r25, Y+36	; 0x24
    1fba:	01 96       	adiw	r24, 0x01	; 1
    1fbc:	9c a3       	std	Y+36, r25	; 0x24
    1fbe:	8b a3       	std	Y+35, r24	; 0x23
    1fc0:	9f a1       	ldd	r25, Y+39	; 0x27
    1fc2:	91 50       	subi	r25, 0x01	; 1
    1fc4:	9f a3       	std	Y+39, r25	; 0x27
    1fc6:	ef a1       	ldd	r30, Y+39	; 0x27
    1fc8:	ee 23       	and	r30, r30
    1fca:	51 f7       	brne	.-44     	; 0x1fa0 <keypad_u8check_press+0x28>
	uint8 row; //which indicate the given output  pin
	uint8 coloumn; //which indicate the given input pin
	uint8 key_pressed_indicator; //the variable  which contain the key pressed
	
	uint8 returnval=NOT_PRESSED; //the variable contain the value which will be returned which will be key pressed or not pressed in case of no key pressed
    1fcc:	8f ef       	ldi	r24, 0xFF	; 255
    1fce:	8f 87       	std	Y+15, r24	; 0x0f
	for(row=0;row<4;row++)
    1fd0:	1a 8a       	std	Y+18, r1	; 0x12
    1fd2:	b6 c0       	rjmp	.+364    	; 0x2140 <keypad_u8check_press+0x1c8>
	{
		/*stop the work of keypad firstly*/
		DIO_write(KEYPAD_PORT,KEYPAD_FIRST_PIN,1);
    1fd4:	83 e4       	ldi	r24, 0x43	; 67
    1fd6:	60 e0       	ldi	r22, 0x00	; 0
    1fd8:	41 e0       	ldi	r20, 0x01	; 1
    1fda:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
		DIO_write(KEYPAD_PORT,KEYPAD_SECOND_PIN,1);
    1fde:	83 e4       	ldi	r24, 0x43	; 67
    1fe0:	61 e0       	ldi	r22, 0x01	; 1
    1fe2:	41 e0       	ldi	r20, 0x01	; 1
    1fe4:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
		DIO_write(KEYPAD_PORT,KEYPAD_THIRD_PIN,1);
    1fe8:	83 e4       	ldi	r24, 0x43	; 67
    1fea:	62 e0       	ldi	r22, 0x02	; 2
    1fec:	41 e0       	ldi	r20, 0x01	; 1
    1fee:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
		DIO_write(KEYPAD_PORT,KEYPAD_FOURTH_PIN,1);
    1ff2:	83 e4       	ldi	r24, 0x43	; 67
    1ff4:	63 e0       	ldi	r22, 0x03	; 3
    1ff6:	41 e0       	ldi	r20, 0x01	; 1
    1ff8:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	a0 ea       	ldi	r26, 0xA0	; 160
    2002:	b1 e4       	ldi	r27, 0x41	; 65
    2004:	8b 87       	std	Y+11, r24	; 0x0b
    2006:	9c 87       	std	Y+12, r25	; 0x0c
    2008:	ad 87       	std	Y+13, r26	; 0x0d
    200a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200c:	6b 85       	ldd	r22, Y+11	; 0x0b
    200e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2010:	8d 85       	ldd	r24, Y+13	; 0x0d
    2012:	9e 85       	ldd	r25, Y+14	; 0x0e
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	4a ef       	ldi	r20, 0xFA	; 250
    201a:	54 e4       	ldi	r21, 0x44	; 68
    201c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	8f 83       	std	Y+7, r24	; 0x07
    2026:	98 87       	std	Y+8, r25	; 0x08
    2028:	a9 87       	std	Y+9, r26	; 0x09
    202a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    202c:	6f 81       	ldd	r22, Y+7	; 0x07
    202e:	78 85       	ldd	r23, Y+8	; 0x08
    2030:	89 85       	ldd	r24, Y+9	; 0x09
    2032:	9a 85       	ldd	r25, Y+10	; 0x0a
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e8       	ldi	r20, 0x80	; 128
    203a:	5f e3       	ldi	r21, 0x3F	; 63
    203c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2040:	88 23       	and	r24, r24
    2042:	2c f4       	brge	.+10     	; 0x204e <keypad_u8check_press+0xd6>
		__ticks = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9e 83       	std	Y+6, r25	; 0x06
    204a:	8d 83       	std	Y+5, r24	; 0x05
    204c:	3f c0       	rjmp	.+126    	; 0x20cc <keypad_u8check_press+0x154>
	else if (__tmp > 65535)
    204e:	6f 81       	ldd	r22, Y+7	; 0x07
    2050:	78 85       	ldd	r23, Y+8	; 0x08
    2052:	89 85       	ldd	r24, Y+9	; 0x09
    2054:	9a 85       	ldd	r25, Y+10	; 0x0a
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	3f ef       	ldi	r19, 0xFF	; 255
    205a:	4f e7       	ldi	r20, 0x7F	; 127
    205c:	57 e4       	ldi	r21, 0x47	; 71
    205e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2062:	18 16       	cp	r1, r24
    2064:	4c f5       	brge	.+82     	; 0x20b8 <keypad_u8check_press+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2066:	6b 85       	ldd	r22, Y+11	; 0x0b
    2068:	7c 85       	ldd	r23, Y+12	; 0x0c
    206a:	8d 85       	ldd	r24, Y+13	; 0x0d
    206c:	9e 85       	ldd	r25, Y+14	; 0x0e
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e2       	ldi	r20, 0x20	; 32
    2074:	51 e4       	ldi	r21, 0x41	; 65
    2076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	9e 83       	std	Y+6, r25	; 0x06
    208c:	8d 83       	std	Y+5, r24	; 0x05
    208e:	0f c0       	rjmp	.+30     	; 0x20ae <keypad_u8check_press+0x136>
    2090:	88 ec       	ldi	r24, 0xC8	; 200
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	9c 83       	std	Y+4, r25	; 0x04
    2096:	8b 83       	std	Y+3, r24	; 0x03
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	9c 81       	ldd	r25, Y+4	; 0x04
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <keypad_u8check_press+0x124>
    20a0:	9c 83       	std	Y+4, r25	; 0x04
    20a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a4:	8d 81       	ldd	r24, Y+5	; 0x05
    20a6:	9e 81       	ldd	r25, Y+6	; 0x06
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	9e 83       	std	Y+6, r25	; 0x06
    20ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ae:	8d 81       	ldd	r24, Y+5	; 0x05
    20b0:	9e 81       	ldd	r25, Y+6	; 0x06
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	69 f7       	brne	.-38     	; 0x2090 <keypad_u8check_press+0x118>
    20b6:	14 c0       	rjmp	.+40     	; 0x20e0 <keypad_u8check_press+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ba:	78 85       	ldd	r23, Y+8	; 0x08
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	9e 83       	std	Y+6, r25	; 0x06
    20ca:	8d 83       	std	Y+5, r24	; 0x05
    20cc:	8d 81       	ldd	r24, Y+5	; 0x05
    20ce:	9e 81       	ldd	r25, Y+6	; 0x06
    20d0:	9a 83       	std	Y+2, r25	; 0x02
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	9a 81       	ldd	r25, Y+2	; 0x02
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <keypad_u8check_press+0x160>
    20dc:	9a 83       	std	Y+2, r25	; 0x02
    20de:	89 83       	std	Y+1, r24	; 0x01
		/*************************************/
		_delay_ms(20); 
		DIO_write(KEYPAD_PORT,row,0);//write 0 to the first pin in keypad (output pin from MC)
    20e0:	83 e4       	ldi	r24, 0x43	; 67
    20e2:	6a 89       	ldd	r22, Y+18	; 0x12
    20e4:	40 e0       	ldi	r20, 0x00	; 0
    20e6:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
		
		for(coloumn=0;coloumn<4;coloumn++)
    20ea:	19 8a       	std	Y+17, r1	; 0x11
    20ec:	23 c0       	rjmp	.+70     	; 0x2134 <keypad_u8check_press+0x1bc>
		{
			key_pressed_indicator=DIO_u8read(KEYPAD_PORT,(coloumn+4)); // read the input pins of MC which connected to keypad
    20ee:	89 89       	ldd	r24, Y+17	; 0x11
    20f0:	98 2f       	mov	r25, r24
    20f2:	9c 5f       	subi	r25, 0xFC	; 252
    20f4:	83 e4       	ldi	r24, 0x43	; 67
    20f6:	69 2f       	mov	r22, r25
    20f8:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_u8read>
    20fc:	88 8b       	std	Y+16, r24	; 0x10
			if(key_pressed_indicator==0)// will be 0 only if any key pressed
    20fe:	88 89       	ldd	r24, Y+16	; 0x10
    2100:	88 23       	and	r24, r24
    2102:	a9 f4       	brne	.+42     	; 0x212e <keypad_u8check_press+0x1b6>
			{
				returnval=arr[row][coloumn]; //put the selected pressed key to the retrurnval
    2104:	8a 89       	ldd	r24, Y+18	; 0x12
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	89 89       	ldd	r24, Y+17	; 0x11
    210c:	48 2f       	mov	r20, r24
    210e:	50 e0       	ldi	r21, 0x00	; 0
    2110:	22 0f       	add	r18, r18
    2112:	33 1f       	adc	r19, r19
    2114:	22 0f       	add	r18, r18
    2116:	33 1f       	adc	r19, r19
    2118:	ce 01       	movw	r24, r28
    211a:	01 96       	adiw	r24, 0x01	; 1
    211c:	82 0f       	add	r24, r18
    211e:	93 1f       	adc	r25, r19
    2120:	84 0f       	add	r24, r20
    2122:	95 1f       	adc	r25, r21
    2124:	fc 01       	movw	r30, r24
    2126:	72 96       	adiw	r30, 0x12	; 18
    2128:	80 81       	ld	r24, Z
    212a:	8f 87       	std	Y+15, r24	; 0x0f
    212c:	06 c0       	rjmp	.+12     	; 0x213a <keypad_u8check_press+0x1c2>
		DIO_write(KEYPAD_PORT,KEYPAD_FOURTH_PIN,1);
		/*************************************/
		_delay_ms(20); 
		DIO_write(KEYPAD_PORT,row,0);//write 0 to the first pin in keypad (output pin from MC)
		
		for(coloumn=0;coloumn<4;coloumn++)
    212e:	89 89       	ldd	r24, Y+17	; 0x11
    2130:	8f 5f       	subi	r24, 0xFF	; 255
    2132:	89 8b       	std	Y+17, r24	; 0x11
    2134:	89 89       	ldd	r24, Y+17	; 0x11
    2136:	84 30       	cpi	r24, 0x04	; 4
    2138:	d0 f2       	brcs	.-76     	; 0x20ee <keypad_u8check_press+0x176>
	uint8 row; //which indicate the given output  pin
	uint8 coloumn; //which indicate the given input pin
	uint8 key_pressed_indicator; //the variable  which contain the key pressed
	
	uint8 returnval=NOT_PRESSED; //the variable contain the value which will be returned which will be key pressed or not pressed in case of no key pressed
	for(row=0;row<4;row++)
    213a:	8a 89       	ldd	r24, Y+18	; 0x12
    213c:	8f 5f       	subi	r24, 0xFF	; 255
    213e:	8a 8b       	std	Y+18, r24	; 0x12
    2140:	8a 89       	ldd	r24, Y+18	; 0x12
    2142:	84 30       	cpi	r24, 0x04	; 4
    2144:	08 f4       	brcc	.+2      	; 0x2148 <keypad_u8check_press+0x1d0>
    2146:	46 cf       	rjmp	.-372    	; 0x1fd4 <keypad_u8check_press+0x5c>
				returnval=arr[row][coloumn]; //put the selected pressed key to the retrurnval
				break; // break from the loop
			}
		}
	}
	return returnval ; //return the pressed key in case of key pressed or return 0xff in case of no key pressed
    2148:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    214a:	a7 96       	adiw	r28, 0x27	; 39
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	08 95       	ret

0000215c <main>:
uint8 holdFlag = FALSE;
uint8 systemFlag = FALSE;


int main(void)
{
    215c:	0f 93       	push	r16
    215e:	1f 93       	push	r17
    2160:	df 93       	push	r29
    2162:	cf 93       	push	r28
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
    2168:	cb 5b       	subi	r28, 0xBB	; 187
    216a:	d2 40       	sbci	r29, 0x02	; 2
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	cd bf       	out	0x3d, r28	; 61
	uint8 temperature = 0;//The average temperature of the room
    2176:	fe 01       	movw	r30, r28
    2178:	e5 55       	subi	r30, 0x55	; 85
    217a:	fd 4f       	sbci	r31, 0xFD	; 253
    217c:	10 82       	st	Z, r1
	uint8 temp_ones = NOT_SELECTED;//The entered right number of the temperature
    217e:	fe 01       	movw	r30, r28
    2180:	e6 55       	subi	r30, 0x56	; 86
    2182:	fd 4f       	sbci	r31, 0xFD	; 253
    2184:	8f ef       	ldi	r24, 0xFF	; 255
    2186:	80 83       	st	Z, r24
	uint8 temp_tens = NOT_SELECTED;//The entered left number of the temperature
    2188:	fe 01       	movw	r30, r28
    218a:	e7 55       	subi	r30, 0x57	; 87
    218c:	fd 4f       	sbci	r31, 0xFD	; 253
    218e:	8f ef       	ldi	r24, 0xFF	; 255
    2190:	80 83       	st	Z, r24
	uint8 hold_counter = 0;
    2192:	fe 01       	movw	r30, r28
    2194:	e8 55       	subi	r30, 0x58	; 88
    2196:	fd 4f       	sbci	r31, 0xFD	; 253
    2198:	10 82       	st	Z, r1

	uint8 login_mode = NO_MODE; //Store the current user mode admin or guest or not logged in
    219a:	fe 01       	movw	r30, r28
    219c:	e9 55       	subi	r30, 0x59	; 89
    219e:	fd 4f       	sbci	r31, 0xFD	; 253
    21a0:	10 82       	st	Z, r1
	uint8 block_mode_flag = FALSE;//is true if the login is blocked or false if not blocked
    21a2:	fe 01       	movw	r30, r28
    21a4:	ea 55       	subi	r30, 0x5A	; 90
    21a6:	fd 4f       	sbci	r31, 0xFD	; 253
    21a8:	10 82       	st	Z, r1
	uint8 key_pressed = NOT_PRESSED;//
    21aa:	fe 01       	movw	r30, r28
    21ac:	eb 55       	subi	r30, 0x5B	; 91
    21ae:	fd 4f       	sbci	r31, 0xFD	; 253
    21b0:	8f ef       	ldi	r24, 0xFF	; 255
    21b2:	80 83       	st	Z, r24
	/*****************  INITIALIZE  ***********************/
	LED_vInit(ADMIN_LED_PORT,ADMIN_LED_PIN);//initializes the led of admin
    21b4:	84 e4       	ldi	r24, 0x44	; 68
    21b6:	60 e0       	ldi	r22, 0x00	; 0
    21b8:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LED_vInit>
	LED_vInit(GUEST_LED_PORT,GUEST_LED_PIN);//initializes the led of guest
    21bc:	84 e4       	ldi	r24, 0x44	; 68
    21be:	61 e0       	ldi	r22, 0x01	; 1
    21c0:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LED_vInit>
	LED_vInit(BLOCK_LED_PORT,BLOCK_LED_PIN);//initializes the led of block
    21c4:	84 e4       	ldi	r24, 0x44	; 68
    21c6:	65 e0       	ldi	r22, 0x05	; 5
    21c8:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LED_vInit>
	LED_vInit(BUZZER_PORT,BUZZER_PIN);//initialize Buzzer as output
    21cc:	84 e4       	ldi	r24, 0x44	; 68
    21ce:	66 e0       	ldi	r22, 0x06	; 6
    21d0:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LED_vInit>
	LCD_vInit();//initializes the LCD screen
    21d4:	0e 94 99 0c 	call	0x1932	; 0x1932 <LCD_vInit>
//	EXTI_vEnable(EXTI_INT0, EXTI_ON_CHANGE);
//	//set Call Back function
//	EXTI_vSetCallBack(EXTI_INT0,APP_vSystemRest);


	keypad_vInit();//initializes the keypad
    21d8:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <keypad_vInit>
	SPI_vInitMaster();//initializes the communication protocol of SPI
    21dc:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <SPI_vInitMaster>
	/******************************************************/


	/* Printing Welcome screen */
	LCD_vSend_string("Welcome to smart");
    21e0:	80 e6       	ldi	r24, 0x60	; 96
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
	LCD_movecursor(2,1);
    21e8:	82 e0       	ldi	r24, 0x02	; 2
    21ea:	61 e0       	ldi	r22, 0x01	; 1
    21ec:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
	LCD_vSend_string("home system");
    21f0:	81 e7       	ldi	r24, 0x71	; 113
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    21f8:	fe 01       	movw	r30, r28
    21fa:	e3 56       	subi	r30, 0x63	; 99
    21fc:	fd 4f       	sbci	r31, 0xFD	; 253
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	aa e7       	ldi	r26, 0x7A	; 122
    2204:	b4 e4       	ldi	r27, 0x44	; 68
    2206:	80 83       	st	Z, r24
    2208:	91 83       	std	Z+1, r25	; 0x01
    220a:	a2 83       	std	Z+2, r26	; 0x02
    220c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220e:	8e 01       	movw	r16, r28
    2210:	07 56       	subi	r16, 0x67	; 103
    2212:	1d 4f       	sbci	r17, 0xFD	; 253
    2214:	fe 01       	movw	r30, r28
    2216:	e3 56       	subi	r30, 0x63	; 99
    2218:	fd 4f       	sbci	r31, 0xFD	; 253
    221a:	60 81       	ld	r22, Z
    221c:	71 81       	ldd	r23, Z+1	; 0x01
    221e:	82 81       	ldd	r24, Z+2	; 0x02
    2220:	93 81       	ldd	r25, Z+3	; 0x03
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	4a ef       	ldi	r20, 0xFA	; 250
    2228:	54 e4       	ldi	r21, 0x44	; 68
    222a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	f8 01       	movw	r30, r16
    2234:	80 83       	st	Z, r24
    2236:	91 83       	std	Z+1, r25	; 0x01
    2238:	a2 83       	std	Z+2, r26	; 0x02
    223a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    223c:	fe 01       	movw	r30, r28
    223e:	e7 56       	subi	r30, 0x67	; 103
    2240:	fd 4f       	sbci	r31, 0xFD	; 253
    2242:	60 81       	ld	r22, Z
    2244:	71 81       	ldd	r23, Z+1	; 0x01
    2246:	82 81       	ldd	r24, Z+2	; 0x02
    2248:	93 81       	ldd	r25, Z+3	; 0x03
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e8       	ldi	r20, 0x80	; 128
    2250:	5f e3       	ldi	r21, 0x3F	; 63
    2252:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2256:	88 23       	and	r24, r24
    2258:	44 f4       	brge	.+16     	; 0x226a <main+0x10e>
		__ticks = 1;
    225a:	fe 01       	movw	r30, r28
    225c:	e9 56       	subi	r30, 0x69	; 105
    225e:	fd 4f       	sbci	r31, 0xFD	; 253
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	91 83       	std	Z+1, r25	; 0x01
    2266:	80 83       	st	Z, r24
    2268:	64 c0       	rjmp	.+200    	; 0x2332 <main+0x1d6>
	else if (__tmp > 65535)
    226a:	fe 01       	movw	r30, r28
    226c:	e7 56       	subi	r30, 0x67	; 103
    226e:	fd 4f       	sbci	r31, 0xFD	; 253
    2270:	60 81       	ld	r22, Z
    2272:	71 81       	ldd	r23, Z+1	; 0x01
    2274:	82 81       	ldd	r24, Z+2	; 0x02
    2276:	93 81       	ldd	r25, Z+3	; 0x03
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	3f ef       	ldi	r19, 0xFF	; 255
    227c:	4f e7       	ldi	r20, 0x7F	; 127
    227e:	57 e4       	ldi	r21, 0x47	; 71
    2280:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2284:	18 16       	cp	r1, r24
    2286:	0c f0       	brlt	.+2      	; 0x228a <main+0x12e>
    2288:	43 c0       	rjmp	.+134    	; 0x2310 <main+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228a:	fe 01       	movw	r30, r28
    228c:	e3 56       	subi	r30, 0x63	; 99
    228e:	fd 4f       	sbci	r31, 0xFD	; 253
    2290:	60 81       	ld	r22, Z
    2292:	71 81       	ldd	r23, Z+1	; 0x01
    2294:	82 81       	ldd	r24, Z+2	; 0x02
    2296:	93 81       	ldd	r25, Z+3	; 0x03
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e2       	ldi	r20, 0x20	; 32
    229e:	51 e4       	ldi	r21, 0x41	; 65
    22a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	8e 01       	movw	r16, r28
    22aa:	09 56       	subi	r16, 0x69	; 105
    22ac:	1d 4f       	sbci	r17, 0xFD	; 253
    22ae:	bc 01       	movw	r22, r24
    22b0:	cd 01       	movw	r24, r26
    22b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	f8 01       	movw	r30, r16
    22bc:	91 83       	std	Z+1, r25	; 0x01
    22be:	80 83       	st	Z, r24
    22c0:	1f c0       	rjmp	.+62     	; 0x2300 <main+0x1a4>
    22c2:	fe 01       	movw	r30, r28
    22c4:	eb 56       	subi	r30, 0x6B	; 107
    22c6:	fd 4f       	sbci	r31, 0xFD	; 253
    22c8:	88 ec       	ldi	r24, 0xC8	; 200
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	91 83       	std	Z+1, r25	; 0x01
    22ce:	80 83       	st	Z, r24
    22d0:	fe 01       	movw	r30, r28
    22d2:	eb 56       	subi	r30, 0x6B	; 107
    22d4:	fd 4f       	sbci	r31, 0xFD	; 253
    22d6:	80 81       	ld	r24, Z
    22d8:	91 81       	ldd	r25, Z+1	; 0x01
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <main+0x17e>
    22de:	fe 01       	movw	r30, r28
    22e0:	eb 56       	subi	r30, 0x6B	; 107
    22e2:	fd 4f       	sbci	r31, 0xFD	; 253
    22e4:	91 83       	std	Z+1, r25	; 0x01
    22e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e8:	de 01       	movw	r26, r28
    22ea:	a9 56       	subi	r26, 0x69	; 105
    22ec:	bd 4f       	sbci	r27, 0xFD	; 253
    22ee:	fe 01       	movw	r30, r28
    22f0:	e9 56       	subi	r30, 0x69	; 105
    22f2:	fd 4f       	sbci	r31, 0xFD	; 253
    22f4:	80 81       	ld	r24, Z
    22f6:	91 81       	ldd	r25, Z+1	; 0x01
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	11 96       	adiw	r26, 0x01	; 1
    22fc:	9c 93       	st	X, r25
    22fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2300:	fe 01       	movw	r30, r28
    2302:	e9 56       	subi	r30, 0x69	; 105
    2304:	fd 4f       	sbci	r31, 0xFD	; 253
    2306:	80 81       	ld	r24, Z
    2308:	91 81       	ldd	r25, Z+1	; 0x01
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	d1 f6       	brne	.-76     	; 0x22c2 <main+0x166>
    230e:	27 c0       	rjmp	.+78     	; 0x235e <main+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2310:	8e 01       	movw	r16, r28
    2312:	09 56       	subi	r16, 0x69	; 105
    2314:	1d 4f       	sbci	r17, 0xFD	; 253
    2316:	fe 01       	movw	r30, r28
    2318:	e7 56       	subi	r30, 0x67	; 103
    231a:	fd 4f       	sbci	r31, 0xFD	; 253
    231c:	60 81       	ld	r22, Z
    231e:	71 81       	ldd	r23, Z+1	; 0x01
    2320:	82 81       	ldd	r24, Z+2	; 0x02
    2322:	93 81       	ldd	r25, Z+3	; 0x03
    2324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	f8 01       	movw	r30, r16
    232e:	91 83       	std	Z+1, r25	; 0x01
    2330:	80 83       	st	Z, r24
    2332:	de 01       	movw	r26, r28
    2334:	ad 56       	subi	r26, 0x6D	; 109
    2336:	bd 4f       	sbci	r27, 0xFD	; 253
    2338:	fe 01       	movw	r30, r28
    233a:	e9 56       	subi	r30, 0x69	; 105
    233c:	fd 4f       	sbci	r31, 0xFD	; 253
    233e:	80 81       	ld	r24, Z
    2340:	91 81       	ldd	r25, Z+1	; 0x01
    2342:	8d 93       	st	X+, r24
    2344:	9c 93       	st	X, r25
    2346:	fe 01       	movw	r30, r28
    2348:	ed 56       	subi	r30, 0x6D	; 109
    234a:	fd 4f       	sbci	r31, 0xFD	; 253
    234c:	80 81       	ld	r24, Z
    234e:	91 81       	ldd	r25, Z+1	; 0x01
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <main+0x1f4>
    2354:	fe 01       	movw	r30, r28
    2356:	ed 56       	subi	r30, 0x6D	; 109
    2358:	fd 4f       	sbci	r31, 0xFD	; 253
    235a:	91 83       	std	Z+1, r25	; 0x01
    235c:	80 83       	st	Z, r24
	_delay_ms(1000);//Halt the system for the given time in (ms)
	LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    235e:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
	/***************************/
	/*Setting Admin and Guest passwords if not set */
	//read the state of the the passwords of the admin and guest if both are set or not set
	if ( (eeprom_read_byte (ADMIN_PASS_STATUS_ADDRESS)!=PASS_SET) || (eeprom_read_byte (GUEST_PASS_STATUS_ADDRESS)!=PASS_SET) )
    2362:	85 e0       	ldi	r24, 0x05	; 5
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	0e 94 92 3d 	call	0x7b24	; 0x7b24 <__eerd_byte_m32>
    236a:	81 30       	cpi	r24, 0x01	; 1
    236c:	39 f4       	brne	.+14     	; 0x237c <main+0x220>
    236e:	80 e2       	ldi	r24, 0x20	; 32
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	0e 94 92 3d 	call	0x7b24	; 0x7b24 <__eerd_byte_m32>
    2376:	81 30       	cpi	r24, 0x01	; 1
    2378:	09 f4       	brne	.+2      	; 0x237c <main+0x220>
    237a:	31 c6       	rjmp	.+3170   	; 0x2fde <main+0xe82>
	{
		LCD_vSend_string("Login for");//printing login menu
    237c:	8d e7       	ldi	r24, 0x7D	; 125
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
		LCD_movecursor(2,1);//move the cursor to the second line
    2384:	82 e0       	ldi	r24, 0x02	; 2
    2386:	61 e0       	ldi	r22, 0x01	; 1
    2388:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
		LCD_vSend_string("first time");
    238c:	87 e8       	ldi	r24, 0x87	; 135
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    2394:	fe 01       	movw	r30, r28
    2396:	e1 57       	subi	r30, 0x71	; 113
    2398:	fd 4f       	sbci	r31, 0xFD	; 253
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	aa e7       	ldi	r26, 0x7A	; 122
    23a0:	b4 e4       	ldi	r27, 0x44	; 68
    23a2:	80 83       	st	Z, r24
    23a4:	91 83       	std	Z+1, r25	; 0x01
    23a6:	a2 83       	std	Z+2, r26	; 0x02
    23a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23aa:	8e 01       	movw	r16, r28
    23ac:	05 57       	subi	r16, 0x75	; 117
    23ae:	1d 4f       	sbci	r17, 0xFD	; 253
    23b0:	fe 01       	movw	r30, r28
    23b2:	e1 57       	subi	r30, 0x71	; 113
    23b4:	fd 4f       	sbci	r31, 0xFD	; 253
    23b6:	60 81       	ld	r22, Z
    23b8:	71 81       	ldd	r23, Z+1	; 0x01
    23ba:	82 81       	ldd	r24, Z+2	; 0x02
    23bc:	93 81       	ldd	r25, Z+3	; 0x03
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	4a ef       	ldi	r20, 0xFA	; 250
    23c4:	54 e4       	ldi	r21, 0x44	; 68
    23c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	f8 01       	movw	r30, r16
    23d0:	80 83       	st	Z, r24
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	a2 83       	std	Z+2, r26	; 0x02
    23d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23d8:	fe 01       	movw	r30, r28
    23da:	e5 57       	subi	r30, 0x75	; 117
    23dc:	fd 4f       	sbci	r31, 0xFD	; 253
    23de:	60 81       	ld	r22, Z
    23e0:	71 81       	ldd	r23, Z+1	; 0x01
    23e2:	82 81       	ldd	r24, Z+2	; 0x02
    23e4:	93 81       	ldd	r25, Z+3	; 0x03
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	40 e8       	ldi	r20, 0x80	; 128
    23ec:	5f e3       	ldi	r21, 0x3F	; 63
    23ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23f2:	88 23       	and	r24, r24
    23f4:	44 f4       	brge	.+16     	; 0x2406 <main+0x2aa>
		__ticks = 1;
    23f6:	fe 01       	movw	r30, r28
    23f8:	e7 57       	subi	r30, 0x77	; 119
    23fa:	fd 4f       	sbci	r31, 0xFD	; 253
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	91 83       	std	Z+1, r25	; 0x01
    2402:	80 83       	st	Z, r24
    2404:	64 c0       	rjmp	.+200    	; 0x24ce <main+0x372>
	else if (__tmp > 65535)
    2406:	fe 01       	movw	r30, r28
    2408:	e5 57       	subi	r30, 0x75	; 117
    240a:	fd 4f       	sbci	r31, 0xFD	; 253
    240c:	60 81       	ld	r22, Z
    240e:	71 81       	ldd	r23, Z+1	; 0x01
    2410:	82 81       	ldd	r24, Z+2	; 0x02
    2412:	93 81       	ldd	r25, Z+3	; 0x03
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	3f ef       	ldi	r19, 0xFF	; 255
    2418:	4f e7       	ldi	r20, 0x7F	; 127
    241a:	57 e4       	ldi	r21, 0x47	; 71
    241c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2420:	18 16       	cp	r1, r24
    2422:	0c f0       	brlt	.+2      	; 0x2426 <main+0x2ca>
    2424:	43 c0       	rjmp	.+134    	; 0x24ac <main+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2426:	fe 01       	movw	r30, r28
    2428:	e1 57       	subi	r30, 0x71	; 113
    242a:	fd 4f       	sbci	r31, 0xFD	; 253
    242c:	60 81       	ld	r22, Z
    242e:	71 81       	ldd	r23, Z+1	; 0x01
    2430:	82 81       	ldd	r24, Z+2	; 0x02
    2432:	93 81       	ldd	r25, Z+3	; 0x03
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e2       	ldi	r20, 0x20	; 32
    243a:	51 e4       	ldi	r21, 0x41	; 65
    243c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	8e 01       	movw	r16, r28
    2446:	07 57       	subi	r16, 0x77	; 119
    2448:	1d 4f       	sbci	r17, 0xFD	; 253
    244a:	bc 01       	movw	r22, r24
    244c:	cd 01       	movw	r24, r26
    244e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	f8 01       	movw	r30, r16
    2458:	91 83       	std	Z+1, r25	; 0x01
    245a:	80 83       	st	Z, r24
    245c:	1f c0       	rjmp	.+62     	; 0x249c <main+0x340>
    245e:	fe 01       	movw	r30, r28
    2460:	e9 57       	subi	r30, 0x79	; 121
    2462:	fd 4f       	sbci	r31, 0xFD	; 253
    2464:	88 ec       	ldi	r24, 0xC8	; 200
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	91 83       	std	Z+1, r25	; 0x01
    246a:	80 83       	st	Z, r24
    246c:	fe 01       	movw	r30, r28
    246e:	e9 57       	subi	r30, 0x79	; 121
    2470:	fd 4f       	sbci	r31, 0xFD	; 253
    2472:	80 81       	ld	r24, Z
    2474:	91 81       	ldd	r25, Z+1	; 0x01
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	f1 f7       	brne	.-4      	; 0x2476 <main+0x31a>
    247a:	fe 01       	movw	r30, r28
    247c:	e9 57       	subi	r30, 0x79	; 121
    247e:	fd 4f       	sbci	r31, 0xFD	; 253
    2480:	91 83       	std	Z+1, r25	; 0x01
    2482:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2484:	de 01       	movw	r26, r28
    2486:	a7 57       	subi	r26, 0x77	; 119
    2488:	bd 4f       	sbci	r27, 0xFD	; 253
    248a:	fe 01       	movw	r30, r28
    248c:	e7 57       	subi	r30, 0x77	; 119
    248e:	fd 4f       	sbci	r31, 0xFD	; 253
    2490:	80 81       	ld	r24, Z
    2492:	91 81       	ldd	r25, Z+1	; 0x01
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	11 96       	adiw	r26, 0x01	; 1
    2498:	9c 93       	st	X, r25
    249a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249c:	fe 01       	movw	r30, r28
    249e:	e7 57       	subi	r30, 0x77	; 119
    24a0:	fd 4f       	sbci	r31, 0xFD	; 253
    24a2:	80 81       	ld	r24, Z
    24a4:	91 81       	ldd	r25, Z+1	; 0x01
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	d1 f6       	brne	.-76     	; 0x245e <main+0x302>
    24aa:	27 c0       	rjmp	.+78     	; 0x24fa <main+0x39e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ac:	8e 01       	movw	r16, r28
    24ae:	07 57       	subi	r16, 0x77	; 119
    24b0:	1d 4f       	sbci	r17, 0xFD	; 253
    24b2:	fe 01       	movw	r30, r28
    24b4:	e5 57       	subi	r30, 0x75	; 117
    24b6:	fd 4f       	sbci	r31, 0xFD	; 253
    24b8:	60 81       	ld	r22, Z
    24ba:	71 81       	ldd	r23, Z+1	; 0x01
    24bc:	82 81       	ldd	r24, Z+2	; 0x02
    24be:	93 81       	ldd	r25, Z+3	; 0x03
    24c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	f8 01       	movw	r30, r16
    24ca:	91 83       	std	Z+1, r25	; 0x01
    24cc:	80 83       	st	Z, r24
    24ce:	de 01       	movw	r26, r28
    24d0:	ab 57       	subi	r26, 0x7B	; 123
    24d2:	bd 4f       	sbci	r27, 0xFD	; 253
    24d4:	fe 01       	movw	r30, r28
    24d6:	e7 57       	subi	r30, 0x77	; 119
    24d8:	fd 4f       	sbci	r31, 0xFD	; 253
    24da:	80 81       	ld	r24, Z
    24dc:	91 81       	ldd	r25, Z+1	; 0x01
    24de:	8d 93       	st	X+, r24
    24e0:	9c 93       	st	X, r25
    24e2:	fe 01       	movw	r30, r28
    24e4:	eb 57       	subi	r30, 0x7B	; 123
    24e6:	fd 4f       	sbci	r31, 0xFD	; 253
    24e8:	80 81       	ld	r24, Z
    24ea:	91 81       	ldd	r25, Z+1	; 0x01
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	f1 f7       	brne	.-4      	; 0x24ec <main+0x390>
    24f0:	fe 01       	movw	r30, r28
    24f2:	eb 57       	subi	r30, 0x7B	; 123
    24f4:	fd 4f       	sbci	r31, 0xFD	; 253
    24f6:	91 83       	std	Z+1, r25	; 0x01
    24f8:	80 83       	st	Z, r24
		_delay_ms(1000);//Halt the system for the given time in (ms)
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    24fa:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
		LCD_vSend_string("Set Admin pass");//printing the set admin password menu
    24fe:	82 e9       	ldi	r24, 0x92	; 146
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
		LCD_movecursor(2,1);
    2506:	82 e0       	ldi	r24, 0x02	; 2
    2508:	61 e0       	ldi	r22, 0x01	; 1
    250a:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
		LCD_vSend_string("Admin pass:");
    250e:	81 ea       	ldi	r24, 0xA1	; 161
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>

		/********************************* setting Admin password **********************************************/
		uint8 pass_counter=0;//the counter of the characters of the password
    2516:	fe 01       	movw	r30, r28
    2518:	ec 55       	subi	r30, 0x5C	; 92
    251a:	fd 4f       	sbci	r31, 0xFD	; 253
    251c:	10 82       	st	Z, r1
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//the array where it stored the password
    251e:	fe 01       	movw	r30, r28
    2520:	e4 55       	subi	r30, 0x54	; 84
    2522:	fd 4f       	sbci	r31, 0xFD	; 253
    2524:	8f ef       	ldi	r24, 0xFF	; 255
    2526:	80 83       	st	Z, r24
    2528:	fe 01       	movw	r30, r28
    252a:	e4 55       	subi	r30, 0x54	; 84
    252c:	fd 4f       	sbci	r31, 0xFD	; 253
    252e:	8f ef       	ldi	r24, 0xFF	; 255
    2530:	81 83       	std	Z+1, r24	; 0x01
    2532:	fe 01       	movw	r30, r28
    2534:	e4 55       	subi	r30, 0x54	; 84
    2536:	fd 4f       	sbci	r31, 0xFD	; 253
    2538:	8f ef       	ldi	r24, 0xFF	; 255
    253a:	82 83       	std	Z+2, r24	; 0x02
    253c:	fe 01       	movw	r30, r28
    253e:	e4 55       	subi	r30, 0x54	; 84
    2540:	fd 4f       	sbci	r31, 0xFD	; 253
    2542:	8f ef       	ldi	r24, 0xFF	; 255
    2544:	83 83       	std	Z+3, r24	; 0x03
    2546:	a5 c1       	rjmp	.+842    	; 0x2892 <main+0x736>
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
    2548:	fe 01       	movw	r30, r28
    254a:	eb 55       	subi	r30, 0x5B	; 91
    254c:	fd 4f       	sbci	r31, 0xFD	; 253
    254e:	8f ef       	ldi	r24, 0xFF	; 255
    2550:	80 83       	st	Z, r24
    2552:	06 c0       	rjmp	.+12     	; 0x2560 <main+0x404>
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
    2554:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <keypad_u8check_press>
    2558:	fe 01       	movw	r30, r28
    255a:	eb 55       	subi	r30, 0x5B	; 91
    255c:	fd 4f       	sbci	r31, 0xFD	; 253
    255e:	80 83       	st	Z, r24
		uint8 pass_counter=0;//the counter of the characters of the password
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//the array where it stored the password
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
    2560:	fe 01       	movw	r30, r28
    2562:	eb 55       	subi	r30, 0x5B	; 91
    2564:	fd 4f       	sbci	r31, 0xFD	; 253
    2566:	80 81       	ld	r24, Z
    2568:	8f 3f       	cpi	r24, 0xFF	; 255
    256a:	a1 f3       	breq	.-24     	; 0x2554 <main+0x3f8>
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
			}

			pass[pass_counter]=key_pressed;//add the entered character to the pass array
    256c:	fe 01       	movw	r30, r28
    256e:	ec 55       	subi	r30, 0x5C	; 92
    2570:	fd 4f       	sbci	r31, 0xFD	; 253
    2572:	80 81       	ld	r24, Z
    2574:	28 2f       	mov	r18, r24
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	ce 01       	movw	r24, r28
    257a:	84 55       	subi	r24, 0x54	; 84
    257c:	9d 4f       	sbci	r25, 0xFD	; 253
    257e:	dc 01       	movw	r26, r24
    2580:	a2 0f       	add	r26, r18
    2582:	b3 1f       	adc	r27, r19
    2584:	fe 01       	movw	r30, r28
    2586:	eb 55       	subi	r30, 0x5B	; 91
    2588:	fd 4f       	sbci	r31, 0xFD	; 253
    258a:	80 81       	ld	r24, Z
    258c:	8c 93       	st	X, r24
			LCD_vSend_char(key_pressed);//print the entered character
    258e:	fe 01       	movw	r30, r28
    2590:	eb 55       	subi	r30, 0x5B	; 91
    2592:	fd 4f       	sbci	r31, 0xFD	; 253
    2594:	80 81       	ld	r24, Z
    2596:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
    259a:	fe 01       	movw	r30, r28
    259c:	ef 57       	subi	r30, 0x7F	; 127
    259e:	fd 4f       	sbci	r31, 0xFD	; 253
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	a6 e9       	ldi	r26, 0x96	; 150
    25a6:	b3 e4       	ldi	r27, 0x43	; 67
    25a8:	80 83       	st	Z, r24
    25aa:	91 83       	std	Z+1, r25	; 0x01
    25ac:	a2 83       	std	Z+2, r26	; 0x02
    25ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b0:	8e 01       	movw	r16, r28
    25b2:	03 58       	subi	r16, 0x83	; 131
    25b4:	1d 4f       	sbci	r17, 0xFD	; 253
    25b6:	fe 01       	movw	r30, r28
    25b8:	ef 57       	subi	r30, 0x7F	; 127
    25ba:	fd 4f       	sbci	r31, 0xFD	; 253
    25bc:	60 81       	ld	r22, Z
    25be:	71 81       	ldd	r23, Z+1	; 0x01
    25c0:	82 81       	ldd	r24, Z+2	; 0x02
    25c2:	93 81       	ldd	r25, Z+3	; 0x03
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	4a ef       	ldi	r20, 0xFA	; 250
    25ca:	54 e4       	ldi	r21, 0x44	; 68
    25cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	f8 01       	movw	r30, r16
    25d6:	80 83       	st	Z, r24
    25d8:	91 83       	std	Z+1, r25	; 0x01
    25da:	a2 83       	std	Z+2, r26	; 0x02
    25dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25de:	fe 01       	movw	r30, r28
    25e0:	e3 58       	subi	r30, 0x83	; 131
    25e2:	fd 4f       	sbci	r31, 0xFD	; 253
    25e4:	60 81       	ld	r22, Z
    25e6:	71 81       	ldd	r23, Z+1	; 0x01
    25e8:	82 81       	ldd	r24, Z+2	; 0x02
    25ea:	93 81       	ldd	r25, Z+3	; 0x03
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	40 e8       	ldi	r20, 0x80	; 128
    25f2:	5f e3       	ldi	r21, 0x3F	; 63
    25f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25f8:	88 23       	and	r24, r24
    25fa:	44 f4       	brge	.+16     	; 0x260c <main+0x4b0>
		__ticks = 1;
    25fc:	fe 01       	movw	r30, r28
    25fe:	e5 58       	subi	r30, 0x85	; 133
    2600:	fd 4f       	sbci	r31, 0xFD	; 253
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	91 83       	std	Z+1, r25	; 0x01
    2608:	80 83       	st	Z, r24
    260a:	64 c0       	rjmp	.+200    	; 0x26d4 <main+0x578>
	else if (__tmp > 65535)
    260c:	fe 01       	movw	r30, r28
    260e:	e3 58       	subi	r30, 0x83	; 131
    2610:	fd 4f       	sbci	r31, 0xFD	; 253
    2612:	60 81       	ld	r22, Z
    2614:	71 81       	ldd	r23, Z+1	; 0x01
    2616:	82 81       	ldd	r24, Z+2	; 0x02
    2618:	93 81       	ldd	r25, Z+3	; 0x03
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	3f ef       	ldi	r19, 0xFF	; 255
    261e:	4f e7       	ldi	r20, 0x7F	; 127
    2620:	57 e4       	ldi	r21, 0x47	; 71
    2622:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2626:	18 16       	cp	r1, r24
    2628:	0c f0       	brlt	.+2      	; 0x262c <main+0x4d0>
    262a:	43 c0       	rjmp	.+134    	; 0x26b2 <main+0x556>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    262c:	fe 01       	movw	r30, r28
    262e:	ef 57       	subi	r30, 0x7F	; 127
    2630:	fd 4f       	sbci	r31, 0xFD	; 253
    2632:	60 81       	ld	r22, Z
    2634:	71 81       	ldd	r23, Z+1	; 0x01
    2636:	82 81       	ldd	r24, Z+2	; 0x02
    2638:	93 81       	ldd	r25, Z+3	; 0x03
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e2       	ldi	r20, 0x20	; 32
    2640:	51 e4       	ldi	r21, 0x41	; 65
    2642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	8e 01       	movw	r16, r28
    264c:	05 58       	subi	r16, 0x85	; 133
    264e:	1d 4f       	sbci	r17, 0xFD	; 253
    2650:	bc 01       	movw	r22, r24
    2652:	cd 01       	movw	r24, r26
    2654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	f8 01       	movw	r30, r16
    265e:	91 83       	std	Z+1, r25	; 0x01
    2660:	80 83       	st	Z, r24
    2662:	1f c0       	rjmp	.+62     	; 0x26a2 <main+0x546>
    2664:	fe 01       	movw	r30, r28
    2666:	e7 58       	subi	r30, 0x87	; 135
    2668:	fd 4f       	sbci	r31, 0xFD	; 253
    266a:	88 ec       	ldi	r24, 0xC8	; 200
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	91 83       	std	Z+1, r25	; 0x01
    2670:	80 83       	st	Z, r24
    2672:	fe 01       	movw	r30, r28
    2674:	e7 58       	subi	r30, 0x87	; 135
    2676:	fd 4f       	sbci	r31, 0xFD	; 253
    2678:	80 81       	ld	r24, Z
    267a:	91 81       	ldd	r25, Z+1	; 0x01
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	f1 f7       	brne	.-4      	; 0x267c <main+0x520>
    2680:	fe 01       	movw	r30, r28
    2682:	e7 58       	subi	r30, 0x87	; 135
    2684:	fd 4f       	sbci	r31, 0xFD	; 253
    2686:	91 83       	std	Z+1, r25	; 0x01
    2688:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268a:	de 01       	movw	r26, r28
    268c:	a5 58       	subi	r26, 0x85	; 133
    268e:	bd 4f       	sbci	r27, 0xFD	; 253
    2690:	fe 01       	movw	r30, r28
    2692:	e5 58       	subi	r30, 0x85	; 133
    2694:	fd 4f       	sbci	r31, 0xFD	; 253
    2696:	80 81       	ld	r24, Z
    2698:	91 81       	ldd	r25, Z+1	; 0x01
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	11 96       	adiw	r26, 0x01	; 1
    269e:	9c 93       	st	X, r25
    26a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a2:	fe 01       	movw	r30, r28
    26a4:	e5 58       	subi	r30, 0x85	; 133
    26a6:	fd 4f       	sbci	r31, 0xFD	; 253
    26a8:	80 81       	ld	r24, Z
    26aa:	91 81       	ldd	r25, Z+1	; 0x01
    26ac:	00 97       	sbiw	r24, 0x00	; 0
    26ae:	d1 f6       	brne	.-76     	; 0x2664 <main+0x508>
    26b0:	27 c0       	rjmp	.+78     	; 0x2700 <main+0x5a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b2:	8e 01       	movw	r16, r28
    26b4:	05 58       	subi	r16, 0x85	; 133
    26b6:	1d 4f       	sbci	r17, 0xFD	; 253
    26b8:	fe 01       	movw	r30, r28
    26ba:	e3 58       	subi	r30, 0x83	; 131
    26bc:	fd 4f       	sbci	r31, 0xFD	; 253
    26be:	60 81       	ld	r22, Z
    26c0:	71 81       	ldd	r23, Z+1	; 0x01
    26c2:	82 81       	ldd	r24, Z+2	; 0x02
    26c4:	93 81       	ldd	r25, Z+3	; 0x03
    26c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	f8 01       	movw	r30, r16
    26d0:	91 83       	std	Z+1, r25	; 0x01
    26d2:	80 83       	st	Z, r24
    26d4:	de 01       	movw	r26, r28
    26d6:	a9 58       	subi	r26, 0x89	; 137
    26d8:	bd 4f       	sbci	r27, 0xFD	; 253
    26da:	fe 01       	movw	r30, r28
    26dc:	e5 58       	subi	r30, 0x85	; 133
    26de:	fd 4f       	sbci	r31, 0xFD	; 253
    26e0:	80 81       	ld	r24, Z
    26e2:	91 81       	ldd	r25, Z+1	; 0x01
    26e4:	8d 93       	st	X+, r24
    26e6:	9c 93       	st	X, r25
    26e8:	fe 01       	movw	r30, r28
    26ea:	e9 58       	subi	r30, 0x89	; 137
    26ec:	fd 4f       	sbci	r31, 0xFD	; 253
    26ee:	80 81       	ld	r24, Z
    26f0:	91 81       	ldd	r25, Z+1	; 0x01
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <main+0x596>
    26f6:	fe 01       	movw	r30, r28
    26f8:	e9 58       	subi	r30, 0x89	; 137
    26fa:	fd 4f       	sbci	r31, 0xFD	; 253
    26fc:	91 83       	std	Z+1, r25	; 0x01
    26fe:	80 83       	st	Z, r24
			_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
			LCD_movecursor(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
    2700:	fe 01       	movw	r30, r28
    2702:	ec 55       	subi	r30, 0x5C	; 92
    2704:	fd 4f       	sbci	r31, 0xFD	; 253
    2706:	80 81       	ld	r24, Z
    2708:	98 2f       	mov	r25, r24
    270a:	94 5f       	subi	r25, 0xF4	; 244
    270c:	82 e0       	ldi	r24, 0x02	; 2
    270e:	69 2f       	mov	r22, r25
    2710:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
			LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
    2714:	8a e2       	ldi	r24, 0x2A	; 42
    2716:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
    271a:	fe 01       	movw	r30, r28
    271c:	ed 58       	subi	r30, 0x8D	; 141
    271e:	fd 4f       	sbci	r31, 0xFD	; 253
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	a8 ec       	ldi	r26, 0xC8	; 200
    2726:	b2 e4       	ldi	r27, 0x42	; 66
    2728:	80 83       	st	Z, r24
    272a:	91 83       	std	Z+1, r25	; 0x01
    272c:	a2 83       	std	Z+2, r26	; 0x02
    272e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2730:	8e 01       	movw	r16, r28
    2732:	01 59       	subi	r16, 0x91	; 145
    2734:	1d 4f       	sbci	r17, 0xFD	; 253
    2736:	fe 01       	movw	r30, r28
    2738:	ed 58       	subi	r30, 0x8D	; 141
    273a:	fd 4f       	sbci	r31, 0xFD	; 253
    273c:	60 81       	ld	r22, Z
    273e:	71 81       	ldd	r23, Z+1	; 0x01
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	93 81       	ldd	r25, Z+3	; 0x03
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	4a ef       	ldi	r20, 0xFA	; 250
    274a:	54 e4       	ldi	r21, 0x44	; 68
    274c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	f8 01       	movw	r30, r16
    2756:	80 83       	st	Z, r24
    2758:	91 83       	std	Z+1, r25	; 0x01
    275a:	a2 83       	std	Z+2, r26	; 0x02
    275c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    275e:	fe 01       	movw	r30, r28
    2760:	e1 59       	subi	r30, 0x91	; 145
    2762:	fd 4f       	sbci	r31, 0xFD	; 253
    2764:	60 81       	ld	r22, Z
    2766:	71 81       	ldd	r23, Z+1	; 0x01
    2768:	82 81       	ldd	r24, Z+2	; 0x02
    276a:	93 81       	ldd	r25, Z+3	; 0x03
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	40 e8       	ldi	r20, 0x80	; 128
    2772:	5f e3       	ldi	r21, 0x3F	; 63
    2774:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2778:	88 23       	and	r24, r24
    277a:	44 f4       	brge	.+16     	; 0x278c <main+0x630>
		__ticks = 1;
    277c:	fe 01       	movw	r30, r28
    277e:	e3 59       	subi	r30, 0x93	; 147
    2780:	fd 4f       	sbci	r31, 0xFD	; 253
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	91 83       	std	Z+1, r25	; 0x01
    2788:	80 83       	st	Z, r24
    278a:	64 c0       	rjmp	.+200    	; 0x2854 <main+0x6f8>
	else if (__tmp > 65535)
    278c:	fe 01       	movw	r30, r28
    278e:	e1 59       	subi	r30, 0x91	; 145
    2790:	fd 4f       	sbci	r31, 0xFD	; 253
    2792:	60 81       	ld	r22, Z
    2794:	71 81       	ldd	r23, Z+1	; 0x01
    2796:	82 81       	ldd	r24, Z+2	; 0x02
    2798:	93 81       	ldd	r25, Z+3	; 0x03
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	3f ef       	ldi	r19, 0xFF	; 255
    279e:	4f e7       	ldi	r20, 0x7F	; 127
    27a0:	57 e4       	ldi	r21, 0x47	; 71
    27a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27a6:	18 16       	cp	r1, r24
    27a8:	0c f0       	brlt	.+2      	; 0x27ac <main+0x650>
    27aa:	43 c0       	rjmp	.+134    	; 0x2832 <main+0x6d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ac:	fe 01       	movw	r30, r28
    27ae:	ed 58       	subi	r30, 0x8D	; 141
    27b0:	fd 4f       	sbci	r31, 0xFD	; 253
    27b2:	60 81       	ld	r22, Z
    27b4:	71 81       	ldd	r23, Z+1	; 0x01
    27b6:	82 81       	ldd	r24, Z+2	; 0x02
    27b8:	93 81       	ldd	r25, Z+3	; 0x03
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e2       	ldi	r20, 0x20	; 32
    27c0:	51 e4       	ldi	r21, 0x41	; 65
    27c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	8e 01       	movw	r16, r28
    27cc:	03 59       	subi	r16, 0x93	; 147
    27ce:	1d 4f       	sbci	r17, 0xFD	; 253
    27d0:	bc 01       	movw	r22, r24
    27d2:	cd 01       	movw	r24, r26
    27d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	f8 01       	movw	r30, r16
    27de:	91 83       	std	Z+1, r25	; 0x01
    27e0:	80 83       	st	Z, r24
    27e2:	1f c0       	rjmp	.+62     	; 0x2822 <main+0x6c6>
    27e4:	fe 01       	movw	r30, r28
    27e6:	e5 59       	subi	r30, 0x95	; 149
    27e8:	fd 4f       	sbci	r31, 0xFD	; 253
    27ea:	88 ec       	ldi	r24, 0xC8	; 200
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	91 83       	std	Z+1, r25	; 0x01
    27f0:	80 83       	st	Z, r24
    27f2:	fe 01       	movw	r30, r28
    27f4:	e5 59       	subi	r30, 0x95	; 149
    27f6:	fd 4f       	sbci	r31, 0xFD	; 253
    27f8:	80 81       	ld	r24, Z
    27fa:	91 81       	ldd	r25, Z+1	; 0x01
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	f1 f7       	brne	.-4      	; 0x27fc <main+0x6a0>
    2800:	fe 01       	movw	r30, r28
    2802:	e5 59       	subi	r30, 0x95	; 149
    2804:	fd 4f       	sbci	r31, 0xFD	; 253
    2806:	91 83       	std	Z+1, r25	; 0x01
    2808:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280a:	de 01       	movw	r26, r28
    280c:	a3 59       	subi	r26, 0x93	; 147
    280e:	bd 4f       	sbci	r27, 0xFD	; 253
    2810:	fe 01       	movw	r30, r28
    2812:	e3 59       	subi	r30, 0x93	; 147
    2814:	fd 4f       	sbci	r31, 0xFD	; 253
    2816:	80 81       	ld	r24, Z
    2818:	91 81       	ldd	r25, Z+1	; 0x01
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	11 96       	adiw	r26, 0x01	; 1
    281e:	9c 93       	st	X, r25
    2820:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2822:	fe 01       	movw	r30, r28
    2824:	e3 59       	subi	r30, 0x93	; 147
    2826:	fd 4f       	sbci	r31, 0xFD	; 253
    2828:	80 81       	ld	r24, Z
    282a:	91 81       	ldd	r25, Z+1	; 0x01
    282c:	00 97       	sbiw	r24, 0x00	; 0
    282e:	d1 f6       	brne	.-76     	; 0x27e4 <main+0x688>
    2830:	27 c0       	rjmp	.+78     	; 0x2880 <main+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2832:	8e 01       	movw	r16, r28
    2834:	03 59       	subi	r16, 0x93	; 147
    2836:	1d 4f       	sbci	r17, 0xFD	; 253
    2838:	fe 01       	movw	r30, r28
    283a:	e1 59       	subi	r30, 0x91	; 145
    283c:	fd 4f       	sbci	r31, 0xFD	; 253
    283e:	60 81       	ld	r22, Z
    2840:	71 81       	ldd	r23, Z+1	; 0x01
    2842:	82 81       	ldd	r24, Z+2	; 0x02
    2844:	93 81       	ldd	r25, Z+3	; 0x03
    2846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	f8 01       	movw	r30, r16
    2850:	91 83       	std	Z+1, r25	; 0x01
    2852:	80 83       	st	Z, r24
    2854:	de 01       	movw	r26, r28
    2856:	a7 59       	subi	r26, 0x97	; 151
    2858:	bd 4f       	sbci	r27, 0xFD	; 253
    285a:	fe 01       	movw	r30, r28
    285c:	e3 59       	subi	r30, 0x93	; 147
    285e:	fd 4f       	sbci	r31, 0xFD	; 253
    2860:	80 81       	ld	r24, Z
    2862:	91 81       	ldd	r25, Z+1	; 0x01
    2864:	8d 93       	st	X+, r24
    2866:	9c 93       	st	X, r25
    2868:	fe 01       	movw	r30, r28
    286a:	e7 59       	subi	r30, 0x97	; 151
    286c:	fd 4f       	sbci	r31, 0xFD	; 253
    286e:	80 81       	ld	r24, Z
    2870:	91 81       	ldd	r25, Z+1	; 0x01
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	f1 f7       	brne	.-4      	; 0x2872 <main+0x716>
    2876:	fe 01       	movw	r30, r28
    2878:	e7 59       	subi	r30, 0x97	; 151
    287a:	fd 4f       	sbci	r31, 0xFD	; 253
    287c:	91 83       	std	Z+1, r25	; 0x01
    287e:	80 83       	st	Z, r24
			_delay_ms(100);//Halt the system for the given time in (ms)
			pass_counter++;//increase the characters count
    2880:	de 01       	movw	r26, r28
    2882:	ac 55       	subi	r26, 0x5C	; 92
    2884:	bd 4f       	sbci	r27, 0xFD	; 253
    2886:	fe 01       	movw	r30, r28
    2888:	ec 55       	subi	r30, 0x5C	; 92
    288a:	fd 4f       	sbci	r31, 0xFD	; 253
    288c:	80 81       	ld	r24, Z
    288e:	8f 5f       	subi	r24, 0xFF	; 255
    2890:	8c 93       	st	X, r24
		LCD_vSend_string("Admin pass:");

		/********************************* setting Admin password **********************************************/
		uint8 pass_counter=0;//the counter of the characters of the password
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//the array where it stored the password
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
    2892:	fe 01       	movw	r30, r28
    2894:	ec 55       	subi	r30, 0x5C	; 92
    2896:	fd 4f       	sbci	r31, 0xFD	; 253
    2898:	80 81       	ld	r24, Z
    289a:	84 30       	cpi	r24, 0x04	; 4
    289c:	08 f4       	brcc	.+2      	; 0x28a0 <main+0x744>
    289e:	54 ce       	rjmp	.-856    	; 0x2548 <main+0x3ec>
			LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
			_delay_ms(100);//Halt the system for the given time in (ms)
			pass_counter++;//increase the characters count
		}
		//eeprom_write_block (EEPROM_ADMIN_ADDRESS,pass,PASS_SIZE);//save the entire password as a block to the EEPROM
		for(pass_counter=0;pass_counter<PASS_SIZE;pass_counter++)
    28a0:	fe 01       	movw	r30, r28
    28a2:	ec 55       	subi	r30, 0x5C	; 92
    28a4:	fd 4f       	sbci	r31, 0xFD	; 253
    28a6:	10 82       	st	Z, r1
    28a8:	23 c0       	rjmp	.+70     	; 0x28f0 <main+0x794>
		{
			eeprom_write_byte ((EEPROM_ADMIN_ADDRESS+pass_counter),pass[pass_counter]);//write the status of pass as it is set
    28aa:	fe 01       	movw	r30, r28
    28ac:	ec 55       	subi	r30, 0x5C	; 92
    28ae:	fd 4f       	sbci	r31, 0xFD	; 253
    28b0:	80 81       	ld	r24, Z
    28b2:	88 2f       	mov	r24, r24
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	ac 01       	movw	r20, r24
    28b8:	40 5d       	subi	r20, 0xD0	; 208
    28ba:	5f 4f       	sbci	r21, 0xFF	; 255
    28bc:	fe 01       	movw	r30, r28
    28be:	ec 55       	subi	r30, 0x5C	; 92
    28c0:	fd 4f       	sbci	r31, 0xFD	; 253
    28c2:	80 81       	ld	r24, Z
    28c4:	28 2f       	mov	r18, r24
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	ce 01       	movw	r24, r28
    28ca:	84 55       	subi	r24, 0x54	; 84
    28cc:	9d 4f       	sbci	r25, 0xFD	; 253
    28ce:	fc 01       	movw	r30, r24
    28d0:	e2 0f       	add	r30, r18
    28d2:	f3 1f       	adc	r31, r19
    28d4:	20 81       	ld	r18, Z
    28d6:	ca 01       	movw	r24, r20
    28d8:	62 2f       	mov	r22, r18
    28da:	0e 94 ab 3d 	call	0x7b56	; 0x7b56 <__eewr_byte_m32>
			LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
			_delay_ms(100);//Halt the system for the given time in (ms)
			pass_counter++;//increase the characters count
		}
		//eeprom_write_block (EEPROM_ADMIN_ADDRESS,pass,PASS_SIZE);//save the entire password as a block to the EEPROM
		for(pass_counter=0;pass_counter<PASS_SIZE;pass_counter++)
    28de:	de 01       	movw	r26, r28
    28e0:	ac 55       	subi	r26, 0x5C	; 92
    28e2:	bd 4f       	sbci	r27, 0xFD	; 253
    28e4:	fe 01       	movw	r30, r28
    28e6:	ec 55       	subi	r30, 0x5C	; 92
    28e8:	fd 4f       	sbci	r31, 0xFD	; 253
    28ea:	80 81       	ld	r24, Z
    28ec:	8f 5f       	subi	r24, 0xFF	; 255
    28ee:	8c 93       	st	X, r24
    28f0:	fe 01       	movw	r30, r28
    28f2:	ec 55       	subi	r30, 0x5C	; 92
    28f4:	fd 4f       	sbci	r31, 0xFD	; 253
    28f6:	80 81       	ld	r24, Z
    28f8:	84 30       	cpi	r24, 0x04	; 4
    28fa:	b8 f2       	brcs	.-82     	; 0x28aa <main+0x74e>
		{
			eeprom_write_byte ((EEPROM_ADMIN_ADDRESS+pass_counter),pass[pass_counter]);//write the status of pass as it is set
		}
		eeprom_write_byte (ADMIN_PASS_STATUS_ADDRESS,PASS_SET);//write the status of pass as it is set
    28fc:	85 e0       	ldi	r24, 0x05	; 5
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	61 e0       	ldi	r22, 0x01	; 1
    2902:	0e 94 ab 3d 	call	0x7b56	; 0x7b56 <__eewr_byte_m32>
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    2906:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
		LCD_vSend_string("Pass Saved");// show pass saved message
    290a:	8d ea       	ldi	r24, 0xAD	; 173
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    2912:	fe 01       	movw	r30, r28
    2914:	eb 59       	subi	r30, 0x9B	; 155
    2916:	fd 4f       	sbci	r31, 0xFD	; 253
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	aa ef       	ldi	r26, 0xFA	; 250
    291e:	b3 e4       	ldi	r27, 0x43	; 67
    2920:	80 83       	st	Z, r24
    2922:	91 83       	std	Z+1, r25	; 0x01
    2924:	a2 83       	std	Z+2, r26	; 0x02
    2926:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2928:	8e 01       	movw	r16, r28
    292a:	0f 59       	subi	r16, 0x9F	; 159
    292c:	1d 4f       	sbci	r17, 0xFD	; 253
    292e:	fe 01       	movw	r30, r28
    2930:	eb 59       	subi	r30, 0x9B	; 155
    2932:	fd 4f       	sbci	r31, 0xFD	; 253
    2934:	60 81       	ld	r22, Z
    2936:	71 81       	ldd	r23, Z+1	; 0x01
    2938:	82 81       	ldd	r24, Z+2	; 0x02
    293a:	93 81       	ldd	r25, Z+3	; 0x03
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	4a ef       	ldi	r20, 0xFA	; 250
    2942:	54 e4       	ldi	r21, 0x44	; 68
    2944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	f8 01       	movw	r30, r16
    294e:	80 83       	st	Z, r24
    2950:	91 83       	std	Z+1, r25	; 0x01
    2952:	a2 83       	std	Z+2, r26	; 0x02
    2954:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2956:	fe 01       	movw	r30, r28
    2958:	ef 59       	subi	r30, 0x9F	; 159
    295a:	fd 4f       	sbci	r31, 0xFD	; 253
    295c:	60 81       	ld	r22, Z
    295e:	71 81       	ldd	r23, Z+1	; 0x01
    2960:	82 81       	ldd	r24, Z+2	; 0x02
    2962:	93 81       	ldd	r25, Z+3	; 0x03
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	40 e8       	ldi	r20, 0x80	; 128
    296a:	5f e3       	ldi	r21, 0x3F	; 63
    296c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2970:	88 23       	and	r24, r24
    2972:	44 f4       	brge	.+16     	; 0x2984 <main+0x828>
		__ticks = 1;
    2974:	fe 01       	movw	r30, r28
    2976:	e1 5a       	subi	r30, 0xA1	; 161
    2978:	fd 4f       	sbci	r31, 0xFD	; 253
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	91 83       	std	Z+1, r25	; 0x01
    2980:	80 83       	st	Z, r24
    2982:	64 c0       	rjmp	.+200    	; 0x2a4c <main+0x8f0>
	else if (__tmp > 65535)
    2984:	fe 01       	movw	r30, r28
    2986:	ef 59       	subi	r30, 0x9F	; 159
    2988:	fd 4f       	sbci	r31, 0xFD	; 253
    298a:	60 81       	ld	r22, Z
    298c:	71 81       	ldd	r23, Z+1	; 0x01
    298e:	82 81       	ldd	r24, Z+2	; 0x02
    2990:	93 81       	ldd	r25, Z+3	; 0x03
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	3f ef       	ldi	r19, 0xFF	; 255
    2996:	4f e7       	ldi	r20, 0x7F	; 127
    2998:	57 e4       	ldi	r21, 0x47	; 71
    299a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    299e:	18 16       	cp	r1, r24
    29a0:	0c f0       	brlt	.+2      	; 0x29a4 <main+0x848>
    29a2:	43 c0       	rjmp	.+134    	; 0x2a2a <main+0x8ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a4:	fe 01       	movw	r30, r28
    29a6:	eb 59       	subi	r30, 0x9B	; 155
    29a8:	fd 4f       	sbci	r31, 0xFD	; 253
    29aa:	60 81       	ld	r22, Z
    29ac:	71 81       	ldd	r23, Z+1	; 0x01
    29ae:	82 81       	ldd	r24, Z+2	; 0x02
    29b0:	93 81       	ldd	r25, Z+3	; 0x03
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	40 e2       	ldi	r20, 0x20	; 32
    29b8:	51 e4       	ldi	r21, 0x41	; 65
    29ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	8e 01       	movw	r16, r28
    29c4:	01 5a       	subi	r16, 0xA1	; 161
    29c6:	1d 4f       	sbci	r17, 0xFD	; 253
    29c8:	bc 01       	movw	r22, r24
    29ca:	cd 01       	movw	r24, r26
    29cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	f8 01       	movw	r30, r16
    29d6:	91 83       	std	Z+1, r25	; 0x01
    29d8:	80 83       	st	Z, r24
    29da:	1f c0       	rjmp	.+62     	; 0x2a1a <main+0x8be>
    29dc:	fe 01       	movw	r30, r28
    29de:	e3 5a       	subi	r30, 0xA3	; 163
    29e0:	fd 4f       	sbci	r31, 0xFD	; 253
    29e2:	88 ec       	ldi	r24, 0xC8	; 200
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	91 83       	std	Z+1, r25	; 0x01
    29e8:	80 83       	st	Z, r24
    29ea:	fe 01       	movw	r30, r28
    29ec:	e3 5a       	subi	r30, 0xA3	; 163
    29ee:	fd 4f       	sbci	r31, 0xFD	; 253
    29f0:	80 81       	ld	r24, Z
    29f2:	91 81       	ldd	r25, Z+1	; 0x01
    29f4:	01 97       	sbiw	r24, 0x01	; 1
    29f6:	f1 f7       	brne	.-4      	; 0x29f4 <main+0x898>
    29f8:	fe 01       	movw	r30, r28
    29fa:	e3 5a       	subi	r30, 0xA3	; 163
    29fc:	fd 4f       	sbci	r31, 0xFD	; 253
    29fe:	91 83       	std	Z+1, r25	; 0x01
    2a00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a02:	de 01       	movw	r26, r28
    2a04:	a1 5a       	subi	r26, 0xA1	; 161
    2a06:	bd 4f       	sbci	r27, 0xFD	; 253
    2a08:	fe 01       	movw	r30, r28
    2a0a:	e1 5a       	subi	r30, 0xA1	; 161
    2a0c:	fd 4f       	sbci	r31, 0xFD	; 253
    2a0e:	80 81       	ld	r24, Z
    2a10:	91 81       	ldd	r25, Z+1	; 0x01
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	11 96       	adiw	r26, 0x01	; 1
    2a16:	9c 93       	st	X, r25
    2a18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	e1 5a       	subi	r30, 0xA1	; 161
    2a1e:	fd 4f       	sbci	r31, 0xFD	; 253
    2a20:	80 81       	ld	r24, Z
    2a22:	91 81       	ldd	r25, Z+1	; 0x01
    2a24:	00 97       	sbiw	r24, 0x00	; 0
    2a26:	d1 f6       	brne	.-76     	; 0x29dc <main+0x880>
    2a28:	27 c0       	rjmp	.+78     	; 0x2a78 <main+0x91c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2a:	8e 01       	movw	r16, r28
    2a2c:	01 5a       	subi	r16, 0xA1	; 161
    2a2e:	1d 4f       	sbci	r17, 0xFD	; 253
    2a30:	fe 01       	movw	r30, r28
    2a32:	ef 59       	subi	r30, 0x9F	; 159
    2a34:	fd 4f       	sbci	r31, 0xFD	; 253
    2a36:	60 81       	ld	r22, Z
    2a38:	71 81       	ldd	r23, Z+1	; 0x01
    2a3a:	82 81       	ldd	r24, Z+2	; 0x02
    2a3c:	93 81       	ldd	r25, Z+3	; 0x03
    2a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	f8 01       	movw	r30, r16
    2a48:	91 83       	std	Z+1, r25	; 0x01
    2a4a:	80 83       	st	Z, r24
    2a4c:	de 01       	movw	r26, r28
    2a4e:	a5 5a       	subi	r26, 0xA5	; 165
    2a50:	bd 4f       	sbci	r27, 0xFD	; 253
    2a52:	fe 01       	movw	r30, r28
    2a54:	e1 5a       	subi	r30, 0xA1	; 161
    2a56:	fd 4f       	sbci	r31, 0xFD	; 253
    2a58:	80 81       	ld	r24, Z
    2a5a:	91 81       	ldd	r25, Z+1	; 0x01
    2a5c:	8d 93       	st	X+, r24
    2a5e:	9c 93       	st	X, r25
    2a60:	fe 01       	movw	r30, r28
    2a62:	e5 5a       	subi	r30, 0xA5	; 165
    2a64:	fd 4f       	sbci	r31, 0xFD	; 253
    2a66:	80 81       	ld	r24, Z
    2a68:	91 81       	ldd	r25, Z+1	; 0x01
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	f1 f7       	brne	.-4      	; 0x2a6a <main+0x90e>
    2a6e:	fe 01       	movw	r30, r28
    2a70:	e5 5a       	subi	r30, 0xA5	; 165
    2a72:	fd 4f       	sbci	r31, 0xFD	; 253
    2a74:	91 83       	std	Z+1, r25	; 0x01
    2a76:	80 83       	st	Z, r24
		_delay_ms(500);//Halt the system for the given time in (ms)
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    2a78:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>

		/********************************* setting guest password **********************************************/
		pass_counter=0;//reset password counter which count the characters of the pass
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	ec 55       	subi	r30, 0x5C	; 92
    2a80:	fd 4f       	sbci	r31, 0xFD	; 253
    2a82:	10 82       	st	Z, r1
		LCD_vSend_string("Set Guest Pass");//printing the set admin password menu
    2a84:	88 eb       	ldi	r24, 0xB8	; 184
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
		LCD_movecursor(2,1);
    2a8c:	82 e0       	ldi	r24, 0x02	; 2
    2a8e:	61 e0       	ldi	r22, 0x01	; 1
    2a90:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
		LCD_vSend_string("Guest Pass:");
    2a94:	87 ec       	ldi	r24, 0xC7	; 199
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    2a9c:	a5 c1       	rjmp	.+842    	; 0x2de8 <main+0xc8c>
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	eb 55       	subi	r30, 0x5B	; 91
    2aa2:	fd 4f       	sbci	r31, 0xFD	; 253
    2aa4:	8f ef       	ldi	r24, 0xFF	; 255
    2aa6:	80 83       	st	Z, r24
    2aa8:	06 c0       	rjmp	.+12     	; 0x2ab6 <main+0x95a>
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
    2aaa:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <keypad_u8check_press>
    2aae:	fe 01       	movw	r30, r28
    2ab0:	eb 55       	subi	r30, 0x5B	; 91
    2ab2:	fd 4f       	sbci	r31, 0xFD	; 253
    2ab4:	80 83       	st	Z, r24
		LCD_movecursor(2,1);
		LCD_vSend_string("Guest Pass:");
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	eb 55       	subi	r30, 0x5B	; 91
    2aba:	fd 4f       	sbci	r31, 0xFD	; 253
    2abc:	80 81       	ld	r24, Z
    2abe:	8f 3f       	cpi	r24, 0xFF	; 255
    2ac0:	a1 f3       	breq	.-24     	; 0x2aaa <main+0x94e>
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
			}

			pass[pass_counter]=key_pressed;//add the entered character to the pass array
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	ec 55       	subi	r30, 0x5C	; 92
    2ac6:	fd 4f       	sbci	r31, 0xFD	; 253
    2ac8:	80 81       	ld	r24, Z
    2aca:	28 2f       	mov	r18, r24
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	ce 01       	movw	r24, r28
    2ad0:	84 55       	subi	r24, 0x54	; 84
    2ad2:	9d 4f       	sbci	r25, 0xFD	; 253
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	a2 0f       	add	r26, r18
    2ad8:	b3 1f       	adc	r27, r19
    2ada:	fe 01       	movw	r30, r28
    2adc:	eb 55       	subi	r30, 0x5B	; 91
    2ade:	fd 4f       	sbci	r31, 0xFD	; 253
    2ae0:	80 81       	ld	r24, Z
    2ae2:	8c 93       	st	X, r24
			LCD_vSend_char(key_pressed);//print the entered character
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	eb 55       	subi	r30, 0x5B	; 91
    2ae8:	fd 4f       	sbci	r31, 0xFD	; 253
    2aea:	80 81       	ld	r24, Z
    2aec:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
    2af0:	fe 01       	movw	r30, r28
    2af2:	e9 5a       	subi	r30, 0xA9	; 169
    2af4:	fd 4f       	sbci	r31, 0xFD	; 253
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	a6 e9       	ldi	r26, 0x96	; 150
    2afc:	b3 e4       	ldi	r27, 0x43	; 67
    2afe:	80 83       	st	Z, r24
    2b00:	91 83       	std	Z+1, r25	; 0x01
    2b02:	a2 83       	std	Z+2, r26	; 0x02
    2b04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b06:	8e 01       	movw	r16, r28
    2b08:	0d 5a       	subi	r16, 0xAD	; 173
    2b0a:	1d 4f       	sbci	r17, 0xFD	; 253
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	e9 5a       	subi	r30, 0xA9	; 169
    2b10:	fd 4f       	sbci	r31, 0xFD	; 253
    2b12:	60 81       	ld	r22, Z
    2b14:	71 81       	ldd	r23, Z+1	; 0x01
    2b16:	82 81       	ldd	r24, Z+2	; 0x02
    2b18:	93 81       	ldd	r25, Z+3	; 0x03
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	4a ef       	ldi	r20, 0xFA	; 250
    2b20:	54 e4       	ldi	r21, 0x44	; 68
    2b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	f8 01       	movw	r30, r16
    2b2c:	80 83       	st	Z, r24
    2b2e:	91 83       	std	Z+1, r25	; 0x01
    2b30:	a2 83       	std	Z+2, r26	; 0x02
    2b32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b34:	fe 01       	movw	r30, r28
    2b36:	ed 5a       	subi	r30, 0xAD	; 173
    2b38:	fd 4f       	sbci	r31, 0xFD	; 253
    2b3a:	60 81       	ld	r22, Z
    2b3c:	71 81       	ldd	r23, Z+1	; 0x01
    2b3e:	82 81       	ldd	r24, Z+2	; 0x02
    2b40:	93 81       	ldd	r25, Z+3	; 0x03
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	40 e8       	ldi	r20, 0x80	; 128
    2b48:	5f e3       	ldi	r21, 0x3F	; 63
    2b4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b4e:	88 23       	and	r24, r24
    2b50:	44 f4       	brge	.+16     	; 0x2b62 <main+0xa06>
		__ticks = 1;
    2b52:	fe 01       	movw	r30, r28
    2b54:	ef 5a       	subi	r30, 0xAF	; 175
    2b56:	fd 4f       	sbci	r31, 0xFD	; 253
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	91 83       	std	Z+1, r25	; 0x01
    2b5e:	80 83       	st	Z, r24
    2b60:	64 c0       	rjmp	.+200    	; 0x2c2a <main+0xace>
	else if (__tmp > 65535)
    2b62:	fe 01       	movw	r30, r28
    2b64:	ed 5a       	subi	r30, 0xAD	; 173
    2b66:	fd 4f       	sbci	r31, 0xFD	; 253
    2b68:	60 81       	ld	r22, Z
    2b6a:	71 81       	ldd	r23, Z+1	; 0x01
    2b6c:	82 81       	ldd	r24, Z+2	; 0x02
    2b6e:	93 81       	ldd	r25, Z+3	; 0x03
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	3f ef       	ldi	r19, 0xFF	; 255
    2b74:	4f e7       	ldi	r20, 0x7F	; 127
    2b76:	57 e4       	ldi	r21, 0x47	; 71
    2b78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b7c:	18 16       	cp	r1, r24
    2b7e:	0c f0       	brlt	.+2      	; 0x2b82 <main+0xa26>
    2b80:	43 c0       	rjmp	.+134    	; 0x2c08 <main+0xaac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b82:	fe 01       	movw	r30, r28
    2b84:	e9 5a       	subi	r30, 0xA9	; 169
    2b86:	fd 4f       	sbci	r31, 0xFD	; 253
    2b88:	60 81       	ld	r22, Z
    2b8a:	71 81       	ldd	r23, Z+1	; 0x01
    2b8c:	82 81       	ldd	r24, Z+2	; 0x02
    2b8e:	93 81       	ldd	r25, Z+3	; 0x03
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	40 e2       	ldi	r20, 0x20	; 32
    2b96:	51 e4       	ldi	r21, 0x41	; 65
    2b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	8e 01       	movw	r16, r28
    2ba2:	0f 5a       	subi	r16, 0xAF	; 175
    2ba4:	1d 4f       	sbci	r17, 0xFD	; 253
    2ba6:	bc 01       	movw	r22, r24
    2ba8:	cd 01       	movw	r24, r26
    2baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	f8 01       	movw	r30, r16
    2bb4:	91 83       	std	Z+1, r25	; 0x01
    2bb6:	80 83       	st	Z, r24
    2bb8:	1f c0       	rjmp	.+62     	; 0x2bf8 <main+0xa9c>
    2bba:	fe 01       	movw	r30, r28
    2bbc:	e1 5b       	subi	r30, 0xB1	; 177
    2bbe:	fd 4f       	sbci	r31, 0xFD	; 253
    2bc0:	88 ec       	ldi	r24, 0xC8	; 200
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	91 83       	std	Z+1, r25	; 0x01
    2bc6:	80 83       	st	Z, r24
    2bc8:	fe 01       	movw	r30, r28
    2bca:	e1 5b       	subi	r30, 0xB1	; 177
    2bcc:	fd 4f       	sbci	r31, 0xFD	; 253
    2bce:	80 81       	ld	r24, Z
    2bd0:	91 81       	ldd	r25, Z+1	; 0x01
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	f1 f7       	brne	.-4      	; 0x2bd2 <main+0xa76>
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	e1 5b       	subi	r30, 0xB1	; 177
    2bda:	fd 4f       	sbci	r31, 0xFD	; 253
    2bdc:	91 83       	std	Z+1, r25	; 0x01
    2bde:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be0:	de 01       	movw	r26, r28
    2be2:	af 5a       	subi	r26, 0xAF	; 175
    2be4:	bd 4f       	sbci	r27, 0xFD	; 253
    2be6:	fe 01       	movw	r30, r28
    2be8:	ef 5a       	subi	r30, 0xAF	; 175
    2bea:	fd 4f       	sbci	r31, 0xFD	; 253
    2bec:	80 81       	ld	r24, Z
    2bee:	91 81       	ldd	r25, Z+1	; 0x01
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	11 96       	adiw	r26, 0x01	; 1
    2bf4:	9c 93       	st	X, r25
    2bf6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	ef 5a       	subi	r30, 0xAF	; 175
    2bfc:	fd 4f       	sbci	r31, 0xFD	; 253
    2bfe:	80 81       	ld	r24, Z
    2c00:	91 81       	ldd	r25, Z+1	; 0x01
    2c02:	00 97       	sbiw	r24, 0x00	; 0
    2c04:	d1 f6       	brne	.-76     	; 0x2bba <main+0xa5e>
    2c06:	27 c0       	rjmp	.+78     	; 0x2c56 <main+0xafa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c08:	8e 01       	movw	r16, r28
    2c0a:	0f 5a       	subi	r16, 0xAF	; 175
    2c0c:	1d 4f       	sbci	r17, 0xFD	; 253
    2c0e:	fe 01       	movw	r30, r28
    2c10:	ed 5a       	subi	r30, 0xAD	; 173
    2c12:	fd 4f       	sbci	r31, 0xFD	; 253
    2c14:	60 81       	ld	r22, Z
    2c16:	71 81       	ldd	r23, Z+1	; 0x01
    2c18:	82 81       	ldd	r24, Z+2	; 0x02
    2c1a:	93 81       	ldd	r25, Z+3	; 0x03
    2c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	f8 01       	movw	r30, r16
    2c26:	91 83       	std	Z+1, r25	; 0x01
    2c28:	80 83       	st	Z, r24
    2c2a:	de 01       	movw	r26, r28
    2c2c:	a3 5b       	subi	r26, 0xB3	; 179
    2c2e:	bd 4f       	sbci	r27, 0xFD	; 253
    2c30:	fe 01       	movw	r30, r28
    2c32:	ef 5a       	subi	r30, 0xAF	; 175
    2c34:	fd 4f       	sbci	r31, 0xFD	; 253
    2c36:	80 81       	ld	r24, Z
    2c38:	91 81       	ldd	r25, Z+1	; 0x01
    2c3a:	8d 93       	st	X+, r24
    2c3c:	9c 93       	st	X, r25
    2c3e:	fe 01       	movw	r30, r28
    2c40:	e3 5b       	subi	r30, 0xB3	; 179
    2c42:	fd 4f       	sbci	r31, 0xFD	; 253
    2c44:	80 81       	ld	r24, Z
    2c46:	91 81       	ldd	r25, Z+1	; 0x01
    2c48:	01 97       	sbiw	r24, 0x01	; 1
    2c4a:	f1 f7       	brne	.-4      	; 0x2c48 <main+0xaec>
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	e3 5b       	subi	r30, 0xB3	; 179
    2c50:	fd 4f       	sbci	r31, 0xFD	; 253
    2c52:	91 83       	std	Z+1, r25	; 0x01
    2c54:	80 83       	st	Z, r24
			_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
			LCD_movecursor(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
    2c56:	fe 01       	movw	r30, r28
    2c58:	ec 55       	subi	r30, 0x5C	; 92
    2c5a:	fd 4f       	sbci	r31, 0xFD	; 253
    2c5c:	80 81       	ld	r24, Z
    2c5e:	98 2f       	mov	r25, r24
    2c60:	94 5f       	subi	r25, 0xF4	; 244
    2c62:	82 e0       	ldi	r24, 0x02	; 2
    2c64:	69 2f       	mov	r22, r25
    2c66:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
			LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
    2c6a:	8a e2       	ldi	r24, 0x2A	; 42
    2c6c:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
    2c70:	fe 01       	movw	r30, r28
    2c72:	e7 5b       	subi	r30, 0xB7	; 183
    2c74:	fd 4f       	sbci	r31, 0xFD	; 253
    2c76:	80 e0       	ldi	r24, 0x00	; 0
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	a8 ec       	ldi	r26, 0xC8	; 200
    2c7c:	b2 e4       	ldi	r27, 0x42	; 66
    2c7e:	80 83       	st	Z, r24
    2c80:	91 83       	std	Z+1, r25	; 0x01
    2c82:	a2 83       	std	Z+2, r26	; 0x02
    2c84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c86:	8e 01       	movw	r16, r28
    2c88:	0b 5b       	subi	r16, 0xBB	; 187
    2c8a:	1d 4f       	sbci	r17, 0xFD	; 253
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	e7 5b       	subi	r30, 0xB7	; 183
    2c90:	fd 4f       	sbci	r31, 0xFD	; 253
    2c92:	60 81       	ld	r22, Z
    2c94:	71 81       	ldd	r23, Z+1	; 0x01
    2c96:	82 81       	ldd	r24, Z+2	; 0x02
    2c98:	93 81       	ldd	r25, Z+3	; 0x03
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	4a ef       	ldi	r20, 0xFA	; 250
    2ca0:	54 e4       	ldi	r21, 0x44	; 68
    2ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	f8 01       	movw	r30, r16
    2cac:	80 83       	st	Z, r24
    2cae:	91 83       	std	Z+1, r25	; 0x01
    2cb0:	a2 83       	std	Z+2, r26	; 0x02
    2cb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	eb 5b       	subi	r30, 0xBB	; 187
    2cb8:	fd 4f       	sbci	r31, 0xFD	; 253
    2cba:	60 81       	ld	r22, Z
    2cbc:	71 81       	ldd	r23, Z+1	; 0x01
    2cbe:	82 81       	ldd	r24, Z+2	; 0x02
    2cc0:	93 81       	ldd	r25, Z+3	; 0x03
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	40 e8       	ldi	r20, 0x80	; 128
    2cc8:	5f e3       	ldi	r21, 0x3F	; 63
    2cca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cce:	88 23       	and	r24, r24
    2cd0:	44 f4       	brge	.+16     	; 0x2ce2 <main+0xb86>
		__ticks = 1;
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	ed 5b       	subi	r30, 0xBD	; 189
    2cd6:	fd 4f       	sbci	r31, 0xFD	; 253
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	91 83       	std	Z+1, r25	; 0x01
    2cde:	80 83       	st	Z, r24
    2ce0:	64 c0       	rjmp	.+200    	; 0x2daa <main+0xc4e>
	else if (__tmp > 65535)
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	eb 5b       	subi	r30, 0xBB	; 187
    2ce6:	fd 4f       	sbci	r31, 0xFD	; 253
    2ce8:	60 81       	ld	r22, Z
    2cea:	71 81       	ldd	r23, Z+1	; 0x01
    2cec:	82 81       	ldd	r24, Z+2	; 0x02
    2cee:	93 81       	ldd	r25, Z+3	; 0x03
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	3f ef       	ldi	r19, 0xFF	; 255
    2cf4:	4f e7       	ldi	r20, 0x7F	; 127
    2cf6:	57 e4       	ldi	r21, 0x47	; 71
    2cf8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cfc:	18 16       	cp	r1, r24
    2cfe:	0c f0       	brlt	.+2      	; 0x2d02 <main+0xba6>
    2d00:	43 c0       	rjmp	.+134    	; 0x2d88 <main+0xc2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d02:	fe 01       	movw	r30, r28
    2d04:	e7 5b       	subi	r30, 0xB7	; 183
    2d06:	fd 4f       	sbci	r31, 0xFD	; 253
    2d08:	60 81       	ld	r22, Z
    2d0a:	71 81       	ldd	r23, Z+1	; 0x01
    2d0c:	82 81       	ldd	r24, Z+2	; 0x02
    2d0e:	93 81       	ldd	r25, Z+3	; 0x03
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	40 e2       	ldi	r20, 0x20	; 32
    2d16:	51 e4       	ldi	r21, 0x41	; 65
    2d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	8e 01       	movw	r16, r28
    2d22:	0d 5b       	subi	r16, 0xBD	; 189
    2d24:	1d 4f       	sbci	r17, 0xFD	; 253
    2d26:	bc 01       	movw	r22, r24
    2d28:	cd 01       	movw	r24, r26
    2d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	f8 01       	movw	r30, r16
    2d34:	91 83       	std	Z+1, r25	; 0x01
    2d36:	80 83       	st	Z, r24
    2d38:	1f c0       	rjmp	.+62     	; 0x2d78 <main+0xc1c>
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	ef 5b       	subi	r30, 0xBF	; 191
    2d3e:	fd 4f       	sbci	r31, 0xFD	; 253
    2d40:	88 ec       	ldi	r24, 0xC8	; 200
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	91 83       	std	Z+1, r25	; 0x01
    2d46:	80 83       	st	Z, r24
    2d48:	fe 01       	movw	r30, r28
    2d4a:	ef 5b       	subi	r30, 0xBF	; 191
    2d4c:	fd 4f       	sbci	r31, 0xFD	; 253
    2d4e:	80 81       	ld	r24, Z
    2d50:	91 81       	ldd	r25, Z+1	; 0x01
    2d52:	01 97       	sbiw	r24, 0x01	; 1
    2d54:	f1 f7       	brne	.-4      	; 0x2d52 <main+0xbf6>
    2d56:	fe 01       	movw	r30, r28
    2d58:	ef 5b       	subi	r30, 0xBF	; 191
    2d5a:	fd 4f       	sbci	r31, 0xFD	; 253
    2d5c:	91 83       	std	Z+1, r25	; 0x01
    2d5e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d60:	de 01       	movw	r26, r28
    2d62:	ad 5b       	subi	r26, 0xBD	; 189
    2d64:	bd 4f       	sbci	r27, 0xFD	; 253
    2d66:	fe 01       	movw	r30, r28
    2d68:	ed 5b       	subi	r30, 0xBD	; 189
    2d6a:	fd 4f       	sbci	r31, 0xFD	; 253
    2d6c:	80 81       	ld	r24, Z
    2d6e:	91 81       	ldd	r25, Z+1	; 0x01
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	11 96       	adiw	r26, 0x01	; 1
    2d74:	9c 93       	st	X, r25
    2d76:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d78:	fe 01       	movw	r30, r28
    2d7a:	ed 5b       	subi	r30, 0xBD	; 189
    2d7c:	fd 4f       	sbci	r31, 0xFD	; 253
    2d7e:	80 81       	ld	r24, Z
    2d80:	91 81       	ldd	r25, Z+1	; 0x01
    2d82:	00 97       	sbiw	r24, 0x00	; 0
    2d84:	d1 f6       	brne	.-76     	; 0x2d3a <main+0xbde>
    2d86:	27 c0       	rjmp	.+78     	; 0x2dd6 <main+0xc7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d88:	8e 01       	movw	r16, r28
    2d8a:	0d 5b       	subi	r16, 0xBD	; 189
    2d8c:	1d 4f       	sbci	r17, 0xFD	; 253
    2d8e:	fe 01       	movw	r30, r28
    2d90:	eb 5b       	subi	r30, 0xBB	; 187
    2d92:	fd 4f       	sbci	r31, 0xFD	; 253
    2d94:	60 81       	ld	r22, Z
    2d96:	71 81       	ldd	r23, Z+1	; 0x01
    2d98:	82 81       	ldd	r24, Z+2	; 0x02
    2d9a:	93 81       	ldd	r25, Z+3	; 0x03
    2d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	f8 01       	movw	r30, r16
    2da6:	91 83       	std	Z+1, r25	; 0x01
    2da8:	80 83       	st	Z, r24
    2daa:	de 01       	movw	r26, r28
    2dac:	a1 5c       	subi	r26, 0xC1	; 193
    2dae:	bd 4f       	sbci	r27, 0xFD	; 253
    2db0:	fe 01       	movw	r30, r28
    2db2:	ed 5b       	subi	r30, 0xBD	; 189
    2db4:	fd 4f       	sbci	r31, 0xFD	; 253
    2db6:	80 81       	ld	r24, Z
    2db8:	91 81       	ldd	r25, Z+1	; 0x01
    2dba:	8d 93       	st	X+, r24
    2dbc:	9c 93       	st	X, r25
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	e1 5c       	subi	r30, 0xC1	; 193
    2dc2:	fd 4f       	sbci	r31, 0xFD	; 253
    2dc4:	80 81       	ld	r24, Z
    2dc6:	91 81       	ldd	r25, Z+1	; 0x01
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	f1 f7       	brne	.-4      	; 0x2dc8 <main+0xc6c>
    2dcc:	fe 01       	movw	r30, r28
    2dce:	e1 5c       	subi	r30, 0xC1	; 193
    2dd0:	fd 4f       	sbci	r31, 0xFD	; 253
    2dd2:	91 83       	std	Z+1, r25	; 0x01
    2dd4:	80 83       	st	Z, r24
			_delay_ms(100);//Halt the system for the given time in (ms)
			pass_counter++;//increase the characters count
    2dd6:	de 01       	movw	r26, r28
    2dd8:	ac 55       	subi	r26, 0x5C	; 92
    2dda:	bd 4f       	sbci	r27, 0xFD	; 253
    2ddc:	fe 01       	movw	r30, r28
    2dde:	ec 55       	subi	r30, 0x5C	; 92
    2de0:	fd 4f       	sbci	r31, 0xFD	; 253
    2de2:	80 81       	ld	r24, Z
    2de4:	8f 5f       	subi	r24, 0xFF	; 255
    2de6:	8c 93       	st	X, r24
		/********************************* setting guest password **********************************************/
		pass_counter=0;//reset password counter which count the characters of the pass
		LCD_vSend_string("Set Guest Pass");//printing the set admin password menu
		LCD_movecursor(2,1);
		LCD_vSend_string("Guest Pass:");
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
    2de8:	fe 01       	movw	r30, r28
    2dea:	ec 55       	subi	r30, 0x5C	; 92
    2dec:	fd 4f       	sbci	r31, 0xFD	; 253
    2dee:	80 81       	ld	r24, Z
    2df0:	84 30       	cpi	r24, 0x04	; 4
    2df2:	08 f4       	brcc	.+2      	; 0x2df6 <main+0xc9a>
    2df4:	54 ce       	rjmp	.-856    	; 0x2a9e <main+0x942>
			LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
			_delay_ms(100);//Halt the system for the given time in (ms)
			pass_counter++;//increase the characters count
		}
		//eeprom_write_block (EEPROM_GUEST_ADDRESS,pass,PASS_SIZE);//save the entire password as a block to the EEPROM
		for(pass_counter=0;pass_counter<PASS_SIZE;pass_counter++)
    2df6:	fe 01       	movw	r30, r28
    2df8:	ec 55       	subi	r30, 0x5C	; 92
    2dfa:	fd 4f       	sbci	r31, 0xFD	; 253
    2dfc:	10 82       	st	Z, r1
    2dfe:	23 c0       	rjmp	.+70     	; 0x2e46 <main+0xcea>
		{
			eeprom_write_byte ((EEPROM_GUEST_ADDRESS+pass_counter),pass[pass_counter]);//write the status of pass as it is set
    2e00:	fe 01       	movw	r30, r28
    2e02:	ec 55       	subi	r30, 0x5C	; 92
    2e04:	fd 4f       	sbci	r31, 0xFD	; 253
    2e06:	80 81       	ld	r24, Z
    2e08:	88 2f       	mov	r24, r24
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	ac 01       	movw	r20, r24
    2e0e:	40 5b       	subi	r20, 0xB0	; 176
    2e10:	5f 4f       	sbci	r21, 0xFF	; 255
    2e12:	fe 01       	movw	r30, r28
    2e14:	ec 55       	subi	r30, 0x5C	; 92
    2e16:	fd 4f       	sbci	r31, 0xFD	; 253
    2e18:	80 81       	ld	r24, Z
    2e1a:	28 2f       	mov	r18, r24
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	ce 01       	movw	r24, r28
    2e20:	84 55       	subi	r24, 0x54	; 84
    2e22:	9d 4f       	sbci	r25, 0xFD	; 253
    2e24:	fc 01       	movw	r30, r24
    2e26:	e2 0f       	add	r30, r18
    2e28:	f3 1f       	adc	r31, r19
    2e2a:	20 81       	ld	r18, Z
    2e2c:	ca 01       	movw	r24, r20
    2e2e:	62 2f       	mov	r22, r18
    2e30:	0e 94 ab 3d 	call	0x7b56	; 0x7b56 <__eewr_byte_m32>
			LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
			_delay_ms(100);//Halt the system for the given time in (ms)
			pass_counter++;//increase the characters count
		}
		//eeprom_write_block (EEPROM_GUEST_ADDRESS,pass,PASS_SIZE);//save the entire password as a block to the EEPROM
		for(pass_counter=0;pass_counter<PASS_SIZE;pass_counter++)
    2e34:	de 01       	movw	r26, r28
    2e36:	ac 55       	subi	r26, 0x5C	; 92
    2e38:	bd 4f       	sbci	r27, 0xFD	; 253
    2e3a:	fe 01       	movw	r30, r28
    2e3c:	ec 55       	subi	r30, 0x5C	; 92
    2e3e:	fd 4f       	sbci	r31, 0xFD	; 253
    2e40:	80 81       	ld	r24, Z
    2e42:	8f 5f       	subi	r24, 0xFF	; 255
    2e44:	8c 93       	st	X, r24
    2e46:	fe 01       	movw	r30, r28
    2e48:	ec 55       	subi	r30, 0x5C	; 92
    2e4a:	fd 4f       	sbci	r31, 0xFD	; 253
    2e4c:	80 81       	ld	r24, Z
    2e4e:	84 30       	cpi	r24, 0x04	; 4
    2e50:	b8 f2       	brcs	.-82     	; 0x2e00 <main+0xca4>
		{
			eeprom_write_byte ((EEPROM_GUEST_ADDRESS+pass_counter),pass[pass_counter]);//write the status of pass as it is set
		}
		eeprom_write_byte (GUEST_PASS_STATUS_ADDRESS,PASS_SET);//write the status of pass as it is set
    2e52:	80 e2       	ldi	r24, 0x20	; 32
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	61 e0       	ldi	r22, 0x01	; 1
    2e58:	0e 94 ab 3d 	call	0x7b56	; 0x7b56 <__eewr_byte_m32>
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    2e5c:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
		LCD_vSend_string("Pass Saved");//move the lcd cursor to the previous location
    2e60:	8d ea       	ldi	r24, 0xAD	; 173
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    2e68:	fe 01       	movw	r30, r28
    2e6a:	e5 5c       	subi	r30, 0xC5	; 197
    2e6c:	fd 4f       	sbci	r31, 0xFD	; 253
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	aa ef       	ldi	r26, 0xFA	; 250
    2e74:	b3 e4       	ldi	r27, 0x43	; 67
    2e76:	80 83       	st	Z, r24
    2e78:	91 83       	std	Z+1, r25	; 0x01
    2e7a:	a2 83       	std	Z+2, r26	; 0x02
    2e7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7e:	8e 01       	movw	r16, r28
    2e80:	09 5c       	subi	r16, 0xC9	; 201
    2e82:	1d 4f       	sbci	r17, 0xFD	; 253
    2e84:	fe 01       	movw	r30, r28
    2e86:	e5 5c       	subi	r30, 0xC5	; 197
    2e88:	fd 4f       	sbci	r31, 0xFD	; 253
    2e8a:	60 81       	ld	r22, Z
    2e8c:	71 81       	ldd	r23, Z+1	; 0x01
    2e8e:	82 81       	ldd	r24, Z+2	; 0x02
    2e90:	93 81       	ldd	r25, Z+3	; 0x03
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	4a ef       	ldi	r20, 0xFA	; 250
    2e98:	54 e4       	ldi	r21, 0x44	; 68
    2e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	f8 01       	movw	r30, r16
    2ea4:	80 83       	st	Z, r24
    2ea6:	91 83       	std	Z+1, r25	; 0x01
    2ea8:	a2 83       	std	Z+2, r26	; 0x02
    2eaa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2eac:	fe 01       	movw	r30, r28
    2eae:	e9 5c       	subi	r30, 0xC9	; 201
    2eb0:	fd 4f       	sbci	r31, 0xFD	; 253
    2eb2:	60 81       	ld	r22, Z
    2eb4:	71 81       	ldd	r23, Z+1	; 0x01
    2eb6:	82 81       	ldd	r24, Z+2	; 0x02
    2eb8:	93 81       	ldd	r25, Z+3	; 0x03
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e8       	ldi	r20, 0x80	; 128
    2ec0:	5f e3       	ldi	r21, 0x3F	; 63
    2ec2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ec6:	88 23       	and	r24, r24
    2ec8:	44 f4       	brge	.+16     	; 0x2eda <main+0xd7e>
		__ticks = 1;
    2eca:	fe 01       	movw	r30, r28
    2ecc:	eb 5c       	subi	r30, 0xCB	; 203
    2ece:	fd 4f       	sbci	r31, 0xFD	; 253
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	91 83       	std	Z+1, r25	; 0x01
    2ed6:	80 83       	st	Z, r24
    2ed8:	64 c0       	rjmp	.+200    	; 0x2fa2 <main+0xe46>
	else if (__tmp > 65535)
    2eda:	fe 01       	movw	r30, r28
    2edc:	e9 5c       	subi	r30, 0xC9	; 201
    2ede:	fd 4f       	sbci	r31, 0xFD	; 253
    2ee0:	60 81       	ld	r22, Z
    2ee2:	71 81       	ldd	r23, Z+1	; 0x01
    2ee4:	82 81       	ldd	r24, Z+2	; 0x02
    2ee6:	93 81       	ldd	r25, Z+3	; 0x03
    2ee8:	20 e0       	ldi	r18, 0x00	; 0
    2eea:	3f ef       	ldi	r19, 0xFF	; 255
    2eec:	4f e7       	ldi	r20, 0x7F	; 127
    2eee:	57 e4       	ldi	r21, 0x47	; 71
    2ef0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ef4:	18 16       	cp	r1, r24
    2ef6:	0c f0       	brlt	.+2      	; 0x2efa <main+0xd9e>
    2ef8:	43 c0       	rjmp	.+134    	; 0x2f80 <main+0xe24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2efa:	fe 01       	movw	r30, r28
    2efc:	e5 5c       	subi	r30, 0xC5	; 197
    2efe:	fd 4f       	sbci	r31, 0xFD	; 253
    2f00:	60 81       	ld	r22, Z
    2f02:	71 81       	ldd	r23, Z+1	; 0x01
    2f04:	82 81       	ldd	r24, Z+2	; 0x02
    2f06:	93 81       	ldd	r25, Z+3	; 0x03
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	40 e2       	ldi	r20, 0x20	; 32
    2f0e:	51 e4       	ldi	r21, 0x41	; 65
    2f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	8e 01       	movw	r16, r28
    2f1a:	0b 5c       	subi	r16, 0xCB	; 203
    2f1c:	1d 4f       	sbci	r17, 0xFD	; 253
    2f1e:	bc 01       	movw	r22, r24
    2f20:	cd 01       	movw	r24, r26
    2f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f26:	dc 01       	movw	r26, r24
    2f28:	cb 01       	movw	r24, r22
    2f2a:	f8 01       	movw	r30, r16
    2f2c:	91 83       	std	Z+1, r25	; 0x01
    2f2e:	80 83       	st	Z, r24
    2f30:	1f c0       	rjmp	.+62     	; 0x2f70 <main+0xe14>
    2f32:	fe 01       	movw	r30, r28
    2f34:	ed 5c       	subi	r30, 0xCD	; 205
    2f36:	fd 4f       	sbci	r31, 0xFD	; 253
    2f38:	88 ec       	ldi	r24, 0xC8	; 200
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	91 83       	std	Z+1, r25	; 0x01
    2f3e:	80 83       	st	Z, r24
    2f40:	fe 01       	movw	r30, r28
    2f42:	ed 5c       	subi	r30, 0xCD	; 205
    2f44:	fd 4f       	sbci	r31, 0xFD	; 253
    2f46:	80 81       	ld	r24, Z
    2f48:	91 81       	ldd	r25, Z+1	; 0x01
    2f4a:	01 97       	sbiw	r24, 0x01	; 1
    2f4c:	f1 f7       	brne	.-4      	; 0x2f4a <main+0xdee>
    2f4e:	fe 01       	movw	r30, r28
    2f50:	ed 5c       	subi	r30, 0xCD	; 205
    2f52:	fd 4f       	sbci	r31, 0xFD	; 253
    2f54:	91 83       	std	Z+1, r25	; 0x01
    2f56:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f58:	de 01       	movw	r26, r28
    2f5a:	ab 5c       	subi	r26, 0xCB	; 203
    2f5c:	bd 4f       	sbci	r27, 0xFD	; 253
    2f5e:	fe 01       	movw	r30, r28
    2f60:	eb 5c       	subi	r30, 0xCB	; 203
    2f62:	fd 4f       	sbci	r31, 0xFD	; 253
    2f64:	80 81       	ld	r24, Z
    2f66:	91 81       	ldd	r25, Z+1	; 0x01
    2f68:	01 97       	sbiw	r24, 0x01	; 1
    2f6a:	11 96       	adiw	r26, 0x01	; 1
    2f6c:	9c 93       	st	X, r25
    2f6e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f70:	fe 01       	movw	r30, r28
    2f72:	eb 5c       	subi	r30, 0xCB	; 203
    2f74:	fd 4f       	sbci	r31, 0xFD	; 253
    2f76:	80 81       	ld	r24, Z
    2f78:	91 81       	ldd	r25, Z+1	; 0x01
    2f7a:	00 97       	sbiw	r24, 0x00	; 0
    2f7c:	d1 f6       	brne	.-76     	; 0x2f32 <main+0xdd6>
    2f7e:	27 c0       	rjmp	.+78     	; 0x2fce <main+0xe72>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f80:	8e 01       	movw	r16, r28
    2f82:	0b 5c       	subi	r16, 0xCB	; 203
    2f84:	1d 4f       	sbci	r17, 0xFD	; 253
    2f86:	fe 01       	movw	r30, r28
    2f88:	e9 5c       	subi	r30, 0xC9	; 201
    2f8a:	fd 4f       	sbci	r31, 0xFD	; 253
    2f8c:	60 81       	ld	r22, Z
    2f8e:	71 81       	ldd	r23, Z+1	; 0x01
    2f90:	82 81       	ldd	r24, Z+2	; 0x02
    2f92:	93 81       	ldd	r25, Z+3	; 0x03
    2f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	f8 01       	movw	r30, r16
    2f9e:	91 83       	std	Z+1, r25	; 0x01
    2fa0:	80 83       	st	Z, r24
    2fa2:	de 01       	movw	r26, r28
    2fa4:	af 5c       	subi	r26, 0xCF	; 207
    2fa6:	bd 4f       	sbci	r27, 0xFD	; 253
    2fa8:	fe 01       	movw	r30, r28
    2faa:	eb 5c       	subi	r30, 0xCB	; 203
    2fac:	fd 4f       	sbci	r31, 0xFD	; 253
    2fae:	80 81       	ld	r24, Z
    2fb0:	91 81       	ldd	r25, Z+1	; 0x01
    2fb2:	8d 93       	st	X+, r24
    2fb4:	9c 93       	st	X, r25
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	ef 5c       	subi	r30, 0xCF	; 207
    2fba:	fd 4f       	sbci	r31, 0xFD	; 253
    2fbc:	80 81       	ld	r24, Z
    2fbe:	91 81       	ldd	r25, Z+1	; 0x01
    2fc0:	01 97       	sbiw	r24, 0x01	; 1
    2fc2:	f1 f7       	brne	.-4      	; 0x2fc0 <main+0xe64>
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	ef 5c       	subi	r30, 0xCF	; 207
    2fc8:	fd 4f       	sbci	r31, 0xFD	; 253
    2fca:	91 83       	std	Z+1, r25	; 0x01
    2fcc:	80 83       	st	Z, r24
		_delay_ms(500);//Halt the system for the given time in (ms)
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    2fce:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
		eeprom_write_byte (LOGIN_BLOCKED_ADDRESS,FALSE);
    2fd2:	88 e0       	ldi	r24, 0x08	; 8
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	60 e0       	ldi	r22, 0x00	; 0
    2fd8:	0e 94 ab 3d 	call	0x7b56	; 0x7b56 <__eewr_byte_m32>
    2fdc:	08 c0       	rjmp	.+16     	; 0x2fee <main+0xe92>
	}//The end of if admin and guest password is set
	else//this code of else run only if the system is not running for the first time (ADMIN and GUEST passwords are set)
	{
		block_mode_flag = eeprom_read_byte (LOGIN_BLOCKED_ADDRESS); //read the blocked location from EEPROM
    2fde:	88 e0       	ldi	r24, 0x08	; 8
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	0e 94 92 3d 	call	0x7b24	; 0x7b24 <__eerd_byte_m32>
    2fe6:	fe 01       	movw	r30, r28
    2fe8:	ea 55       	subi	r30, 0x5A	; 90
    2fea:	fd 4f       	sbci	r31, 0xFD	; 253
    2fec:	80 83       	st	Z, r24
	}
	while (1)//The start of the periodic code
	{
		key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
    2fee:	fe 01       	movw	r30, r28
    2ff0:	eb 55       	subi	r30, 0x5B	; 91
    2ff2:	fd 4f       	sbci	r31, 0xFD	; 253
    2ff4:	8f ef       	ldi	r24, 0xFF	; 255
    2ff6:	80 83       	st	Z, r24
		uint8 pass_tries_count=0;//stores how many times the user tried to log in to the system and failed
    2ff8:	fe 01       	movw	r30, r28
    2ffa:	ed 55       	subi	r30, 0x5D	; 93
    2ffc:	fd 4f       	sbci	r31, 0xFD	; 253
    2ffe:	10 82       	st	Z, r1

		if ( timeout_flag==TRUE )//check for timeout
    3000:	80 91 ba 02 	lds	r24, 0x02BA
    3004:	81 30       	cpi	r24, 0x01	; 1
    3006:	11 f0       	breq	.+4      	; 0x300c <main+0xeb0>
    3008:	0c 94 d7 29 	jmp	0x53ae	; 0x53ae <main+0x3252>
		{//if timeout flag was raised
			timer0_stop();//stop the timer that increase the session counter
    300c:	0e 94 cd 3c 	call	0x799a	; 0x799a <timer0_stop>
			session_counter = 0;//clear session counter
    3010:	10 92 b9 02 	sts	0x02B9, r1
    3014:	10 92 b8 02 	sts	0x02B8, r1
			timeout_flag=FALSE;//clear time out flag
    3018:	10 92 ba 02 	sts	0x02BA, r1
			login_mode=NO_MODE;//log the user out
    301c:	fe 01       	movw	r30, r28
    301e:	e9 55       	subi	r30, 0x59	; 89
    3020:	fd 4f       	sbci	r31, 0xFD	; 253
    3022:	10 82       	st	Z, r1
			key_pressed = NOT_PRESSED;//clear the key_pressed to avoid unwanted selection in the menu switch
    3024:	fe 01       	movw	r30, r28
    3026:	eb 55       	subi	r30, 0x5B	; 91
    3028:	fd 4f       	sbci	r31, 0xFD	; 253
    302a:	8f ef       	ldi	r24, 0xFF	; 255
    302c:	80 83       	st	Z, r24
			LED_vTurnOff(GUEST_LED_PORT,GUEST_LED_PIN);//turnoff the led of the guest
    302e:	84 e4       	ldi	r24, 0x44	; 68
    3030:	61 e0       	ldi	r22, 0x01	; 1
    3032:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <LED_vTurnOff>
			LED_vTurnOff(ADMIN_LED_PORT,ADMIN_LED_PIN);//turnoff the led of the admin
    3036:	84 e4       	ldi	r24, 0x44	; 68
    3038:	60 e0       	ldi	r22, 0x00	; 0
    303a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <LED_vTurnOff>
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    303e:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
			LCD_vSend_string("Session Timeout");//print session timeout message
    3042:	83 ed       	ldi	r24, 0xD3	; 211
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    304a:	fe 01       	movw	r30, r28
    304c:	e3 5d       	subi	r30, 0xD3	; 211
    304e:	fd 4f       	sbci	r31, 0xFD	; 253
    3050:	80 e0       	ldi	r24, 0x00	; 0
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	aa e7       	ldi	r26, 0x7A	; 122
    3056:	b4 e4       	ldi	r27, 0x44	; 68
    3058:	80 83       	st	Z, r24
    305a:	91 83       	std	Z+1, r25	; 0x01
    305c:	a2 83       	std	Z+2, r26	; 0x02
    305e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3060:	8e 01       	movw	r16, r28
    3062:	07 5d       	subi	r16, 0xD7	; 215
    3064:	1d 4f       	sbci	r17, 0xFD	; 253
    3066:	fe 01       	movw	r30, r28
    3068:	e3 5d       	subi	r30, 0xD3	; 211
    306a:	fd 4f       	sbci	r31, 0xFD	; 253
    306c:	60 81       	ld	r22, Z
    306e:	71 81       	ldd	r23, Z+1	; 0x01
    3070:	82 81       	ldd	r24, Z+2	; 0x02
    3072:	93 81       	ldd	r25, Z+3	; 0x03
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	4a ef       	ldi	r20, 0xFA	; 250
    307a:	54 e4       	ldi	r21, 0x44	; 68
    307c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	f8 01       	movw	r30, r16
    3086:	80 83       	st	Z, r24
    3088:	91 83       	std	Z+1, r25	; 0x01
    308a:	a2 83       	std	Z+2, r26	; 0x02
    308c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    308e:	fe 01       	movw	r30, r28
    3090:	e7 5d       	subi	r30, 0xD7	; 215
    3092:	fd 4f       	sbci	r31, 0xFD	; 253
    3094:	60 81       	ld	r22, Z
    3096:	71 81       	ldd	r23, Z+1	; 0x01
    3098:	82 81       	ldd	r24, Z+2	; 0x02
    309a:	93 81       	ldd	r25, Z+3	; 0x03
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	40 e8       	ldi	r20, 0x80	; 128
    30a2:	5f e3       	ldi	r21, 0x3F	; 63
    30a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30a8:	88 23       	and	r24, r24
    30aa:	44 f4       	brge	.+16     	; 0x30bc <main+0xf60>
		__ticks = 1;
    30ac:	fe 01       	movw	r30, r28
    30ae:	e9 5d       	subi	r30, 0xD9	; 217
    30b0:	fd 4f       	sbci	r31, 0xFD	; 253
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	91 83       	std	Z+1, r25	; 0x01
    30b8:	80 83       	st	Z, r24
    30ba:	65 c0       	rjmp	.+202    	; 0x3186 <main+0x102a>
	else if (__tmp > 65535)
    30bc:	fe 01       	movw	r30, r28
    30be:	e7 5d       	subi	r30, 0xD7	; 215
    30c0:	fd 4f       	sbci	r31, 0xFD	; 253
    30c2:	60 81       	ld	r22, Z
    30c4:	71 81       	ldd	r23, Z+1	; 0x01
    30c6:	82 81       	ldd	r24, Z+2	; 0x02
    30c8:	93 81       	ldd	r25, Z+3	; 0x03
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	3f ef       	ldi	r19, 0xFF	; 255
    30ce:	4f e7       	ldi	r20, 0x7F	; 127
    30d0:	57 e4       	ldi	r21, 0x47	; 71
    30d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30d6:	18 16       	cp	r1, r24
    30d8:	0c f0       	brlt	.+2      	; 0x30dc <main+0xf80>
    30da:	44 c0       	rjmp	.+136    	; 0x3164 <main+0x1008>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30dc:	fe 01       	movw	r30, r28
    30de:	e3 5d       	subi	r30, 0xD3	; 211
    30e0:	fd 4f       	sbci	r31, 0xFD	; 253
    30e2:	60 81       	ld	r22, Z
    30e4:	71 81       	ldd	r23, Z+1	; 0x01
    30e6:	82 81       	ldd	r24, Z+2	; 0x02
    30e8:	93 81       	ldd	r25, Z+3	; 0x03
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	40 e2       	ldi	r20, 0x20	; 32
    30f0:	51 e4       	ldi	r21, 0x41	; 65
    30f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	8e 01       	movw	r16, r28
    30fc:	09 5d       	subi	r16, 0xD9	; 217
    30fe:	1d 4f       	sbci	r17, 0xFD	; 253
    3100:	bc 01       	movw	r22, r24
    3102:	cd 01       	movw	r24, r26
    3104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	f8 01       	movw	r30, r16
    310e:	91 83       	std	Z+1, r25	; 0x01
    3110:	80 83       	st	Z, r24
    3112:	1f c0       	rjmp	.+62     	; 0x3152 <main+0xff6>
    3114:	fe 01       	movw	r30, r28
    3116:	eb 5d       	subi	r30, 0xDB	; 219
    3118:	fd 4f       	sbci	r31, 0xFD	; 253
    311a:	88 ec       	ldi	r24, 0xC8	; 200
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	91 83       	std	Z+1, r25	; 0x01
    3120:	80 83       	st	Z, r24
    3122:	fe 01       	movw	r30, r28
    3124:	eb 5d       	subi	r30, 0xDB	; 219
    3126:	fd 4f       	sbci	r31, 0xFD	; 253
    3128:	80 81       	ld	r24, Z
    312a:	91 81       	ldd	r25, Z+1	; 0x01
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	f1 f7       	brne	.-4      	; 0x312c <main+0xfd0>
    3130:	fe 01       	movw	r30, r28
    3132:	eb 5d       	subi	r30, 0xDB	; 219
    3134:	fd 4f       	sbci	r31, 0xFD	; 253
    3136:	91 83       	std	Z+1, r25	; 0x01
    3138:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    313a:	de 01       	movw	r26, r28
    313c:	a9 5d       	subi	r26, 0xD9	; 217
    313e:	bd 4f       	sbci	r27, 0xFD	; 253
    3140:	fe 01       	movw	r30, r28
    3142:	e9 5d       	subi	r30, 0xD9	; 217
    3144:	fd 4f       	sbci	r31, 0xFD	; 253
    3146:	80 81       	ld	r24, Z
    3148:	91 81       	ldd	r25, Z+1	; 0x01
    314a:	01 97       	sbiw	r24, 0x01	; 1
    314c:	11 96       	adiw	r26, 0x01	; 1
    314e:	9c 93       	st	X, r25
    3150:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3152:	fe 01       	movw	r30, r28
    3154:	e9 5d       	subi	r30, 0xD9	; 217
    3156:	fd 4f       	sbci	r31, 0xFD	; 253
    3158:	80 81       	ld	r24, Z
    315a:	91 81       	ldd	r25, Z+1	; 0x01
    315c:	00 97       	sbiw	r24, 0x00	; 0
    315e:	d1 f6       	brne	.-76     	; 0x3114 <main+0xfb8>
    3160:	0c 94 d7 29 	jmp	0x53ae	; 0x53ae <main+0x3252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3164:	8e 01       	movw	r16, r28
    3166:	09 5d       	subi	r16, 0xD9	; 217
    3168:	1d 4f       	sbci	r17, 0xFD	; 253
    316a:	fe 01       	movw	r30, r28
    316c:	e7 5d       	subi	r30, 0xD7	; 215
    316e:	fd 4f       	sbci	r31, 0xFD	; 253
    3170:	60 81       	ld	r22, Z
    3172:	71 81       	ldd	r23, Z+1	; 0x01
    3174:	82 81       	ldd	r24, Z+2	; 0x02
    3176:	93 81       	ldd	r25, Z+3	; 0x03
    3178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	f8 01       	movw	r30, r16
    3182:	91 83       	std	Z+1, r25	; 0x01
    3184:	80 83       	st	Z, r24
    3186:	de 01       	movw	r26, r28
    3188:	ad 5d       	subi	r26, 0xDD	; 221
    318a:	bd 4f       	sbci	r27, 0xFD	; 253
    318c:	fe 01       	movw	r30, r28
    318e:	e9 5d       	subi	r30, 0xD9	; 217
    3190:	fd 4f       	sbci	r31, 0xFD	; 253
    3192:	80 81       	ld	r24, Z
    3194:	91 81       	ldd	r25, Z+1	; 0x01
    3196:	11 96       	adiw	r26, 0x01	; 1
    3198:	9c 93       	st	X, r25
    319a:	8e 93       	st	-X, r24
    319c:	fe 01       	movw	r30, r28
    319e:	ed 5d       	subi	r30, 0xDD	; 221
    31a0:	fd 4f       	sbci	r31, 0xFD	; 253
    31a2:	80 81       	ld	r24, Z
    31a4:	91 81       	ldd	r25, Z+1	; 0x01
    31a6:	01 97       	sbiw	r24, 0x01	; 1
    31a8:	f1 f7       	brne	.-4      	; 0x31a6 <main+0x104a>
    31aa:	fe 01       	movw	r30, r28
    31ac:	ed 5d       	subi	r30, 0xDD	; 221
    31ae:	fd 4f       	sbci	r31, 0xFD	; 253
    31b0:	91 83       	std	Z+1, r25	; 0x01
    31b2:	80 83       	st	Z, r24
    31b4:	0c 94 d7 29 	jmp	0x53ae	; 0x53ae <main+0x3252>
			_delay_ms(1000);//Halt the system for the given time in (ms)
		}

		while (login_mode==NO_MODE)//The user can only leave the loop only in case of he was logged in as guest or admin
		{
			if (holdFlag)//check uf hold flag is rising
    31b8:	80 91 bb 02 	lds	r24, 0x02BB
    31bc:	88 23       	and	r24, r24
    31be:	81 f0       	breq	.+32     	; 0x31e0 <main+0x1084>
			{
				LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    31c0:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
				LCD_vSend_string("SyStem Hold!");
    31c4:	83 ee       	ldi	r24, 0xE3	; 227
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
				LED_vTurnOn(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn on the led of Blocked
    31cc:	84 e4       	ldi	r24, 0x44	; 68
    31ce:	65 e0       	ldi	r22, 0x05	; 5
    31d0:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LED_vTurnOn>
				DIO_write(BUZZER_PORT,BUZZER_PIN,1);
    31d4:	84 e4       	ldi	r24, 0x44	; 68
    31d6:	66 e0       	ldi	r22, 0x06	; 6
    31d8:	41 e0       	ldi	r20, 0x01	; 1
    31da:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    31de:	ff cf       	rjmp	.-2      	; 0x31de <main+0x1082>
				while(1);//Block Code
			}
			if(block_mode_flag==TRUE)//if the login process was blocked wait till the end of the block period
    31e0:	fe 01       	movw	r30, r28
    31e2:	ea 55       	subi	r30, 0x5A	; 90
    31e4:	fd 4f       	sbci	r31, 0xFD	; 253
    31e6:	80 81       	ld	r24, Z
    31e8:	81 30       	cpi	r24, 0x01	; 1
    31ea:	09 f0       	breq	.+2      	; 0x31ee <main+0x1092>
    31ec:	0c c3       	rjmp	.+1560   	; 0x3806 <main+0x16aa>
			{
				LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    31ee:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
				LCD_vSend_string("Login blocked");
    31f2:	80 ef       	ldi	r24, 0xF0	; 240
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
				LCD_movecursor(2,1);
    31fa:	82 e0       	ldi	r24, 0x02	; 2
    31fc:	61 e0       	ldi	r22, 0x01	; 1
    31fe:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
				LCD_vSend_string("wait 20 seconds");
    3202:	8e ef       	ldi	r24, 0xFE	; 254
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
				LED_vTurnOn(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn on the led of Blocked
    320a:	84 e4       	ldi	r24, 0x44	; 68
    320c:	65 e0       	ldi	r22, 0x05	; 5
    320e:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LED_vTurnOn>
				DIO_write(BUZZER_PORT,BUZZER_PIN,1);
    3212:	84 e4       	ldi	r24, 0x44	; 68
    3214:	66 e0       	ldi	r22, 0x06	; 6
    3216:	41 e0       	ldi	r20, 0x01	; 1
    3218:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    321c:	fe 01       	movw	r30, r28
    321e:	e1 5e       	subi	r30, 0xE1	; 225
    3220:	fd 4f       	sbci	r31, 0xFD	; 253
    3222:	80 e0       	ldi	r24, 0x00	; 0
    3224:	90 e4       	ldi	r25, 0x40	; 64
    3226:	ac e9       	ldi	r26, 0x9C	; 156
    3228:	b5 e4       	ldi	r27, 0x45	; 69
    322a:	80 83       	st	Z, r24
    322c:	91 83       	std	Z+1, r25	; 0x01
    322e:	a2 83       	std	Z+2, r26	; 0x02
    3230:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3232:	8e 01       	movw	r16, r28
    3234:	05 5e       	subi	r16, 0xE5	; 229
    3236:	1d 4f       	sbci	r17, 0xFD	; 253
    3238:	fe 01       	movw	r30, r28
    323a:	e1 5e       	subi	r30, 0xE1	; 225
    323c:	fd 4f       	sbci	r31, 0xFD	; 253
    323e:	60 81       	ld	r22, Z
    3240:	71 81       	ldd	r23, Z+1	; 0x01
    3242:	82 81       	ldd	r24, Z+2	; 0x02
    3244:	93 81       	ldd	r25, Z+3	; 0x03
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	4a ef       	ldi	r20, 0xFA	; 250
    324c:	54 e4       	ldi	r21, 0x44	; 68
    324e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	f8 01       	movw	r30, r16
    3258:	80 83       	st	Z, r24
    325a:	91 83       	std	Z+1, r25	; 0x01
    325c:	a2 83       	std	Z+2, r26	; 0x02
    325e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3260:	fe 01       	movw	r30, r28
    3262:	e5 5e       	subi	r30, 0xE5	; 229
    3264:	fd 4f       	sbci	r31, 0xFD	; 253
    3266:	60 81       	ld	r22, Z
    3268:	71 81       	ldd	r23, Z+1	; 0x01
    326a:	82 81       	ldd	r24, Z+2	; 0x02
    326c:	93 81       	ldd	r25, Z+3	; 0x03
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	40 e8       	ldi	r20, 0x80	; 128
    3274:	5f e3       	ldi	r21, 0x3F	; 63
    3276:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    327a:	88 23       	and	r24, r24
    327c:	44 f4       	brge	.+16     	; 0x328e <main+0x1132>
		__ticks = 1;
    327e:	fe 01       	movw	r30, r28
    3280:	e7 5e       	subi	r30, 0xE7	; 231
    3282:	fd 4f       	sbci	r31, 0xFD	; 253
    3284:	81 e0       	ldi	r24, 0x01	; 1
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	91 83       	std	Z+1, r25	; 0x01
    328a:	80 83       	st	Z, r24
    328c:	64 c0       	rjmp	.+200    	; 0x3356 <main+0x11fa>
	else if (__tmp > 65535)
    328e:	fe 01       	movw	r30, r28
    3290:	e5 5e       	subi	r30, 0xE5	; 229
    3292:	fd 4f       	sbci	r31, 0xFD	; 253
    3294:	60 81       	ld	r22, Z
    3296:	71 81       	ldd	r23, Z+1	; 0x01
    3298:	82 81       	ldd	r24, Z+2	; 0x02
    329a:	93 81       	ldd	r25, Z+3	; 0x03
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	3f ef       	ldi	r19, 0xFF	; 255
    32a0:	4f e7       	ldi	r20, 0x7F	; 127
    32a2:	57 e4       	ldi	r21, 0x47	; 71
    32a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32a8:	18 16       	cp	r1, r24
    32aa:	0c f0       	brlt	.+2      	; 0x32ae <main+0x1152>
    32ac:	43 c0       	rjmp	.+134    	; 0x3334 <main+0x11d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ae:	fe 01       	movw	r30, r28
    32b0:	e1 5e       	subi	r30, 0xE1	; 225
    32b2:	fd 4f       	sbci	r31, 0xFD	; 253
    32b4:	60 81       	ld	r22, Z
    32b6:	71 81       	ldd	r23, Z+1	; 0x01
    32b8:	82 81       	ldd	r24, Z+2	; 0x02
    32ba:	93 81       	ldd	r25, Z+3	; 0x03
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	40 e2       	ldi	r20, 0x20	; 32
    32c2:	51 e4       	ldi	r21, 0x41	; 65
    32c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	8e 01       	movw	r16, r28
    32ce:	07 5e       	subi	r16, 0xE7	; 231
    32d0:	1d 4f       	sbci	r17, 0xFD	; 253
    32d2:	bc 01       	movw	r22, r24
    32d4:	cd 01       	movw	r24, r26
    32d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	f8 01       	movw	r30, r16
    32e0:	91 83       	std	Z+1, r25	; 0x01
    32e2:	80 83       	st	Z, r24
    32e4:	1f c0       	rjmp	.+62     	; 0x3324 <main+0x11c8>
    32e6:	fe 01       	movw	r30, r28
    32e8:	e9 5e       	subi	r30, 0xE9	; 233
    32ea:	fd 4f       	sbci	r31, 0xFD	; 253
    32ec:	88 ec       	ldi	r24, 0xC8	; 200
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	91 83       	std	Z+1, r25	; 0x01
    32f2:	80 83       	st	Z, r24
    32f4:	fe 01       	movw	r30, r28
    32f6:	e9 5e       	subi	r30, 0xE9	; 233
    32f8:	fd 4f       	sbci	r31, 0xFD	; 253
    32fa:	80 81       	ld	r24, Z
    32fc:	91 81       	ldd	r25, Z+1	; 0x01
    32fe:	01 97       	sbiw	r24, 0x01	; 1
    3300:	f1 f7       	brne	.-4      	; 0x32fe <main+0x11a2>
    3302:	fe 01       	movw	r30, r28
    3304:	e9 5e       	subi	r30, 0xE9	; 233
    3306:	fd 4f       	sbci	r31, 0xFD	; 253
    3308:	91 83       	std	Z+1, r25	; 0x01
    330a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    330c:	de 01       	movw	r26, r28
    330e:	a7 5e       	subi	r26, 0xE7	; 231
    3310:	bd 4f       	sbci	r27, 0xFD	; 253
    3312:	fe 01       	movw	r30, r28
    3314:	e7 5e       	subi	r30, 0xE7	; 231
    3316:	fd 4f       	sbci	r31, 0xFD	; 253
    3318:	80 81       	ld	r24, Z
    331a:	91 81       	ldd	r25, Z+1	; 0x01
    331c:	01 97       	sbiw	r24, 0x01	; 1
    331e:	11 96       	adiw	r26, 0x01	; 1
    3320:	9c 93       	st	X, r25
    3322:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3324:	fe 01       	movw	r30, r28
    3326:	e7 5e       	subi	r30, 0xE7	; 231
    3328:	fd 4f       	sbci	r31, 0xFD	; 253
    332a:	80 81       	ld	r24, Z
    332c:	91 81       	ldd	r25, Z+1	; 0x01
    332e:	00 97       	sbiw	r24, 0x00	; 0
    3330:	d1 f6       	brne	.-76     	; 0x32e6 <main+0x118a>
    3332:	27 c0       	rjmp	.+78     	; 0x3382 <main+0x1226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3334:	8e 01       	movw	r16, r28
    3336:	07 5e       	subi	r16, 0xE7	; 231
    3338:	1d 4f       	sbci	r17, 0xFD	; 253
    333a:	fe 01       	movw	r30, r28
    333c:	e5 5e       	subi	r30, 0xE5	; 229
    333e:	fd 4f       	sbci	r31, 0xFD	; 253
    3340:	60 81       	ld	r22, Z
    3342:	71 81       	ldd	r23, Z+1	; 0x01
    3344:	82 81       	ldd	r24, Z+2	; 0x02
    3346:	93 81       	ldd	r25, Z+3	; 0x03
    3348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	f8 01       	movw	r30, r16
    3352:	91 83       	std	Z+1, r25	; 0x01
    3354:	80 83       	st	Z, r24
    3356:	de 01       	movw	r26, r28
    3358:	ab 5e       	subi	r26, 0xEB	; 235
    335a:	bd 4f       	sbci	r27, 0xFD	; 253
    335c:	fe 01       	movw	r30, r28
    335e:	e7 5e       	subi	r30, 0xE7	; 231
    3360:	fd 4f       	sbci	r31, 0xFD	; 253
    3362:	80 81       	ld	r24, Z
    3364:	91 81       	ldd	r25, Z+1	; 0x01
    3366:	8d 93       	st	X+, r24
    3368:	9c 93       	st	X, r25
    336a:	fe 01       	movw	r30, r28
    336c:	eb 5e       	subi	r30, 0xEB	; 235
    336e:	fd 4f       	sbci	r31, 0xFD	; 253
    3370:	80 81       	ld	r24, Z
    3372:	91 81       	ldd	r25, Z+1	; 0x01
    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	f1 f7       	brne	.-4      	; 0x3374 <main+0x1218>
    3378:	fe 01       	movw	r30, r28
    337a:	eb 5e       	subi	r30, 0xEB	; 235
    337c:	fd 4f       	sbci	r31, 0xFD	; 253
    337e:	91 83       	std	Z+1, r25	; 0x01
    3380:	80 83       	st	Z, r24
    3382:	fe 01       	movw	r30, r28
    3384:	ef 5e       	subi	r30, 0xEF	; 239
    3386:	fd 4f       	sbci	r31, 0xFD	; 253
    3388:	80 e0       	ldi	r24, 0x00	; 0
    338a:	90 e4       	ldi	r25, 0x40	; 64
    338c:	ac e9       	ldi	r26, 0x9C	; 156
    338e:	b5 e4       	ldi	r27, 0x45	; 69
    3390:	80 83       	st	Z, r24
    3392:	91 83       	std	Z+1, r25	; 0x01
    3394:	a2 83       	std	Z+2, r26	; 0x02
    3396:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3398:	8e 01       	movw	r16, r28
    339a:	03 5f       	subi	r16, 0xF3	; 243
    339c:	1d 4f       	sbci	r17, 0xFD	; 253
    339e:	fe 01       	movw	r30, r28
    33a0:	ef 5e       	subi	r30, 0xEF	; 239
    33a2:	fd 4f       	sbci	r31, 0xFD	; 253
    33a4:	60 81       	ld	r22, Z
    33a6:	71 81       	ldd	r23, Z+1	; 0x01
    33a8:	82 81       	ldd	r24, Z+2	; 0x02
    33aa:	93 81       	ldd	r25, Z+3	; 0x03
    33ac:	20 e0       	ldi	r18, 0x00	; 0
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	4a ef       	ldi	r20, 0xFA	; 250
    33b2:	54 e4       	ldi	r21, 0x44	; 68
    33b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b8:	dc 01       	movw	r26, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	f8 01       	movw	r30, r16
    33be:	80 83       	st	Z, r24
    33c0:	91 83       	std	Z+1, r25	; 0x01
    33c2:	a2 83       	std	Z+2, r26	; 0x02
    33c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33c6:	fe 01       	movw	r30, r28
    33c8:	e3 5f       	subi	r30, 0xF3	; 243
    33ca:	fd 4f       	sbci	r31, 0xFD	; 253
    33cc:	60 81       	ld	r22, Z
    33ce:	71 81       	ldd	r23, Z+1	; 0x01
    33d0:	82 81       	ldd	r24, Z+2	; 0x02
    33d2:	93 81       	ldd	r25, Z+3	; 0x03
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	40 e8       	ldi	r20, 0x80	; 128
    33da:	5f e3       	ldi	r21, 0x3F	; 63
    33dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33e0:	88 23       	and	r24, r24
    33e2:	44 f4       	brge	.+16     	; 0x33f4 <main+0x1298>
		__ticks = 1;
    33e4:	fe 01       	movw	r30, r28
    33e6:	e5 5f       	subi	r30, 0xF5	; 245
    33e8:	fd 4f       	sbci	r31, 0xFD	; 253
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	91 83       	std	Z+1, r25	; 0x01
    33f0:	80 83       	st	Z, r24
    33f2:	64 c0       	rjmp	.+200    	; 0x34bc <main+0x1360>
	else if (__tmp > 65535)
    33f4:	fe 01       	movw	r30, r28
    33f6:	e3 5f       	subi	r30, 0xF3	; 243
    33f8:	fd 4f       	sbci	r31, 0xFD	; 253
    33fa:	60 81       	ld	r22, Z
    33fc:	71 81       	ldd	r23, Z+1	; 0x01
    33fe:	82 81       	ldd	r24, Z+2	; 0x02
    3400:	93 81       	ldd	r25, Z+3	; 0x03
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	3f ef       	ldi	r19, 0xFF	; 255
    3406:	4f e7       	ldi	r20, 0x7F	; 127
    3408:	57 e4       	ldi	r21, 0x47	; 71
    340a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    340e:	18 16       	cp	r1, r24
    3410:	0c f0       	brlt	.+2      	; 0x3414 <main+0x12b8>
    3412:	43 c0       	rjmp	.+134    	; 0x349a <main+0x133e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3414:	fe 01       	movw	r30, r28
    3416:	ef 5e       	subi	r30, 0xEF	; 239
    3418:	fd 4f       	sbci	r31, 0xFD	; 253
    341a:	60 81       	ld	r22, Z
    341c:	71 81       	ldd	r23, Z+1	; 0x01
    341e:	82 81       	ldd	r24, Z+2	; 0x02
    3420:	93 81       	ldd	r25, Z+3	; 0x03
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	40 e2       	ldi	r20, 0x20	; 32
    3428:	51 e4       	ldi	r21, 0x41	; 65
    342a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	8e 01       	movw	r16, r28
    3434:	05 5f       	subi	r16, 0xF5	; 245
    3436:	1d 4f       	sbci	r17, 0xFD	; 253
    3438:	bc 01       	movw	r22, r24
    343a:	cd 01       	movw	r24, r26
    343c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	f8 01       	movw	r30, r16
    3446:	91 83       	std	Z+1, r25	; 0x01
    3448:	80 83       	st	Z, r24
    344a:	1f c0       	rjmp	.+62     	; 0x348a <main+0x132e>
    344c:	fe 01       	movw	r30, r28
    344e:	e7 5f       	subi	r30, 0xF7	; 247
    3450:	fd 4f       	sbci	r31, 0xFD	; 253
    3452:	88 ec       	ldi	r24, 0xC8	; 200
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	91 83       	std	Z+1, r25	; 0x01
    3458:	80 83       	st	Z, r24
    345a:	fe 01       	movw	r30, r28
    345c:	e7 5f       	subi	r30, 0xF7	; 247
    345e:	fd 4f       	sbci	r31, 0xFD	; 253
    3460:	80 81       	ld	r24, Z
    3462:	91 81       	ldd	r25, Z+1	; 0x01
    3464:	01 97       	sbiw	r24, 0x01	; 1
    3466:	f1 f7       	brne	.-4      	; 0x3464 <main+0x1308>
    3468:	fe 01       	movw	r30, r28
    346a:	e7 5f       	subi	r30, 0xF7	; 247
    346c:	fd 4f       	sbci	r31, 0xFD	; 253
    346e:	91 83       	std	Z+1, r25	; 0x01
    3470:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3472:	de 01       	movw	r26, r28
    3474:	a5 5f       	subi	r26, 0xF5	; 245
    3476:	bd 4f       	sbci	r27, 0xFD	; 253
    3478:	fe 01       	movw	r30, r28
    347a:	e5 5f       	subi	r30, 0xF5	; 245
    347c:	fd 4f       	sbci	r31, 0xFD	; 253
    347e:	80 81       	ld	r24, Z
    3480:	91 81       	ldd	r25, Z+1	; 0x01
    3482:	01 97       	sbiw	r24, 0x01	; 1
    3484:	11 96       	adiw	r26, 0x01	; 1
    3486:	9c 93       	st	X, r25
    3488:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    348a:	fe 01       	movw	r30, r28
    348c:	e5 5f       	subi	r30, 0xF5	; 245
    348e:	fd 4f       	sbci	r31, 0xFD	; 253
    3490:	80 81       	ld	r24, Z
    3492:	91 81       	ldd	r25, Z+1	; 0x01
    3494:	00 97       	sbiw	r24, 0x00	; 0
    3496:	d1 f6       	brne	.-76     	; 0x344c <main+0x12f0>
    3498:	27 c0       	rjmp	.+78     	; 0x34e8 <main+0x138c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    349a:	8e 01       	movw	r16, r28
    349c:	05 5f       	subi	r16, 0xF5	; 245
    349e:	1d 4f       	sbci	r17, 0xFD	; 253
    34a0:	fe 01       	movw	r30, r28
    34a2:	e3 5f       	subi	r30, 0xF3	; 243
    34a4:	fd 4f       	sbci	r31, 0xFD	; 253
    34a6:	60 81       	ld	r22, Z
    34a8:	71 81       	ldd	r23, Z+1	; 0x01
    34aa:	82 81       	ldd	r24, Z+2	; 0x02
    34ac:	93 81       	ldd	r25, Z+3	; 0x03
    34ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b2:	dc 01       	movw	r26, r24
    34b4:	cb 01       	movw	r24, r22
    34b6:	f8 01       	movw	r30, r16
    34b8:	91 83       	std	Z+1, r25	; 0x01
    34ba:	80 83       	st	Z, r24
    34bc:	de 01       	movw	r26, r28
    34be:	a9 5f       	subi	r26, 0xF9	; 249
    34c0:	bd 4f       	sbci	r27, 0xFD	; 253
    34c2:	fe 01       	movw	r30, r28
    34c4:	e5 5f       	subi	r30, 0xF5	; 245
    34c6:	fd 4f       	sbci	r31, 0xFD	; 253
    34c8:	80 81       	ld	r24, Z
    34ca:	91 81       	ldd	r25, Z+1	; 0x01
    34cc:	8d 93       	st	X+, r24
    34ce:	9c 93       	st	X, r25
    34d0:	fe 01       	movw	r30, r28
    34d2:	e9 5f       	subi	r30, 0xF9	; 249
    34d4:	fd 4f       	sbci	r31, 0xFD	; 253
    34d6:	80 81       	ld	r24, Z
    34d8:	91 81       	ldd	r25, Z+1	; 0x01
    34da:	01 97       	sbiw	r24, 0x01	; 1
    34dc:	f1 f7       	brne	.-4      	; 0x34da <main+0x137e>
    34de:	fe 01       	movw	r30, r28
    34e0:	e9 5f       	subi	r30, 0xF9	; 249
    34e2:	fd 4f       	sbci	r31, 0xFD	; 253
    34e4:	91 83       	std	Z+1, r25	; 0x01
    34e6:	80 83       	st	Z, r24
    34e8:	fe 01       	movw	r30, r28
    34ea:	ed 5f       	subi	r30, 0xFD	; 253
    34ec:	fd 4f       	sbci	r31, 0xFD	; 253
    34ee:	80 e0       	ldi	r24, 0x00	; 0
    34f0:	90 e4       	ldi	r25, 0x40	; 64
    34f2:	ac e9       	ldi	r26, 0x9C	; 156
    34f4:	b5 e4       	ldi	r27, 0x45	; 69
    34f6:	80 83       	st	Z, r24
    34f8:	91 83       	std	Z+1, r25	; 0x01
    34fa:	a2 83       	std	Z+2, r26	; 0x02
    34fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34fe:	8e 01       	movw	r16, r28
    3500:	01 50       	subi	r16, 0x01	; 1
    3502:	1e 4f       	sbci	r17, 0xFE	; 254
    3504:	fe 01       	movw	r30, r28
    3506:	ed 5f       	subi	r30, 0xFD	; 253
    3508:	fd 4f       	sbci	r31, 0xFD	; 253
    350a:	60 81       	ld	r22, Z
    350c:	71 81       	ldd	r23, Z+1	; 0x01
    350e:	82 81       	ldd	r24, Z+2	; 0x02
    3510:	93 81       	ldd	r25, Z+3	; 0x03
    3512:	20 e0       	ldi	r18, 0x00	; 0
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	4a ef       	ldi	r20, 0xFA	; 250
    3518:	54 e4       	ldi	r21, 0x44	; 68
    351a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	f8 01       	movw	r30, r16
    3524:	80 83       	st	Z, r24
    3526:	91 83       	std	Z+1, r25	; 0x01
    3528:	a2 83       	std	Z+2, r26	; 0x02
    352a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    352c:	fe 01       	movw	r30, r28
    352e:	e1 50       	subi	r30, 0x01	; 1
    3530:	fe 4f       	sbci	r31, 0xFE	; 254
    3532:	60 81       	ld	r22, Z
    3534:	71 81       	ldd	r23, Z+1	; 0x01
    3536:	82 81       	ldd	r24, Z+2	; 0x02
    3538:	93 81       	ldd	r25, Z+3	; 0x03
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	40 e8       	ldi	r20, 0x80	; 128
    3540:	5f e3       	ldi	r21, 0x3F	; 63
    3542:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3546:	88 23       	and	r24, r24
    3548:	44 f4       	brge	.+16     	; 0x355a <main+0x13fe>
		__ticks = 1;
    354a:	fe 01       	movw	r30, r28
    354c:	e3 50       	subi	r30, 0x03	; 3
    354e:	fe 4f       	sbci	r31, 0xFE	; 254
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	91 83       	std	Z+1, r25	; 0x01
    3556:	80 83       	st	Z, r24
    3558:	64 c0       	rjmp	.+200    	; 0x3622 <main+0x14c6>
	else if (__tmp > 65535)
    355a:	fe 01       	movw	r30, r28
    355c:	e1 50       	subi	r30, 0x01	; 1
    355e:	fe 4f       	sbci	r31, 0xFE	; 254
    3560:	60 81       	ld	r22, Z
    3562:	71 81       	ldd	r23, Z+1	; 0x01
    3564:	82 81       	ldd	r24, Z+2	; 0x02
    3566:	93 81       	ldd	r25, Z+3	; 0x03
    3568:	20 e0       	ldi	r18, 0x00	; 0
    356a:	3f ef       	ldi	r19, 0xFF	; 255
    356c:	4f e7       	ldi	r20, 0x7F	; 127
    356e:	57 e4       	ldi	r21, 0x47	; 71
    3570:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3574:	18 16       	cp	r1, r24
    3576:	0c f0       	brlt	.+2      	; 0x357a <main+0x141e>
    3578:	43 c0       	rjmp	.+134    	; 0x3600 <main+0x14a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    357a:	fe 01       	movw	r30, r28
    357c:	ed 5f       	subi	r30, 0xFD	; 253
    357e:	fd 4f       	sbci	r31, 0xFD	; 253
    3580:	60 81       	ld	r22, Z
    3582:	71 81       	ldd	r23, Z+1	; 0x01
    3584:	82 81       	ldd	r24, Z+2	; 0x02
    3586:	93 81       	ldd	r25, Z+3	; 0x03
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	40 e2       	ldi	r20, 0x20	; 32
    358e:	51 e4       	ldi	r21, 0x41	; 65
    3590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	8e 01       	movw	r16, r28
    359a:	03 50       	subi	r16, 0x03	; 3
    359c:	1e 4f       	sbci	r17, 0xFE	; 254
    359e:	bc 01       	movw	r22, r24
    35a0:	cd 01       	movw	r24, r26
    35a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	f8 01       	movw	r30, r16
    35ac:	91 83       	std	Z+1, r25	; 0x01
    35ae:	80 83       	st	Z, r24
    35b0:	1f c0       	rjmp	.+62     	; 0x35f0 <main+0x1494>
    35b2:	fe 01       	movw	r30, r28
    35b4:	e5 50       	subi	r30, 0x05	; 5
    35b6:	fe 4f       	sbci	r31, 0xFE	; 254
    35b8:	88 ec       	ldi	r24, 0xC8	; 200
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	91 83       	std	Z+1, r25	; 0x01
    35be:	80 83       	st	Z, r24
    35c0:	fe 01       	movw	r30, r28
    35c2:	e5 50       	subi	r30, 0x05	; 5
    35c4:	fe 4f       	sbci	r31, 0xFE	; 254
    35c6:	80 81       	ld	r24, Z
    35c8:	91 81       	ldd	r25, Z+1	; 0x01
    35ca:	01 97       	sbiw	r24, 0x01	; 1
    35cc:	f1 f7       	brne	.-4      	; 0x35ca <main+0x146e>
    35ce:	fe 01       	movw	r30, r28
    35d0:	e5 50       	subi	r30, 0x05	; 5
    35d2:	fe 4f       	sbci	r31, 0xFE	; 254
    35d4:	91 83       	std	Z+1, r25	; 0x01
    35d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d8:	de 01       	movw	r26, r28
    35da:	a3 50       	subi	r26, 0x03	; 3
    35dc:	be 4f       	sbci	r27, 0xFE	; 254
    35de:	fe 01       	movw	r30, r28
    35e0:	e3 50       	subi	r30, 0x03	; 3
    35e2:	fe 4f       	sbci	r31, 0xFE	; 254
    35e4:	80 81       	ld	r24, Z
    35e6:	91 81       	ldd	r25, Z+1	; 0x01
    35e8:	01 97       	sbiw	r24, 0x01	; 1
    35ea:	11 96       	adiw	r26, 0x01	; 1
    35ec:	9c 93       	st	X, r25
    35ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f0:	fe 01       	movw	r30, r28
    35f2:	e3 50       	subi	r30, 0x03	; 3
    35f4:	fe 4f       	sbci	r31, 0xFE	; 254
    35f6:	80 81       	ld	r24, Z
    35f8:	91 81       	ldd	r25, Z+1	; 0x01
    35fa:	00 97       	sbiw	r24, 0x00	; 0
    35fc:	d1 f6       	brne	.-76     	; 0x35b2 <main+0x1456>
    35fe:	27 c0       	rjmp	.+78     	; 0x364e <main+0x14f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3600:	8e 01       	movw	r16, r28
    3602:	03 50       	subi	r16, 0x03	; 3
    3604:	1e 4f       	sbci	r17, 0xFE	; 254
    3606:	fe 01       	movw	r30, r28
    3608:	e1 50       	subi	r30, 0x01	; 1
    360a:	fe 4f       	sbci	r31, 0xFE	; 254
    360c:	60 81       	ld	r22, Z
    360e:	71 81       	ldd	r23, Z+1	; 0x01
    3610:	82 81       	ldd	r24, Z+2	; 0x02
    3612:	93 81       	ldd	r25, Z+3	; 0x03
    3614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3618:	dc 01       	movw	r26, r24
    361a:	cb 01       	movw	r24, r22
    361c:	f8 01       	movw	r30, r16
    361e:	91 83       	std	Z+1, r25	; 0x01
    3620:	80 83       	st	Z, r24
    3622:	de 01       	movw	r26, r28
    3624:	a7 50       	subi	r26, 0x07	; 7
    3626:	be 4f       	sbci	r27, 0xFE	; 254
    3628:	fe 01       	movw	r30, r28
    362a:	e3 50       	subi	r30, 0x03	; 3
    362c:	fe 4f       	sbci	r31, 0xFE	; 254
    362e:	80 81       	ld	r24, Z
    3630:	91 81       	ldd	r25, Z+1	; 0x01
    3632:	8d 93       	st	X+, r24
    3634:	9c 93       	st	X, r25
    3636:	fe 01       	movw	r30, r28
    3638:	e7 50       	subi	r30, 0x07	; 7
    363a:	fe 4f       	sbci	r31, 0xFE	; 254
    363c:	80 81       	ld	r24, Z
    363e:	91 81       	ldd	r25, Z+1	; 0x01
    3640:	01 97       	sbiw	r24, 0x01	; 1
    3642:	f1 f7       	brne	.-4      	; 0x3640 <main+0x14e4>
    3644:	fe 01       	movw	r30, r28
    3646:	e7 50       	subi	r30, 0x07	; 7
    3648:	fe 4f       	sbci	r31, 0xFE	; 254
    364a:	91 83       	std	Z+1, r25	; 0x01
    364c:	80 83       	st	Z, r24
    364e:	fe 01       	movw	r30, r28
    3650:	eb 50       	subi	r30, 0x0B	; 11
    3652:	fe 4f       	sbci	r31, 0xFE	; 254
    3654:	80 e0       	ldi	r24, 0x00	; 0
    3656:	90 e4       	ldi	r25, 0x40	; 64
    3658:	ac e9       	ldi	r26, 0x9C	; 156
    365a:	b5 e4       	ldi	r27, 0x45	; 69
    365c:	80 83       	st	Z, r24
    365e:	91 83       	std	Z+1, r25	; 0x01
    3660:	a2 83       	std	Z+2, r26	; 0x02
    3662:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3664:	8e 01       	movw	r16, r28
    3666:	0f 50       	subi	r16, 0x0F	; 15
    3668:	1e 4f       	sbci	r17, 0xFE	; 254
    366a:	fe 01       	movw	r30, r28
    366c:	eb 50       	subi	r30, 0x0B	; 11
    366e:	fe 4f       	sbci	r31, 0xFE	; 254
    3670:	60 81       	ld	r22, Z
    3672:	71 81       	ldd	r23, Z+1	; 0x01
    3674:	82 81       	ldd	r24, Z+2	; 0x02
    3676:	93 81       	ldd	r25, Z+3	; 0x03
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	4a ef       	ldi	r20, 0xFA	; 250
    367e:	54 e4       	ldi	r21, 0x44	; 68
    3680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	f8 01       	movw	r30, r16
    368a:	80 83       	st	Z, r24
    368c:	91 83       	std	Z+1, r25	; 0x01
    368e:	a2 83       	std	Z+2, r26	; 0x02
    3690:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3692:	fe 01       	movw	r30, r28
    3694:	ef 50       	subi	r30, 0x0F	; 15
    3696:	fe 4f       	sbci	r31, 0xFE	; 254
    3698:	60 81       	ld	r22, Z
    369a:	71 81       	ldd	r23, Z+1	; 0x01
    369c:	82 81       	ldd	r24, Z+2	; 0x02
    369e:	93 81       	ldd	r25, Z+3	; 0x03
    36a0:	20 e0       	ldi	r18, 0x00	; 0
    36a2:	30 e0       	ldi	r19, 0x00	; 0
    36a4:	40 e8       	ldi	r20, 0x80	; 128
    36a6:	5f e3       	ldi	r21, 0x3F	; 63
    36a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36ac:	88 23       	and	r24, r24
    36ae:	44 f4       	brge	.+16     	; 0x36c0 <main+0x1564>
		__ticks = 1;
    36b0:	fe 01       	movw	r30, r28
    36b2:	e1 51       	subi	r30, 0x11	; 17
    36b4:	fe 4f       	sbci	r31, 0xFE	; 254
    36b6:	81 e0       	ldi	r24, 0x01	; 1
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	91 83       	std	Z+1, r25	; 0x01
    36bc:	80 83       	st	Z, r24
    36be:	64 c0       	rjmp	.+200    	; 0x3788 <main+0x162c>
	else if (__tmp > 65535)
    36c0:	fe 01       	movw	r30, r28
    36c2:	ef 50       	subi	r30, 0x0F	; 15
    36c4:	fe 4f       	sbci	r31, 0xFE	; 254
    36c6:	60 81       	ld	r22, Z
    36c8:	71 81       	ldd	r23, Z+1	; 0x01
    36ca:	82 81       	ldd	r24, Z+2	; 0x02
    36cc:	93 81       	ldd	r25, Z+3	; 0x03
    36ce:	20 e0       	ldi	r18, 0x00	; 0
    36d0:	3f ef       	ldi	r19, 0xFF	; 255
    36d2:	4f e7       	ldi	r20, 0x7F	; 127
    36d4:	57 e4       	ldi	r21, 0x47	; 71
    36d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36da:	18 16       	cp	r1, r24
    36dc:	0c f0       	brlt	.+2      	; 0x36e0 <main+0x1584>
    36de:	43 c0       	rjmp	.+134    	; 0x3766 <main+0x160a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36e0:	fe 01       	movw	r30, r28
    36e2:	eb 50       	subi	r30, 0x0B	; 11
    36e4:	fe 4f       	sbci	r31, 0xFE	; 254
    36e6:	60 81       	ld	r22, Z
    36e8:	71 81       	ldd	r23, Z+1	; 0x01
    36ea:	82 81       	ldd	r24, Z+2	; 0x02
    36ec:	93 81       	ldd	r25, Z+3	; 0x03
    36ee:	20 e0       	ldi	r18, 0x00	; 0
    36f0:	30 e0       	ldi	r19, 0x00	; 0
    36f2:	40 e2       	ldi	r20, 0x20	; 32
    36f4:	51 e4       	ldi	r21, 0x41	; 65
    36f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36fa:	dc 01       	movw	r26, r24
    36fc:	cb 01       	movw	r24, r22
    36fe:	8e 01       	movw	r16, r28
    3700:	01 51       	subi	r16, 0x11	; 17
    3702:	1e 4f       	sbci	r17, 0xFE	; 254
    3704:	bc 01       	movw	r22, r24
    3706:	cd 01       	movw	r24, r26
    3708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    370c:	dc 01       	movw	r26, r24
    370e:	cb 01       	movw	r24, r22
    3710:	f8 01       	movw	r30, r16
    3712:	91 83       	std	Z+1, r25	; 0x01
    3714:	80 83       	st	Z, r24
    3716:	1f c0       	rjmp	.+62     	; 0x3756 <main+0x15fa>
    3718:	fe 01       	movw	r30, r28
    371a:	e3 51       	subi	r30, 0x13	; 19
    371c:	fe 4f       	sbci	r31, 0xFE	; 254
    371e:	88 ec       	ldi	r24, 0xC8	; 200
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	91 83       	std	Z+1, r25	; 0x01
    3724:	80 83       	st	Z, r24
    3726:	fe 01       	movw	r30, r28
    3728:	e3 51       	subi	r30, 0x13	; 19
    372a:	fe 4f       	sbci	r31, 0xFE	; 254
    372c:	80 81       	ld	r24, Z
    372e:	91 81       	ldd	r25, Z+1	; 0x01
    3730:	01 97       	sbiw	r24, 0x01	; 1
    3732:	f1 f7       	brne	.-4      	; 0x3730 <main+0x15d4>
    3734:	fe 01       	movw	r30, r28
    3736:	e3 51       	subi	r30, 0x13	; 19
    3738:	fe 4f       	sbci	r31, 0xFE	; 254
    373a:	91 83       	std	Z+1, r25	; 0x01
    373c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    373e:	de 01       	movw	r26, r28
    3740:	a1 51       	subi	r26, 0x11	; 17
    3742:	be 4f       	sbci	r27, 0xFE	; 254
    3744:	fe 01       	movw	r30, r28
    3746:	e1 51       	subi	r30, 0x11	; 17
    3748:	fe 4f       	sbci	r31, 0xFE	; 254
    374a:	80 81       	ld	r24, Z
    374c:	91 81       	ldd	r25, Z+1	; 0x01
    374e:	01 97       	sbiw	r24, 0x01	; 1
    3750:	11 96       	adiw	r26, 0x01	; 1
    3752:	9c 93       	st	X, r25
    3754:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3756:	fe 01       	movw	r30, r28
    3758:	e1 51       	subi	r30, 0x11	; 17
    375a:	fe 4f       	sbci	r31, 0xFE	; 254
    375c:	80 81       	ld	r24, Z
    375e:	91 81       	ldd	r25, Z+1	; 0x01
    3760:	00 97       	sbiw	r24, 0x00	; 0
    3762:	d1 f6       	brne	.-76     	; 0x3718 <main+0x15bc>
    3764:	27 c0       	rjmp	.+78     	; 0x37b4 <main+0x1658>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3766:	8e 01       	movw	r16, r28
    3768:	01 51       	subi	r16, 0x11	; 17
    376a:	1e 4f       	sbci	r17, 0xFE	; 254
    376c:	fe 01       	movw	r30, r28
    376e:	ef 50       	subi	r30, 0x0F	; 15
    3770:	fe 4f       	sbci	r31, 0xFE	; 254
    3772:	60 81       	ld	r22, Z
    3774:	71 81       	ldd	r23, Z+1	; 0x01
    3776:	82 81       	ldd	r24, Z+2	; 0x02
    3778:	93 81       	ldd	r25, Z+3	; 0x03
    377a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    377e:	dc 01       	movw	r26, r24
    3780:	cb 01       	movw	r24, r22
    3782:	f8 01       	movw	r30, r16
    3784:	91 83       	std	Z+1, r25	; 0x01
    3786:	80 83       	st	Z, r24
    3788:	de 01       	movw	r26, r28
    378a:	a5 51       	subi	r26, 0x15	; 21
    378c:	be 4f       	sbci	r27, 0xFE	; 254
    378e:	fe 01       	movw	r30, r28
    3790:	e1 51       	subi	r30, 0x11	; 17
    3792:	fe 4f       	sbci	r31, 0xFE	; 254
    3794:	80 81       	ld	r24, Z
    3796:	91 81       	ldd	r25, Z+1	; 0x01
    3798:	8d 93       	st	X+, r24
    379a:	9c 93       	st	X, r25
    379c:	fe 01       	movw	r30, r28
    379e:	e5 51       	subi	r30, 0x15	; 21
    37a0:	fe 4f       	sbci	r31, 0xFE	; 254
    37a2:	80 81       	ld	r24, Z
    37a4:	91 81       	ldd	r25, Z+1	; 0x01
    37a6:	01 97       	sbiw	r24, 0x01	; 1
    37a8:	f1 f7       	brne	.-4      	; 0x37a6 <main+0x164a>
    37aa:	fe 01       	movw	r30, r28
    37ac:	e5 51       	subi	r30, 0x15	; 21
    37ae:	fe 4f       	sbci	r31, 0xFE	; 254
    37b0:	91 83       	std	Z+1, r25	; 0x01
    37b2:	80 83       	st	Z, r24
				_delay_ms(5000);
				_delay_ms(5000);
				_delay_ms(5000);
				_delay_ms(5000);
				//Halt the system for the given time in (ms)
				pass_tries_count = 0; //Clear the count on number of wrong tries
    37b4:	fe 01       	movw	r30, r28
    37b6:	ed 55       	subi	r30, 0x5D	; 93
    37b8:	fd 4f       	sbci	r31, 0xFD	; 253
    37ba:	10 82       	st	Z, r1
				block_mode_flag = FALSE;//Disable block of runtime
    37bc:	fe 01       	movw	r30, r28
    37be:	ea 55       	subi	r30, 0x5A	; 90
    37c0:	fd 4f       	sbci	r31, 0xFD	; 253
    37c2:	10 82       	st	Z, r1
				LED_vTurnOff(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn off the led of Blocked
    37c4:	84 e4       	ldi	r24, 0x44	; 68
    37c6:	65 e0       	ldi	r22, 0x05	; 5
    37c8:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <LED_vTurnOff>
				DIO_write(BUZZER_PORT,BUZZER_PIN,0);
    37cc:	84 e4       	ldi	r24, 0x44	; 68
    37ce:	66 e0       	ldi	r22, 0x06	; 6
    37d0:	40 e0       	ldi	r20, 0x00	; 0
    37d2:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
				/* Increment / Rise Flag System Hold*/
				if(hold_counter < TOLERANCE){hold_counter++;}
    37d6:	fe 01       	movw	r30, r28
    37d8:	e8 55       	subi	r30, 0x58	; 88
    37da:	fd 4f       	sbci	r31, 0xFD	; 253
    37dc:	80 81       	ld	r24, Z
    37de:	88 23       	and	r24, r24
    37e0:	51 f4       	brne	.+20     	; 0x37f6 <main+0x169a>
    37e2:	de 01       	movw	r26, r28
    37e4:	a8 55       	subi	r26, 0x58	; 88
    37e6:	bd 4f       	sbci	r27, 0xFD	; 253
    37e8:	fe 01       	movw	r30, r28
    37ea:	e8 55       	subi	r30, 0x58	; 88
    37ec:	fd 4f       	sbci	r31, 0xFD	; 253
    37ee:	80 81       	ld	r24, Z
    37f0:	8f 5f       	subi	r24, 0xFF	; 255
    37f2:	8c 93       	st	X, r24
    37f4:	03 c0       	rjmp	.+6      	; 0x37fc <main+0x16a0>
				else {holdFlag = TRUE;}
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	80 93 bb 02 	sts	0x02BB, r24


				eeprom_update_byte(LOGIN_BLOCKED_ADDRESS,FALSE);//write false at blocked location in EEPROM
    37fc:	88 e0       	ldi	r24, 0x08	; 8
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	60 e0       	ldi	r22, 0x00	; 0
    3802:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <__eeupd_byte_m32>
			}
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    3806:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
			LCD_vSend_string("Select mode :");
    380a:	8e e0       	ldi	r24, 0x0E	; 14
    380c:	91 e0       	ldi	r25, 0x01	; 1
    380e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
			LCD_movecursor(2,1);
    3812:	82 e0       	ldi	r24, 0x02	; 2
    3814:	61 e0       	ldi	r22, 0x01	; 1
    3816:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
			LCD_vSend_string("0:Admin 1:Guest");
    381a:	8c e1       	ldi	r24, 0x1C	; 28
    381c:	91 e0       	ldi	r25, 0x01	; 1
    381e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    3822:	06 c0       	rjmp	.+12     	; 0x3830 <main+0x16d4>
			while(key_pressed==NOT_PRESSED)//wait for the selection of the mode
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
    3824:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <keypad_u8check_press>
    3828:	fe 01       	movw	r30, r28
    382a:	eb 55       	subi	r30, 0x5B	; 91
    382c:	fd 4f       	sbci	r31, 0xFD	; 253
    382e:	80 83       	st	Z, r24
			}
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
			LCD_vSend_string("Select mode :");
			LCD_movecursor(2,1);
			LCD_vSend_string("0:Admin 1:Guest");
			while(key_pressed==NOT_PRESSED)//wait for the selection of the mode
    3830:	fe 01       	movw	r30, r28
    3832:	eb 55       	subi	r30, 0x5B	; 91
    3834:	fd 4f       	sbci	r31, 0xFD	; 253
    3836:	80 81       	ld	r24, Z
    3838:	8f 3f       	cpi	r24, 0xFF	; 255
    383a:	a1 f3       	breq	.-24     	; 0x3824 <main+0x16c8>
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
			}
			if ( key_pressed!=CHECK_ADMIN_MODE && key_pressed!=CHECK_GUEST_MODE )
    383c:	fe 01       	movw	r30, r28
    383e:	eb 55       	subi	r30, 0x5B	; 91
    3840:	fd 4f       	sbci	r31, 0xFD	; 253
    3842:	80 81       	ld	r24, Z
    3844:	80 33       	cpi	r24, 0x30	; 48
    3846:	09 f4       	brne	.+2      	; 0x384a <main+0x16ee>
    3848:	86 c1       	rjmp	.+780    	; 0x3b56 <main+0x19fa>
    384a:	fe 01       	movw	r30, r28
    384c:	eb 55       	subi	r30, 0x5B	; 91
    384e:	fd 4f       	sbci	r31, 0xFD	; 253
    3850:	80 81       	ld	r24, Z
    3852:	81 33       	cpi	r24, 0x31	; 49
    3854:	09 f4       	brne	.+2      	; 0x3858 <main+0x16fc>
    3856:	7f c1       	rjmp	.+766    	; 0x3b56 <main+0x19fa>
			{
				LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    3858:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
				LCD_vSend_string("Wrong input.");//Prints error message on the LCD
    385c:	8c e2       	ldi	r24, 0x2C	; 44
    385e:	91 e0       	ldi	r25, 0x01	; 1
    3860:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
				key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
    3864:	fe 01       	movw	r30, r28
    3866:	eb 55       	subi	r30, 0x5B	; 91
    3868:	fd 4f       	sbci	r31, 0xFD	; 253
    386a:	8f ef       	ldi	r24, 0xFF	; 255
    386c:	80 83       	st	Z, r24
				DIO_write(BUZZER_PORT,BUZZER_PIN,1);
    386e:	84 e4       	ldi	r24, 0x44	; 68
    3870:	66 e0       	ldi	r22, 0x06	; 6
    3872:	41 e0       	ldi	r20, 0x01	; 1
    3874:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    3878:	fe 01       	movw	r30, r28
    387a:	e9 51       	subi	r30, 0x19	; 25
    387c:	fe 4f       	sbci	r31, 0xFE	; 254
    387e:	80 e0       	ldi	r24, 0x00	; 0
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	aa e7       	ldi	r26, 0x7A	; 122
    3884:	b3 e4       	ldi	r27, 0x43	; 67
    3886:	80 83       	st	Z, r24
    3888:	91 83       	std	Z+1, r25	; 0x01
    388a:	a2 83       	std	Z+2, r26	; 0x02
    388c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    388e:	8e 01       	movw	r16, r28
    3890:	0d 51       	subi	r16, 0x1D	; 29
    3892:	1e 4f       	sbci	r17, 0xFE	; 254
    3894:	fe 01       	movw	r30, r28
    3896:	e9 51       	subi	r30, 0x19	; 25
    3898:	fe 4f       	sbci	r31, 0xFE	; 254
    389a:	60 81       	ld	r22, Z
    389c:	71 81       	ldd	r23, Z+1	; 0x01
    389e:	82 81       	ldd	r24, Z+2	; 0x02
    38a0:	93 81       	ldd	r25, Z+3	; 0x03
    38a2:	20 e0       	ldi	r18, 0x00	; 0
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	4a ef       	ldi	r20, 0xFA	; 250
    38a8:	54 e4       	ldi	r21, 0x44	; 68
    38aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ae:	dc 01       	movw	r26, r24
    38b0:	cb 01       	movw	r24, r22
    38b2:	f8 01       	movw	r30, r16
    38b4:	80 83       	st	Z, r24
    38b6:	91 83       	std	Z+1, r25	; 0x01
    38b8:	a2 83       	std	Z+2, r26	; 0x02
    38ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38bc:	fe 01       	movw	r30, r28
    38be:	ed 51       	subi	r30, 0x1D	; 29
    38c0:	fe 4f       	sbci	r31, 0xFE	; 254
    38c2:	60 81       	ld	r22, Z
    38c4:	71 81       	ldd	r23, Z+1	; 0x01
    38c6:	82 81       	ldd	r24, Z+2	; 0x02
    38c8:	93 81       	ldd	r25, Z+3	; 0x03
    38ca:	20 e0       	ldi	r18, 0x00	; 0
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	40 e8       	ldi	r20, 0x80	; 128
    38d0:	5f e3       	ldi	r21, 0x3F	; 63
    38d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38d6:	88 23       	and	r24, r24
    38d8:	44 f4       	brge	.+16     	; 0x38ea <main+0x178e>
		__ticks = 1;
    38da:	fe 01       	movw	r30, r28
    38dc:	ef 51       	subi	r30, 0x1F	; 31
    38de:	fe 4f       	sbci	r31, 0xFE	; 254
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	91 83       	std	Z+1, r25	; 0x01
    38e6:	80 83       	st	Z, r24
    38e8:	64 c0       	rjmp	.+200    	; 0x39b2 <main+0x1856>
	else if (__tmp > 65535)
    38ea:	fe 01       	movw	r30, r28
    38ec:	ed 51       	subi	r30, 0x1D	; 29
    38ee:	fe 4f       	sbci	r31, 0xFE	; 254
    38f0:	60 81       	ld	r22, Z
    38f2:	71 81       	ldd	r23, Z+1	; 0x01
    38f4:	82 81       	ldd	r24, Z+2	; 0x02
    38f6:	93 81       	ldd	r25, Z+3	; 0x03
    38f8:	20 e0       	ldi	r18, 0x00	; 0
    38fa:	3f ef       	ldi	r19, 0xFF	; 255
    38fc:	4f e7       	ldi	r20, 0x7F	; 127
    38fe:	57 e4       	ldi	r21, 0x47	; 71
    3900:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3904:	18 16       	cp	r1, r24
    3906:	0c f0       	brlt	.+2      	; 0x390a <main+0x17ae>
    3908:	43 c0       	rjmp	.+134    	; 0x3990 <main+0x1834>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    390a:	fe 01       	movw	r30, r28
    390c:	e9 51       	subi	r30, 0x19	; 25
    390e:	fe 4f       	sbci	r31, 0xFE	; 254
    3910:	60 81       	ld	r22, Z
    3912:	71 81       	ldd	r23, Z+1	; 0x01
    3914:	82 81       	ldd	r24, Z+2	; 0x02
    3916:	93 81       	ldd	r25, Z+3	; 0x03
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	40 e2       	ldi	r20, 0x20	; 32
    391e:	51 e4       	ldi	r21, 0x41	; 65
    3920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	8e 01       	movw	r16, r28
    392a:	0f 51       	subi	r16, 0x1F	; 31
    392c:	1e 4f       	sbci	r17, 0xFE	; 254
    392e:	bc 01       	movw	r22, r24
    3930:	cd 01       	movw	r24, r26
    3932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3936:	dc 01       	movw	r26, r24
    3938:	cb 01       	movw	r24, r22
    393a:	f8 01       	movw	r30, r16
    393c:	91 83       	std	Z+1, r25	; 0x01
    393e:	80 83       	st	Z, r24
    3940:	1f c0       	rjmp	.+62     	; 0x3980 <main+0x1824>
    3942:	fe 01       	movw	r30, r28
    3944:	e1 52       	subi	r30, 0x21	; 33
    3946:	fe 4f       	sbci	r31, 0xFE	; 254
    3948:	88 ec       	ldi	r24, 0xC8	; 200
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	91 83       	std	Z+1, r25	; 0x01
    394e:	80 83       	st	Z, r24
    3950:	fe 01       	movw	r30, r28
    3952:	e1 52       	subi	r30, 0x21	; 33
    3954:	fe 4f       	sbci	r31, 0xFE	; 254
    3956:	80 81       	ld	r24, Z
    3958:	91 81       	ldd	r25, Z+1	; 0x01
    395a:	01 97       	sbiw	r24, 0x01	; 1
    395c:	f1 f7       	brne	.-4      	; 0x395a <main+0x17fe>
    395e:	fe 01       	movw	r30, r28
    3960:	e1 52       	subi	r30, 0x21	; 33
    3962:	fe 4f       	sbci	r31, 0xFE	; 254
    3964:	91 83       	std	Z+1, r25	; 0x01
    3966:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3968:	de 01       	movw	r26, r28
    396a:	af 51       	subi	r26, 0x1F	; 31
    396c:	be 4f       	sbci	r27, 0xFE	; 254
    396e:	fe 01       	movw	r30, r28
    3970:	ef 51       	subi	r30, 0x1F	; 31
    3972:	fe 4f       	sbci	r31, 0xFE	; 254
    3974:	80 81       	ld	r24, Z
    3976:	91 81       	ldd	r25, Z+1	; 0x01
    3978:	01 97       	sbiw	r24, 0x01	; 1
    397a:	11 96       	adiw	r26, 0x01	; 1
    397c:	9c 93       	st	X, r25
    397e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3980:	fe 01       	movw	r30, r28
    3982:	ef 51       	subi	r30, 0x1F	; 31
    3984:	fe 4f       	sbci	r31, 0xFE	; 254
    3986:	80 81       	ld	r24, Z
    3988:	91 81       	ldd	r25, Z+1	; 0x01
    398a:	00 97       	sbiw	r24, 0x00	; 0
    398c:	d1 f6       	brne	.-76     	; 0x3942 <main+0x17e6>
    398e:	27 c0       	rjmp	.+78     	; 0x39de <main+0x1882>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3990:	8e 01       	movw	r16, r28
    3992:	0f 51       	subi	r16, 0x1F	; 31
    3994:	1e 4f       	sbci	r17, 0xFE	; 254
    3996:	fe 01       	movw	r30, r28
    3998:	ed 51       	subi	r30, 0x1D	; 29
    399a:	fe 4f       	sbci	r31, 0xFE	; 254
    399c:	60 81       	ld	r22, Z
    399e:	71 81       	ldd	r23, Z+1	; 0x01
    39a0:	82 81       	ldd	r24, Z+2	; 0x02
    39a2:	93 81       	ldd	r25, Z+3	; 0x03
    39a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a8:	dc 01       	movw	r26, r24
    39aa:	cb 01       	movw	r24, r22
    39ac:	f8 01       	movw	r30, r16
    39ae:	91 83       	std	Z+1, r25	; 0x01
    39b0:	80 83       	st	Z, r24
    39b2:	de 01       	movw	r26, r28
    39b4:	a3 52       	subi	r26, 0x23	; 35
    39b6:	be 4f       	sbci	r27, 0xFE	; 254
    39b8:	fe 01       	movw	r30, r28
    39ba:	ef 51       	subi	r30, 0x1F	; 31
    39bc:	fe 4f       	sbci	r31, 0xFE	; 254
    39be:	80 81       	ld	r24, Z
    39c0:	91 81       	ldd	r25, Z+1	; 0x01
    39c2:	8d 93       	st	X+, r24
    39c4:	9c 93       	st	X, r25
    39c6:	fe 01       	movw	r30, r28
    39c8:	e3 52       	subi	r30, 0x23	; 35
    39ca:	fe 4f       	sbci	r31, 0xFE	; 254
    39cc:	80 81       	ld	r24, Z
    39ce:	91 81       	ldd	r25, Z+1	; 0x01
    39d0:	01 97       	sbiw	r24, 0x01	; 1
    39d2:	f1 f7       	brne	.-4      	; 0x39d0 <main+0x1874>
    39d4:	fe 01       	movw	r30, r28
    39d6:	e3 52       	subi	r30, 0x23	; 35
    39d8:	fe 4f       	sbci	r31, 0xFE	; 254
    39da:	91 83       	std	Z+1, r25	; 0x01
    39dc:	80 83       	st	Z, r24
				_delay_ms(250);
				DIO_write(BUZZER_PORT,BUZZER_PIN,0);
    39de:	84 e4       	ldi	r24, 0x44	; 68
    39e0:	66 e0       	ldi	r22, 0x06	; 6
    39e2:	40 e0       	ldi	r20, 0x00	; 0
    39e4:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    39e8:	fe 01       	movw	r30, r28
    39ea:	e7 52       	subi	r30, 0x27	; 39
    39ec:	fe 4f       	sbci	r31, 0xFE	; 254
    39ee:	80 e0       	ldi	r24, 0x00	; 0
    39f0:	90 e8       	ldi	r25, 0x80	; 128
    39f2:	ab e3       	ldi	r26, 0x3B	; 59
    39f4:	b4 e4       	ldi	r27, 0x44	; 68
    39f6:	80 83       	st	Z, r24
    39f8:	91 83       	std	Z+1, r25	; 0x01
    39fa:	a2 83       	std	Z+2, r26	; 0x02
    39fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39fe:	8e 01       	movw	r16, r28
    3a00:	0b 52       	subi	r16, 0x2B	; 43
    3a02:	1e 4f       	sbci	r17, 0xFE	; 254
    3a04:	fe 01       	movw	r30, r28
    3a06:	e7 52       	subi	r30, 0x27	; 39
    3a08:	fe 4f       	sbci	r31, 0xFE	; 254
    3a0a:	60 81       	ld	r22, Z
    3a0c:	71 81       	ldd	r23, Z+1	; 0x01
    3a0e:	82 81       	ldd	r24, Z+2	; 0x02
    3a10:	93 81       	ldd	r25, Z+3	; 0x03
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	4a ef       	ldi	r20, 0xFA	; 250
    3a18:	54 e4       	ldi	r21, 0x44	; 68
    3a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1e:	dc 01       	movw	r26, r24
    3a20:	cb 01       	movw	r24, r22
    3a22:	f8 01       	movw	r30, r16
    3a24:	80 83       	st	Z, r24
    3a26:	91 83       	std	Z+1, r25	; 0x01
    3a28:	a2 83       	std	Z+2, r26	; 0x02
    3a2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	eb 52       	subi	r30, 0x2B	; 43
    3a30:	fe 4f       	sbci	r31, 0xFE	; 254
    3a32:	60 81       	ld	r22, Z
    3a34:	71 81       	ldd	r23, Z+1	; 0x01
    3a36:	82 81       	ldd	r24, Z+2	; 0x02
    3a38:	93 81       	ldd	r25, Z+3	; 0x03
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	40 e8       	ldi	r20, 0x80	; 128
    3a40:	5f e3       	ldi	r21, 0x3F	; 63
    3a42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a46:	88 23       	and	r24, r24
    3a48:	44 f4       	brge	.+16     	; 0x3a5a <main+0x18fe>
		__ticks = 1;
    3a4a:	fe 01       	movw	r30, r28
    3a4c:	ed 52       	subi	r30, 0x2D	; 45
    3a4e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a50:	81 e0       	ldi	r24, 0x01	; 1
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	91 83       	std	Z+1, r25	; 0x01
    3a56:	80 83       	st	Z, r24
    3a58:	65 c0       	rjmp	.+202    	; 0x3b24 <main+0x19c8>
	else if (__tmp > 65535)
    3a5a:	fe 01       	movw	r30, r28
    3a5c:	eb 52       	subi	r30, 0x2B	; 43
    3a5e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a60:	60 81       	ld	r22, Z
    3a62:	71 81       	ldd	r23, Z+1	; 0x01
    3a64:	82 81       	ldd	r24, Z+2	; 0x02
    3a66:	93 81       	ldd	r25, Z+3	; 0x03
    3a68:	20 e0       	ldi	r18, 0x00	; 0
    3a6a:	3f ef       	ldi	r19, 0xFF	; 255
    3a6c:	4f e7       	ldi	r20, 0x7F	; 127
    3a6e:	57 e4       	ldi	r21, 0x47	; 71
    3a70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a74:	18 16       	cp	r1, r24
    3a76:	0c f0       	brlt	.+2      	; 0x3a7a <main+0x191e>
    3a78:	44 c0       	rjmp	.+136    	; 0x3b02 <main+0x19a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a7a:	fe 01       	movw	r30, r28
    3a7c:	e7 52       	subi	r30, 0x27	; 39
    3a7e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a80:	60 81       	ld	r22, Z
    3a82:	71 81       	ldd	r23, Z+1	; 0x01
    3a84:	82 81       	ldd	r24, Z+2	; 0x02
    3a86:	93 81       	ldd	r25, Z+3	; 0x03
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	40 e2       	ldi	r20, 0x20	; 32
    3a8e:	51 e4       	ldi	r21, 0x41	; 65
    3a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a94:	dc 01       	movw	r26, r24
    3a96:	cb 01       	movw	r24, r22
    3a98:	8e 01       	movw	r16, r28
    3a9a:	0d 52       	subi	r16, 0x2D	; 45
    3a9c:	1e 4f       	sbci	r17, 0xFE	; 254
    3a9e:	bc 01       	movw	r22, r24
    3aa0:	cd 01       	movw	r24, r26
    3aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa6:	dc 01       	movw	r26, r24
    3aa8:	cb 01       	movw	r24, r22
    3aaa:	f8 01       	movw	r30, r16
    3aac:	91 83       	std	Z+1, r25	; 0x01
    3aae:	80 83       	st	Z, r24
    3ab0:	1f c0       	rjmp	.+62     	; 0x3af0 <main+0x1994>
    3ab2:	fe 01       	movw	r30, r28
    3ab4:	ef 52       	subi	r30, 0x2F	; 47
    3ab6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ab8:	88 ec       	ldi	r24, 0xC8	; 200
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	91 83       	std	Z+1, r25	; 0x01
    3abe:	80 83       	st	Z, r24
    3ac0:	fe 01       	movw	r30, r28
    3ac2:	ef 52       	subi	r30, 0x2F	; 47
    3ac4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ac6:	80 81       	ld	r24, Z
    3ac8:	91 81       	ldd	r25, Z+1	; 0x01
    3aca:	01 97       	sbiw	r24, 0x01	; 1
    3acc:	f1 f7       	brne	.-4      	; 0x3aca <main+0x196e>
    3ace:	fe 01       	movw	r30, r28
    3ad0:	ef 52       	subi	r30, 0x2F	; 47
    3ad2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ad4:	91 83       	std	Z+1, r25	; 0x01
    3ad6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ad8:	de 01       	movw	r26, r28
    3ada:	ad 52       	subi	r26, 0x2D	; 45
    3adc:	be 4f       	sbci	r27, 0xFE	; 254
    3ade:	fe 01       	movw	r30, r28
    3ae0:	ed 52       	subi	r30, 0x2D	; 45
    3ae2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ae4:	80 81       	ld	r24, Z
    3ae6:	91 81       	ldd	r25, Z+1	; 0x01
    3ae8:	01 97       	sbiw	r24, 0x01	; 1
    3aea:	11 96       	adiw	r26, 0x01	; 1
    3aec:	9c 93       	st	X, r25
    3aee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3af0:	fe 01       	movw	r30, r28
    3af2:	ed 52       	subi	r30, 0x2D	; 45
    3af4:	fe 4f       	sbci	r31, 0xFE	; 254
    3af6:	80 81       	ld	r24, Z
    3af8:	91 81       	ldd	r25, Z+1	; 0x01
    3afa:	00 97       	sbiw	r24, 0x00	; 0
    3afc:	d1 f6       	brne	.-76     	; 0x3ab2 <main+0x1956>
    3afe:	0c 94 d7 29 	jmp	0x53ae	; 0x53ae <main+0x3252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b02:	8e 01       	movw	r16, r28
    3b04:	0d 52       	subi	r16, 0x2D	; 45
    3b06:	1e 4f       	sbci	r17, 0xFE	; 254
    3b08:	fe 01       	movw	r30, r28
    3b0a:	eb 52       	subi	r30, 0x2B	; 43
    3b0c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b0e:	60 81       	ld	r22, Z
    3b10:	71 81       	ldd	r23, Z+1	; 0x01
    3b12:	82 81       	ldd	r24, Z+2	; 0x02
    3b14:	93 81       	ldd	r25, Z+3	; 0x03
    3b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b1a:	dc 01       	movw	r26, r24
    3b1c:	cb 01       	movw	r24, r22
    3b1e:	f8 01       	movw	r30, r16
    3b20:	91 83       	std	Z+1, r25	; 0x01
    3b22:	80 83       	st	Z, r24
    3b24:	de 01       	movw	r26, r28
    3b26:	a1 53       	subi	r26, 0x31	; 49
    3b28:	be 4f       	sbci	r27, 0xFE	; 254
    3b2a:	fe 01       	movw	r30, r28
    3b2c:	ed 52       	subi	r30, 0x2D	; 45
    3b2e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b30:	80 81       	ld	r24, Z
    3b32:	91 81       	ldd	r25, Z+1	; 0x01
    3b34:	11 96       	adiw	r26, 0x01	; 1
    3b36:	9c 93       	st	X, r25
    3b38:	8e 93       	st	-X, r24
    3b3a:	fe 01       	movw	r30, r28
    3b3c:	e1 53       	subi	r30, 0x31	; 49
    3b3e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b40:	80 81       	ld	r24, Z
    3b42:	91 81       	ldd	r25, Z+1	; 0x01
    3b44:	01 97       	sbiw	r24, 0x01	; 1
    3b46:	f1 f7       	brne	.-4      	; 0x3b44 <main+0x19e8>
    3b48:	fe 01       	movw	r30, r28
    3b4a:	e1 53       	subi	r30, 0x31	; 49
    3b4c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b4e:	91 83       	std	Z+1, r25	; 0x01
    3b50:	80 83       	st	Z, r24
    3b52:	0c 94 d7 29 	jmp	0x53ae	; 0x53ae <main+0x3252>
				_delay_ms(750);//Halt the system for the given time in (ms)
				continue;//return to the loop of login #while (login_mode==NO_MODE)# line 128
			}

			uint8 pass_counter=0;//counts the entered key of the password from the keypad
    3b56:	fe 01       	movw	r30, r28
    3b58:	ef 55       	subi	r30, 0x5F	; 95
    3b5a:	fd 4f       	sbci	r31, 0xFD	; 253
    3b5c:	10 82       	st	Z, r1
			uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire password that will be entered by the user to be check
    3b5e:	fe 01       	movw	r30, r28
    3b60:	e0 55       	subi	r30, 0x50	; 80
    3b62:	fd 4f       	sbci	r31, 0xFD	; 253
    3b64:	8f ef       	ldi	r24, 0xFF	; 255
    3b66:	80 83       	st	Z, r24
    3b68:	fe 01       	movw	r30, r28
    3b6a:	e0 55       	subi	r30, 0x50	; 80
    3b6c:	fd 4f       	sbci	r31, 0xFD	; 253
    3b6e:	8f ef       	ldi	r24, 0xFF	; 255
    3b70:	81 83       	std	Z+1, r24	; 0x01
    3b72:	fe 01       	movw	r30, r28
    3b74:	e0 55       	subi	r30, 0x50	; 80
    3b76:	fd 4f       	sbci	r31, 0xFD	; 253
    3b78:	8f ef       	ldi	r24, 0xFF	; 255
    3b7a:	82 83       	std	Z+2, r24	; 0x02
    3b7c:	fe 01       	movw	r30, r28
    3b7e:	e0 55       	subi	r30, 0x50	; 80
    3b80:	fd 4f       	sbci	r31, 0xFD	; 253
    3b82:	8f ef       	ldi	r24, 0xFF	; 255
    3b84:	83 83       	std	Z+3, r24	; 0x03
			uint8 stored_pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire stored password that is written by the user for the first time
    3b86:	fe 01       	movw	r30, r28
    3b88:	ec 54       	subi	r30, 0x4C	; 76
    3b8a:	fd 4f       	sbci	r31, 0xFD	; 253
    3b8c:	8f ef       	ldi	r24, 0xFF	; 255
    3b8e:	80 83       	st	Z, r24
    3b90:	fe 01       	movw	r30, r28
    3b92:	ec 54       	subi	r30, 0x4C	; 76
    3b94:	fd 4f       	sbci	r31, 0xFD	; 253
    3b96:	8f ef       	ldi	r24, 0xFF	; 255
    3b98:	81 83       	std	Z+1, r24	; 0x01
    3b9a:	fe 01       	movw	r30, r28
    3b9c:	ec 54       	subi	r30, 0x4C	; 76
    3b9e:	fd 4f       	sbci	r31, 0xFD	; 253
    3ba0:	8f ef       	ldi	r24, 0xFF	; 255
    3ba2:	82 83       	std	Z+2, r24	; 0x02
    3ba4:	fe 01       	movw	r30, r28
    3ba6:	ec 54       	subi	r30, 0x4C	; 76
    3ba8:	fd 4f       	sbci	r31, 0xFD	; 253
    3baa:	8f ef       	ldi	r24, 0xFF	; 255
    3bac:	83 83       	std	Z+3, r24	; 0x03

			switch(key_pressed)
    3bae:	fe 01       	movw	r30, r28
    3bb0:	eb 55       	subi	r30, 0x5B	; 91
    3bb2:	fd 4f       	sbci	r31, 0xFD	; 253
    3bb4:	80 81       	ld	r24, Z
    3bb6:	28 2f       	mov	r18, r24
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    3bba:	c6 54       	subi	r28, 0x46	; 70
    3bbc:	dd 4f       	sbci	r29, 0xFD	; 253
    3bbe:	39 83       	std	Y+1, r19	; 0x01
    3bc0:	28 83       	st	Y, r18
    3bc2:	ca 5b       	subi	r28, 0xBA	; 186
    3bc4:	d2 40       	sbci	r29, 0x02	; 2
    3bc6:	c6 54       	subi	r28, 0x46	; 70
    3bc8:	dd 4f       	sbci	r29, 0xFD	; 253
    3bca:	88 81       	ld	r24, Y
    3bcc:	99 81       	ldd	r25, Y+1	; 0x01
    3bce:	ca 5b       	subi	r28, 0xBA	; 186
    3bd0:	d2 40       	sbci	r29, 0x02	; 2
    3bd2:	80 33       	cpi	r24, 0x30	; 48
    3bd4:	91 05       	cpc	r25, r1
    3bd6:	09 f4       	brne	.+2      	; 0x3bda <main+0x1a7e>
    3bd8:	b0 c6       	rjmp	.+3424   	; 0x493a <main+0x27de>
    3bda:	c6 54       	subi	r28, 0x46	; 70
    3bdc:	dd 4f       	sbci	r29, 0xFD	; 253
    3bde:	e8 81       	ld	r30, Y
    3be0:	f9 81       	ldd	r31, Y+1	; 0x01
    3be2:	ca 5b       	subi	r28, 0xBA	; 186
    3be4:	d2 40       	sbci	r29, 0x02	; 2
    3be6:	e1 33       	cpi	r30, 0x31	; 49
    3be8:	f1 05       	cpc	r31, r1
    3bea:	11 f4       	brne	.+4      	; 0x3bf0 <main+0x1a94>
    3bec:	0c 94 d0 29 	jmp	0x53a0	; 0x53a0 <main+0x3244>
    3bf0:	0c 94 d7 29 	jmp	0x53ae	; 0x53ae <main+0x3252>
			{
			/********************************* Admin login **********************************************/
			case CHECK_ADMIN_MODE:
				while(login_mode!=ADMIN)//this loop is to repeat the login for admin in case of wrong password
				{
					key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
    3bf4:	fe 01       	movw	r30, r28
    3bf6:	eb 55       	subi	r30, 0x5B	; 91
    3bf8:	fd 4f       	sbci	r31, 0xFD	; 253
    3bfa:	8f ef       	ldi	r24, 0xFF	; 255
    3bfc:	80 83       	st	Z, r24
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    3bfe:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
					LCD_vSend_string("Admin mode");
    3c02:	89 e3       	ldi	r24, 0x39	; 57
    3c04:	91 e0       	ldi	r25, 0x01	; 1
    3c06:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
					LCD_movecursor(2,1);
    3c0a:	82 e0       	ldi	r24, 0x02	; 2
    3c0c:	61 e0       	ldi	r22, 0x01	; 1
    3c0e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
					LCD_vSend_string("Enter Pass:");
    3c12:	84 e4       	ldi	r24, 0x44	; 68
    3c14:	91 e0       	ldi	r25, 0x01	; 1
    3c16:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    3c1a:	fe 01       	movw	r30, r28
    3c1c:	e5 53       	subi	r30, 0x35	; 53
    3c1e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c20:	80 e0       	ldi	r24, 0x00	; 0
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	a8 e4       	ldi	r26, 0x48	; 72
    3c26:	b3 e4       	ldi	r27, 0x43	; 67
    3c28:	80 83       	st	Z, r24
    3c2a:	91 83       	std	Z+1, r25	; 0x01
    3c2c:	a2 83       	std	Z+2, r26	; 0x02
    3c2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c30:	8e 01       	movw	r16, r28
    3c32:	09 53       	subi	r16, 0x39	; 57
    3c34:	1e 4f       	sbci	r17, 0xFE	; 254
    3c36:	fe 01       	movw	r30, r28
    3c38:	e5 53       	subi	r30, 0x35	; 53
    3c3a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c3c:	60 81       	ld	r22, Z
    3c3e:	71 81       	ldd	r23, Z+1	; 0x01
    3c40:	82 81       	ldd	r24, Z+2	; 0x02
    3c42:	93 81       	ldd	r25, Z+3	; 0x03
    3c44:	20 e0       	ldi	r18, 0x00	; 0
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	4a ef       	ldi	r20, 0xFA	; 250
    3c4a:	54 e4       	ldi	r21, 0x44	; 68
    3c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	f8 01       	movw	r30, r16
    3c56:	80 83       	st	Z, r24
    3c58:	91 83       	std	Z+1, r25	; 0x01
    3c5a:	a2 83       	std	Z+2, r26	; 0x02
    3c5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c5e:	fe 01       	movw	r30, r28
    3c60:	e9 53       	subi	r30, 0x39	; 57
    3c62:	fe 4f       	sbci	r31, 0xFE	; 254
    3c64:	60 81       	ld	r22, Z
    3c66:	71 81       	ldd	r23, Z+1	; 0x01
    3c68:	82 81       	ldd	r24, Z+2	; 0x02
    3c6a:	93 81       	ldd	r25, Z+3	; 0x03
    3c6c:	20 e0       	ldi	r18, 0x00	; 0
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	40 e8       	ldi	r20, 0x80	; 128
    3c72:	5f e3       	ldi	r21, 0x3F	; 63
    3c74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c78:	88 23       	and	r24, r24
    3c7a:	44 f4       	brge	.+16     	; 0x3c8c <main+0x1b30>
		__ticks = 1;
    3c7c:	fe 01       	movw	r30, r28
    3c7e:	eb 53       	subi	r30, 0x3B	; 59
    3c80:	fe 4f       	sbci	r31, 0xFE	; 254
    3c82:	81 e0       	ldi	r24, 0x01	; 1
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	91 83       	std	Z+1, r25	; 0x01
    3c88:	80 83       	st	Z, r24
    3c8a:	64 c0       	rjmp	.+200    	; 0x3d54 <main+0x1bf8>
	else if (__tmp > 65535)
    3c8c:	fe 01       	movw	r30, r28
    3c8e:	e9 53       	subi	r30, 0x39	; 57
    3c90:	fe 4f       	sbci	r31, 0xFE	; 254
    3c92:	60 81       	ld	r22, Z
    3c94:	71 81       	ldd	r23, Z+1	; 0x01
    3c96:	82 81       	ldd	r24, Z+2	; 0x02
    3c98:	93 81       	ldd	r25, Z+3	; 0x03
    3c9a:	20 e0       	ldi	r18, 0x00	; 0
    3c9c:	3f ef       	ldi	r19, 0xFF	; 255
    3c9e:	4f e7       	ldi	r20, 0x7F	; 127
    3ca0:	57 e4       	ldi	r21, 0x47	; 71
    3ca2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ca6:	18 16       	cp	r1, r24
    3ca8:	0c f0       	brlt	.+2      	; 0x3cac <main+0x1b50>
    3caa:	43 c0       	rjmp	.+134    	; 0x3d32 <main+0x1bd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cac:	fe 01       	movw	r30, r28
    3cae:	e5 53       	subi	r30, 0x35	; 53
    3cb0:	fe 4f       	sbci	r31, 0xFE	; 254
    3cb2:	60 81       	ld	r22, Z
    3cb4:	71 81       	ldd	r23, Z+1	; 0x01
    3cb6:	82 81       	ldd	r24, Z+2	; 0x02
    3cb8:	93 81       	ldd	r25, Z+3	; 0x03
    3cba:	20 e0       	ldi	r18, 0x00	; 0
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	40 e2       	ldi	r20, 0x20	; 32
    3cc0:	51 e4       	ldi	r21, 0x41	; 65
    3cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc6:	dc 01       	movw	r26, r24
    3cc8:	cb 01       	movw	r24, r22
    3cca:	8e 01       	movw	r16, r28
    3ccc:	0b 53       	subi	r16, 0x3B	; 59
    3cce:	1e 4f       	sbci	r17, 0xFE	; 254
    3cd0:	bc 01       	movw	r22, r24
    3cd2:	cd 01       	movw	r24, r26
    3cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd8:	dc 01       	movw	r26, r24
    3cda:	cb 01       	movw	r24, r22
    3cdc:	f8 01       	movw	r30, r16
    3cde:	91 83       	std	Z+1, r25	; 0x01
    3ce0:	80 83       	st	Z, r24
    3ce2:	1f c0       	rjmp	.+62     	; 0x3d22 <main+0x1bc6>
    3ce4:	fe 01       	movw	r30, r28
    3ce6:	ed 53       	subi	r30, 0x3D	; 61
    3ce8:	fe 4f       	sbci	r31, 0xFE	; 254
    3cea:	88 ec       	ldi	r24, 0xC8	; 200
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	91 83       	std	Z+1, r25	; 0x01
    3cf0:	80 83       	st	Z, r24
    3cf2:	fe 01       	movw	r30, r28
    3cf4:	ed 53       	subi	r30, 0x3D	; 61
    3cf6:	fe 4f       	sbci	r31, 0xFE	; 254
    3cf8:	80 81       	ld	r24, Z
    3cfa:	91 81       	ldd	r25, Z+1	; 0x01
    3cfc:	01 97       	sbiw	r24, 0x01	; 1
    3cfe:	f1 f7       	brne	.-4      	; 0x3cfc <main+0x1ba0>
    3d00:	fe 01       	movw	r30, r28
    3d02:	ed 53       	subi	r30, 0x3D	; 61
    3d04:	fe 4f       	sbci	r31, 0xFE	; 254
    3d06:	91 83       	std	Z+1, r25	; 0x01
    3d08:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d0a:	de 01       	movw	r26, r28
    3d0c:	ab 53       	subi	r26, 0x3B	; 59
    3d0e:	be 4f       	sbci	r27, 0xFE	; 254
    3d10:	fe 01       	movw	r30, r28
    3d12:	eb 53       	subi	r30, 0x3B	; 59
    3d14:	fe 4f       	sbci	r31, 0xFE	; 254
    3d16:	80 81       	ld	r24, Z
    3d18:	91 81       	ldd	r25, Z+1	; 0x01
    3d1a:	01 97       	sbiw	r24, 0x01	; 1
    3d1c:	11 96       	adiw	r26, 0x01	; 1
    3d1e:	9c 93       	st	X, r25
    3d20:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d22:	fe 01       	movw	r30, r28
    3d24:	eb 53       	subi	r30, 0x3B	; 59
    3d26:	fe 4f       	sbci	r31, 0xFE	; 254
    3d28:	80 81       	ld	r24, Z
    3d2a:	91 81       	ldd	r25, Z+1	; 0x01
    3d2c:	00 97       	sbiw	r24, 0x00	; 0
    3d2e:	d1 f6       	brne	.-76     	; 0x3ce4 <main+0x1b88>
    3d30:	28 c0       	rjmp	.+80     	; 0x3d82 <main+0x1c26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d32:	8e 01       	movw	r16, r28
    3d34:	0b 53       	subi	r16, 0x3B	; 59
    3d36:	1e 4f       	sbci	r17, 0xFE	; 254
    3d38:	fe 01       	movw	r30, r28
    3d3a:	e9 53       	subi	r30, 0x39	; 57
    3d3c:	fe 4f       	sbci	r31, 0xFE	; 254
    3d3e:	60 81       	ld	r22, Z
    3d40:	71 81       	ldd	r23, Z+1	; 0x01
    3d42:	82 81       	ldd	r24, Z+2	; 0x02
    3d44:	93 81       	ldd	r25, Z+3	; 0x03
    3d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d4a:	dc 01       	movw	r26, r24
    3d4c:	cb 01       	movw	r24, r22
    3d4e:	f8 01       	movw	r30, r16
    3d50:	91 83       	std	Z+1, r25	; 0x01
    3d52:	80 83       	st	Z, r24
    3d54:	de 01       	movw	r26, r28
    3d56:	af 53       	subi	r26, 0x3F	; 63
    3d58:	be 4f       	sbci	r27, 0xFE	; 254
    3d5a:	fe 01       	movw	r30, r28
    3d5c:	eb 53       	subi	r30, 0x3B	; 59
    3d5e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d60:	80 81       	ld	r24, Z
    3d62:	91 81       	ldd	r25, Z+1	; 0x01
    3d64:	11 96       	adiw	r26, 0x01	; 1
    3d66:	9c 93       	st	X, r25
    3d68:	8e 93       	st	-X, r24
    3d6a:	fe 01       	movw	r30, r28
    3d6c:	ef 53       	subi	r30, 0x3F	; 63
    3d6e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d70:	80 81       	ld	r24, Z
    3d72:	91 81       	ldd	r25, Z+1	; 0x01
    3d74:	01 97       	sbiw	r24, 0x01	; 1
    3d76:	f1 f7       	brne	.-4      	; 0x3d74 <main+0x1c18>
    3d78:	fe 01       	movw	r30, r28
    3d7a:	ef 53       	subi	r30, 0x3F	; 63
    3d7c:	fe 4f       	sbci	r31, 0xFE	; 254
    3d7e:	91 83       	std	Z+1, r25	; 0x01
    3d80:	80 83       	st	Z, r24
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
    3d82:	fe 01       	movw	r30, r28
    3d84:	ef 55       	subi	r30, 0x5F	; 95
    3d86:	fd 4f       	sbci	r31, 0xFD	; 253
    3d88:	10 82       	st	Z, r1
    3d8a:	a4 c1       	rjmp	.+840    	; 0x40d4 <main+0x1f78>
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
						{
							key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
    3d8c:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <keypad_u8check_press>
    3d90:	fe 01       	movw	r30, r28
    3d92:	eb 55       	subi	r30, 0x5B	; 91
    3d94:	fd 4f       	sbci	r31, 0xFD	; 253
    3d96:	80 83       	st	Z, r24
					LCD_vSend_string("Enter Pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
    3d98:	fe 01       	movw	r30, r28
    3d9a:	eb 55       	subi	r30, 0x5B	; 91
    3d9c:	fd 4f       	sbci	r31, 0xFD	; 253
    3d9e:	80 81       	ld	r24, Z
    3da0:	8f 3f       	cpi	r24, 0xFF	; 255
    3da2:	a1 f3       	breq	.-24     	; 0x3d8c <main+0x1c30>
						{
							key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
						}
						pass[pass_counter]=key_pressed;//add the entered character to the pass array
    3da4:	fe 01       	movw	r30, r28
    3da6:	ef 55       	subi	r30, 0x5F	; 95
    3da8:	fd 4f       	sbci	r31, 0xFD	; 253
    3daa:	80 81       	ld	r24, Z
    3dac:	28 2f       	mov	r18, r24
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	ce 01       	movw	r24, r28
    3db2:	80 55       	subi	r24, 0x50	; 80
    3db4:	9d 4f       	sbci	r25, 0xFD	; 253
    3db6:	dc 01       	movw	r26, r24
    3db8:	a2 0f       	add	r26, r18
    3dba:	b3 1f       	adc	r27, r19
    3dbc:	fe 01       	movw	r30, r28
    3dbe:	eb 55       	subi	r30, 0x5B	; 91
    3dc0:	fd 4f       	sbci	r31, 0xFD	; 253
    3dc2:	80 81       	ld	r24, Z
    3dc4:	8c 93       	st	X, r24
						LCD_vSend_char(key_pressed);//print the entered character
    3dc6:	fe 01       	movw	r30, r28
    3dc8:	eb 55       	subi	r30, 0x5B	; 91
    3dca:	fd 4f       	sbci	r31, 0xFD	; 253
    3dcc:	80 81       	ld	r24, Z
    3dce:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
    3dd2:	fe 01       	movw	r30, r28
    3dd4:	e3 54       	subi	r30, 0x43	; 67
    3dd6:	fe 4f       	sbci	r31, 0xFE	; 254
    3dd8:	80 e0       	ldi	r24, 0x00	; 0
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	a6 e9       	ldi	r26, 0x96	; 150
    3dde:	b3 e4       	ldi	r27, 0x43	; 67
    3de0:	80 83       	st	Z, r24
    3de2:	91 83       	std	Z+1, r25	; 0x01
    3de4:	a2 83       	std	Z+2, r26	; 0x02
    3de6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3de8:	8e 01       	movw	r16, r28
    3dea:	07 54       	subi	r16, 0x47	; 71
    3dec:	1e 4f       	sbci	r17, 0xFE	; 254
    3dee:	fe 01       	movw	r30, r28
    3df0:	e3 54       	subi	r30, 0x43	; 67
    3df2:	fe 4f       	sbci	r31, 0xFE	; 254
    3df4:	60 81       	ld	r22, Z
    3df6:	71 81       	ldd	r23, Z+1	; 0x01
    3df8:	82 81       	ldd	r24, Z+2	; 0x02
    3dfa:	93 81       	ldd	r25, Z+3	; 0x03
    3dfc:	20 e0       	ldi	r18, 0x00	; 0
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	4a ef       	ldi	r20, 0xFA	; 250
    3e02:	54 e4       	ldi	r21, 0x44	; 68
    3e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e08:	dc 01       	movw	r26, r24
    3e0a:	cb 01       	movw	r24, r22
    3e0c:	f8 01       	movw	r30, r16
    3e0e:	80 83       	st	Z, r24
    3e10:	91 83       	std	Z+1, r25	; 0x01
    3e12:	a2 83       	std	Z+2, r26	; 0x02
    3e14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e16:	fe 01       	movw	r30, r28
    3e18:	e7 54       	subi	r30, 0x47	; 71
    3e1a:	fe 4f       	sbci	r31, 0xFE	; 254
    3e1c:	60 81       	ld	r22, Z
    3e1e:	71 81       	ldd	r23, Z+1	; 0x01
    3e20:	82 81       	ldd	r24, Z+2	; 0x02
    3e22:	93 81       	ldd	r25, Z+3	; 0x03
    3e24:	20 e0       	ldi	r18, 0x00	; 0
    3e26:	30 e0       	ldi	r19, 0x00	; 0
    3e28:	40 e8       	ldi	r20, 0x80	; 128
    3e2a:	5f e3       	ldi	r21, 0x3F	; 63
    3e2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e30:	88 23       	and	r24, r24
    3e32:	44 f4       	brge	.+16     	; 0x3e44 <main+0x1ce8>
		__ticks = 1;
    3e34:	fe 01       	movw	r30, r28
    3e36:	e9 54       	subi	r30, 0x49	; 73
    3e38:	fe 4f       	sbci	r31, 0xFE	; 254
    3e3a:	81 e0       	ldi	r24, 0x01	; 1
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	91 83       	std	Z+1, r25	; 0x01
    3e40:	80 83       	st	Z, r24
    3e42:	64 c0       	rjmp	.+200    	; 0x3f0c <main+0x1db0>
	else if (__tmp > 65535)
    3e44:	fe 01       	movw	r30, r28
    3e46:	e7 54       	subi	r30, 0x47	; 71
    3e48:	fe 4f       	sbci	r31, 0xFE	; 254
    3e4a:	60 81       	ld	r22, Z
    3e4c:	71 81       	ldd	r23, Z+1	; 0x01
    3e4e:	82 81       	ldd	r24, Z+2	; 0x02
    3e50:	93 81       	ldd	r25, Z+3	; 0x03
    3e52:	20 e0       	ldi	r18, 0x00	; 0
    3e54:	3f ef       	ldi	r19, 0xFF	; 255
    3e56:	4f e7       	ldi	r20, 0x7F	; 127
    3e58:	57 e4       	ldi	r21, 0x47	; 71
    3e5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e5e:	18 16       	cp	r1, r24
    3e60:	0c f0       	brlt	.+2      	; 0x3e64 <main+0x1d08>
    3e62:	43 c0       	rjmp	.+134    	; 0x3eea <main+0x1d8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e64:	fe 01       	movw	r30, r28
    3e66:	e3 54       	subi	r30, 0x43	; 67
    3e68:	fe 4f       	sbci	r31, 0xFE	; 254
    3e6a:	60 81       	ld	r22, Z
    3e6c:	71 81       	ldd	r23, Z+1	; 0x01
    3e6e:	82 81       	ldd	r24, Z+2	; 0x02
    3e70:	93 81       	ldd	r25, Z+3	; 0x03
    3e72:	20 e0       	ldi	r18, 0x00	; 0
    3e74:	30 e0       	ldi	r19, 0x00	; 0
    3e76:	40 e2       	ldi	r20, 0x20	; 32
    3e78:	51 e4       	ldi	r21, 0x41	; 65
    3e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e7e:	dc 01       	movw	r26, r24
    3e80:	cb 01       	movw	r24, r22
    3e82:	8e 01       	movw	r16, r28
    3e84:	09 54       	subi	r16, 0x49	; 73
    3e86:	1e 4f       	sbci	r17, 0xFE	; 254
    3e88:	bc 01       	movw	r22, r24
    3e8a:	cd 01       	movw	r24, r26
    3e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e90:	dc 01       	movw	r26, r24
    3e92:	cb 01       	movw	r24, r22
    3e94:	f8 01       	movw	r30, r16
    3e96:	91 83       	std	Z+1, r25	; 0x01
    3e98:	80 83       	st	Z, r24
    3e9a:	1f c0       	rjmp	.+62     	; 0x3eda <main+0x1d7e>
    3e9c:	fe 01       	movw	r30, r28
    3e9e:	eb 54       	subi	r30, 0x4B	; 75
    3ea0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ea2:	88 ec       	ldi	r24, 0xC8	; 200
    3ea4:	90 e0       	ldi	r25, 0x00	; 0
    3ea6:	91 83       	std	Z+1, r25	; 0x01
    3ea8:	80 83       	st	Z, r24
    3eaa:	fe 01       	movw	r30, r28
    3eac:	eb 54       	subi	r30, 0x4B	; 75
    3eae:	fe 4f       	sbci	r31, 0xFE	; 254
    3eb0:	80 81       	ld	r24, Z
    3eb2:	91 81       	ldd	r25, Z+1	; 0x01
    3eb4:	01 97       	sbiw	r24, 0x01	; 1
    3eb6:	f1 f7       	brne	.-4      	; 0x3eb4 <main+0x1d58>
    3eb8:	fe 01       	movw	r30, r28
    3eba:	eb 54       	subi	r30, 0x4B	; 75
    3ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    3ebe:	91 83       	std	Z+1, r25	; 0x01
    3ec0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ec2:	de 01       	movw	r26, r28
    3ec4:	a9 54       	subi	r26, 0x49	; 73
    3ec6:	be 4f       	sbci	r27, 0xFE	; 254
    3ec8:	fe 01       	movw	r30, r28
    3eca:	e9 54       	subi	r30, 0x49	; 73
    3ecc:	fe 4f       	sbci	r31, 0xFE	; 254
    3ece:	80 81       	ld	r24, Z
    3ed0:	91 81       	ldd	r25, Z+1	; 0x01
    3ed2:	01 97       	sbiw	r24, 0x01	; 1
    3ed4:	11 96       	adiw	r26, 0x01	; 1
    3ed6:	9c 93       	st	X, r25
    3ed8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eda:	fe 01       	movw	r30, r28
    3edc:	e9 54       	subi	r30, 0x49	; 73
    3ede:	fe 4f       	sbci	r31, 0xFE	; 254
    3ee0:	80 81       	ld	r24, Z
    3ee2:	91 81       	ldd	r25, Z+1	; 0x01
    3ee4:	00 97       	sbiw	r24, 0x00	; 0
    3ee6:	d1 f6       	brne	.-76     	; 0x3e9c <main+0x1d40>
    3ee8:	27 c0       	rjmp	.+78     	; 0x3f38 <main+0x1ddc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eea:	8e 01       	movw	r16, r28
    3eec:	09 54       	subi	r16, 0x49	; 73
    3eee:	1e 4f       	sbci	r17, 0xFE	; 254
    3ef0:	fe 01       	movw	r30, r28
    3ef2:	e7 54       	subi	r30, 0x47	; 71
    3ef4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ef6:	60 81       	ld	r22, Z
    3ef8:	71 81       	ldd	r23, Z+1	; 0x01
    3efa:	82 81       	ldd	r24, Z+2	; 0x02
    3efc:	93 81       	ldd	r25, Z+3	; 0x03
    3efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f02:	dc 01       	movw	r26, r24
    3f04:	cb 01       	movw	r24, r22
    3f06:	f8 01       	movw	r30, r16
    3f08:	91 83       	std	Z+1, r25	; 0x01
    3f0a:	80 83       	st	Z, r24
    3f0c:	de 01       	movw	r26, r28
    3f0e:	ad 54       	subi	r26, 0x4D	; 77
    3f10:	be 4f       	sbci	r27, 0xFE	; 254
    3f12:	fe 01       	movw	r30, r28
    3f14:	e9 54       	subi	r30, 0x49	; 73
    3f16:	fe 4f       	sbci	r31, 0xFE	; 254
    3f18:	80 81       	ld	r24, Z
    3f1a:	91 81       	ldd	r25, Z+1	; 0x01
    3f1c:	8d 93       	st	X+, r24
    3f1e:	9c 93       	st	X, r25
    3f20:	fe 01       	movw	r30, r28
    3f22:	ed 54       	subi	r30, 0x4D	; 77
    3f24:	fe 4f       	sbci	r31, 0xFE	; 254
    3f26:	80 81       	ld	r24, Z
    3f28:	91 81       	ldd	r25, Z+1	; 0x01
    3f2a:	01 97       	sbiw	r24, 0x01	; 1
    3f2c:	f1 f7       	brne	.-4      	; 0x3f2a <main+0x1dce>
    3f2e:	fe 01       	movw	r30, r28
    3f30:	ed 54       	subi	r30, 0x4D	; 77
    3f32:	fe 4f       	sbci	r31, 0xFE	; 254
    3f34:	91 83       	std	Z+1, r25	; 0x01
    3f36:	80 83       	st	Z, r24
						_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
						LCD_movecursor(2,12+pass_counter);//move the cursor of the lcd screen to the previous location
    3f38:	fe 01       	movw	r30, r28
    3f3a:	ef 55       	subi	r30, 0x5F	; 95
    3f3c:	fd 4f       	sbci	r31, 0xFD	; 253
    3f3e:	80 81       	ld	r24, Z
    3f40:	98 2f       	mov	r25, r24
    3f42:	94 5f       	subi	r25, 0xF4	; 244
    3f44:	82 e0       	ldi	r24, 0x02	; 2
    3f46:	69 2f       	mov	r22, r25
    3f48:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
						LCD_vSend_char(PASSWORD_SYMBOL);// to display (Password sign *)
    3f4c:	8a e2       	ldi	r24, 0x2A	; 42
    3f4e:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
    3f52:	fe 01       	movw	r30, r28
    3f54:	e1 55       	subi	r30, 0x51	; 81
    3f56:	fe 4f       	sbci	r31, 0xFE	; 254
    3f58:	80 e0       	ldi	r24, 0x00	; 0
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	a8 ec       	ldi	r26, 0xC8	; 200
    3f5e:	b2 e4       	ldi	r27, 0x42	; 66
    3f60:	80 83       	st	Z, r24
    3f62:	91 83       	std	Z+1, r25	; 0x01
    3f64:	a2 83       	std	Z+2, r26	; 0x02
    3f66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f68:	8e 01       	movw	r16, r28
    3f6a:	05 55       	subi	r16, 0x55	; 85
    3f6c:	1e 4f       	sbci	r17, 0xFE	; 254
    3f6e:	fe 01       	movw	r30, r28
    3f70:	e1 55       	subi	r30, 0x51	; 81
    3f72:	fe 4f       	sbci	r31, 0xFE	; 254
    3f74:	60 81       	ld	r22, Z
    3f76:	71 81       	ldd	r23, Z+1	; 0x01
    3f78:	82 81       	ldd	r24, Z+2	; 0x02
    3f7a:	93 81       	ldd	r25, Z+3	; 0x03
    3f7c:	20 e0       	ldi	r18, 0x00	; 0
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	4a ef       	ldi	r20, 0xFA	; 250
    3f82:	54 e4       	ldi	r21, 0x44	; 68
    3f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f88:	dc 01       	movw	r26, r24
    3f8a:	cb 01       	movw	r24, r22
    3f8c:	f8 01       	movw	r30, r16
    3f8e:	80 83       	st	Z, r24
    3f90:	91 83       	std	Z+1, r25	; 0x01
    3f92:	a2 83       	std	Z+2, r26	; 0x02
    3f94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f96:	fe 01       	movw	r30, r28
    3f98:	e5 55       	subi	r30, 0x55	; 85
    3f9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f9c:	60 81       	ld	r22, Z
    3f9e:	71 81       	ldd	r23, Z+1	; 0x01
    3fa0:	82 81       	ldd	r24, Z+2	; 0x02
    3fa2:	93 81       	ldd	r25, Z+3	; 0x03
    3fa4:	20 e0       	ldi	r18, 0x00	; 0
    3fa6:	30 e0       	ldi	r19, 0x00	; 0
    3fa8:	40 e8       	ldi	r20, 0x80	; 128
    3faa:	5f e3       	ldi	r21, 0x3F	; 63
    3fac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fb0:	88 23       	and	r24, r24
    3fb2:	44 f4       	brge	.+16     	; 0x3fc4 <main+0x1e68>
		__ticks = 1;
    3fb4:	fe 01       	movw	r30, r28
    3fb6:	e7 55       	subi	r30, 0x57	; 87
    3fb8:	fe 4f       	sbci	r31, 0xFE	; 254
    3fba:	81 e0       	ldi	r24, 0x01	; 1
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	91 83       	std	Z+1, r25	; 0x01
    3fc0:	80 83       	st	Z, r24
    3fc2:	64 c0       	rjmp	.+200    	; 0x408c <main+0x1f30>
	else if (__tmp > 65535)
    3fc4:	fe 01       	movw	r30, r28
    3fc6:	e5 55       	subi	r30, 0x55	; 85
    3fc8:	fe 4f       	sbci	r31, 0xFE	; 254
    3fca:	60 81       	ld	r22, Z
    3fcc:	71 81       	ldd	r23, Z+1	; 0x01
    3fce:	82 81       	ldd	r24, Z+2	; 0x02
    3fd0:	93 81       	ldd	r25, Z+3	; 0x03
    3fd2:	20 e0       	ldi	r18, 0x00	; 0
    3fd4:	3f ef       	ldi	r19, 0xFF	; 255
    3fd6:	4f e7       	ldi	r20, 0x7F	; 127
    3fd8:	57 e4       	ldi	r21, 0x47	; 71
    3fda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fde:	18 16       	cp	r1, r24
    3fe0:	0c f0       	brlt	.+2      	; 0x3fe4 <main+0x1e88>
    3fe2:	43 c0       	rjmp	.+134    	; 0x406a <main+0x1f0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fe4:	fe 01       	movw	r30, r28
    3fe6:	e1 55       	subi	r30, 0x51	; 81
    3fe8:	fe 4f       	sbci	r31, 0xFE	; 254
    3fea:	60 81       	ld	r22, Z
    3fec:	71 81       	ldd	r23, Z+1	; 0x01
    3fee:	82 81       	ldd	r24, Z+2	; 0x02
    3ff0:	93 81       	ldd	r25, Z+3	; 0x03
    3ff2:	20 e0       	ldi	r18, 0x00	; 0
    3ff4:	30 e0       	ldi	r19, 0x00	; 0
    3ff6:	40 e2       	ldi	r20, 0x20	; 32
    3ff8:	51 e4       	ldi	r21, 0x41	; 65
    3ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ffe:	dc 01       	movw	r26, r24
    4000:	cb 01       	movw	r24, r22
    4002:	8e 01       	movw	r16, r28
    4004:	07 55       	subi	r16, 0x57	; 87
    4006:	1e 4f       	sbci	r17, 0xFE	; 254
    4008:	bc 01       	movw	r22, r24
    400a:	cd 01       	movw	r24, r26
    400c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4010:	dc 01       	movw	r26, r24
    4012:	cb 01       	movw	r24, r22
    4014:	f8 01       	movw	r30, r16
    4016:	91 83       	std	Z+1, r25	; 0x01
    4018:	80 83       	st	Z, r24
    401a:	1f c0       	rjmp	.+62     	; 0x405a <main+0x1efe>
    401c:	fe 01       	movw	r30, r28
    401e:	e9 55       	subi	r30, 0x59	; 89
    4020:	fe 4f       	sbci	r31, 0xFE	; 254
    4022:	88 ec       	ldi	r24, 0xC8	; 200
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	91 83       	std	Z+1, r25	; 0x01
    4028:	80 83       	st	Z, r24
    402a:	fe 01       	movw	r30, r28
    402c:	e9 55       	subi	r30, 0x59	; 89
    402e:	fe 4f       	sbci	r31, 0xFE	; 254
    4030:	80 81       	ld	r24, Z
    4032:	91 81       	ldd	r25, Z+1	; 0x01
    4034:	01 97       	sbiw	r24, 0x01	; 1
    4036:	f1 f7       	brne	.-4      	; 0x4034 <main+0x1ed8>
    4038:	fe 01       	movw	r30, r28
    403a:	e9 55       	subi	r30, 0x59	; 89
    403c:	fe 4f       	sbci	r31, 0xFE	; 254
    403e:	91 83       	std	Z+1, r25	; 0x01
    4040:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4042:	de 01       	movw	r26, r28
    4044:	a7 55       	subi	r26, 0x57	; 87
    4046:	be 4f       	sbci	r27, 0xFE	; 254
    4048:	fe 01       	movw	r30, r28
    404a:	e7 55       	subi	r30, 0x57	; 87
    404c:	fe 4f       	sbci	r31, 0xFE	; 254
    404e:	80 81       	ld	r24, Z
    4050:	91 81       	ldd	r25, Z+1	; 0x01
    4052:	01 97       	sbiw	r24, 0x01	; 1
    4054:	11 96       	adiw	r26, 0x01	; 1
    4056:	9c 93       	st	X, r25
    4058:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    405a:	fe 01       	movw	r30, r28
    405c:	e7 55       	subi	r30, 0x57	; 87
    405e:	fe 4f       	sbci	r31, 0xFE	; 254
    4060:	80 81       	ld	r24, Z
    4062:	91 81       	ldd	r25, Z+1	; 0x01
    4064:	00 97       	sbiw	r24, 0x00	; 0
    4066:	d1 f6       	brne	.-76     	; 0x401c <main+0x1ec0>
    4068:	27 c0       	rjmp	.+78     	; 0x40b8 <main+0x1f5c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    406a:	8e 01       	movw	r16, r28
    406c:	07 55       	subi	r16, 0x57	; 87
    406e:	1e 4f       	sbci	r17, 0xFE	; 254
    4070:	fe 01       	movw	r30, r28
    4072:	e5 55       	subi	r30, 0x55	; 85
    4074:	fe 4f       	sbci	r31, 0xFE	; 254
    4076:	60 81       	ld	r22, Z
    4078:	71 81       	ldd	r23, Z+1	; 0x01
    407a:	82 81       	ldd	r24, Z+2	; 0x02
    407c:	93 81       	ldd	r25, Z+3	; 0x03
    407e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4082:	dc 01       	movw	r26, r24
    4084:	cb 01       	movw	r24, r22
    4086:	f8 01       	movw	r30, r16
    4088:	91 83       	std	Z+1, r25	; 0x01
    408a:	80 83       	st	Z, r24
    408c:	de 01       	movw	r26, r28
    408e:	ab 55       	subi	r26, 0x5B	; 91
    4090:	be 4f       	sbci	r27, 0xFE	; 254
    4092:	fe 01       	movw	r30, r28
    4094:	e7 55       	subi	r30, 0x57	; 87
    4096:	fe 4f       	sbci	r31, 0xFE	; 254
    4098:	80 81       	ld	r24, Z
    409a:	91 81       	ldd	r25, Z+1	; 0x01
    409c:	8d 93       	st	X+, r24
    409e:	9c 93       	st	X, r25
    40a0:	fe 01       	movw	r30, r28
    40a2:	eb 55       	subi	r30, 0x5B	; 91
    40a4:	fe 4f       	sbci	r31, 0xFE	; 254
    40a6:	80 81       	ld	r24, Z
    40a8:	91 81       	ldd	r25, Z+1	; 0x01
    40aa:	01 97       	sbiw	r24, 0x01	; 1
    40ac:	f1 f7       	brne	.-4      	; 0x40aa <main+0x1f4e>
    40ae:	fe 01       	movw	r30, r28
    40b0:	eb 55       	subi	r30, 0x5B	; 91
    40b2:	fe 4f       	sbci	r31, 0xFE	; 254
    40b4:	91 83       	std	Z+1, r25	; 0x01
    40b6:	80 83       	st	Z, r24
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
    40b8:	de 01       	movw	r26, r28
    40ba:	af 55       	subi	r26, 0x5F	; 95
    40bc:	bd 4f       	sbci	r27, 0xFD	; 253
    40be:	fe 01       	movw	r30, r28
    40c0:	ef 55       	subi	r30, 0x5F	; 95
    40c2:	fd 4f       	sbci	r31, 0xFD	; 253
    40c4:	80 81       	ld	r24, Z
    40c6:	8f 5f       	subi	r24, 0xFF	; 255
    40c8:	8c 93       	st	X, r24
						key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
    40ca:	fe 01       	movw	r30, r28
    40cc:	eb 55       	subi	r30, 0x5B	; 91
    40ce:	fd 4f       	sbci	r31, 0xFD	; 253
    40d0:	8f ef       	ldi	r24, 0xFF	; 255
    40d2:	80 83       	st	Z, r24
					LCD_vSend_string("Admin mode");
					LCD_movecursor(2,1);
					LCD_vSend_string("Enter Pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
    40d4:	fe 01       	movw	r30, r28
    40d6:	ef 55       	subi	r30, 0x5F	; 95
    40d8:	fd 4f       	sbci	r31, 0xFD	; 253
    40da:	80 81       	ld	r24, Z
    40dc:	84 30       	cpi	r24, 0x04	; 4
    40de:	08 f4       	brcc	.+2      	; 0x40e2 <main+0x1f86>
    40e0:	5b ce       	rjmp	.-842    	; 0x3d98 <main+0x1c3c>
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					}
					//eeprom_read_block (EEPROM_ADMIN_ADDRESS,stored_pass,PASS_SIZE);//read the stored pass from the EEPROM
					for(pass_counter=0;pass_counter<PASS_SIZE;pass_counter++)
    40e2:	fe 01       	movw	r30, r28
    40e4:	ef 55       	subi	r30, 0x5F	; 95
    40e6:	fd 4f       	sbci	r31, 0xFD	; 253
    40e8:	10 82       	st	Z, r1
    40ea:	20 c0       	rjmp	.+64     	; 0x412c <main+0x1fd0>
					{
						stored_pass[pass_counter]=eeprom_read_byte ((EEPROM_ADMIN_ADDRESS + pass_counter));
    40ec:	fe 01       	movw	r30, r28
    40ee:	ef 55       	subi	r30, 0x5F	; 95
    40f0:	fd 4f       	sbci	r31, 0xFD	; 253
    40f2:	80 81       	ld	r24, Z
    40f4:	08 2f       	mov	r16, r24
    40f6:	10 e0       	ldi	r17, 0x00	; 0
    40f8:	fe 01       	movw	r30, r28
    40fa:	ef 55       	subi	r30, 0x5F	; 95
    40fc:	fd 4f       	sbci	r31, 0xFD	; 253
    40fe:	80 81       	ld	r24, Z
    4100:	88 2f       	mov	r24, r24
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	c0 96       	adiw	r24, 0x30	; 48
    4106:	0e 94 92 3d 	call	0x7b24	; 0x7b24 <__eerd_byte_m32>
    410a:	28 2f       	mov	r18, r24
    410c:	ce 01       	movw	r24, r28
    410e:	8c 54       	subi	r24, 0x4C	; 76
    4110:	9d 4f       	sbci	r25, 0xFD	; 253
    4112:	fc 01       	movw	r30, r24
    4114:	e0 0f       	add	r30, r16
    4116:	f1 1f       	adc	r31, r17
    4118:	20 83       	st	Z, r18
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					}
					//eeprom_read_block (EEPROM_ADMIN_ADDRESS,stored_pass,PASS_SIZE);//read the stored pass from the EEPROM
					for(pass_counter=0;pass_counter<PASS_SIZE;pass_counter++)
    411a:	de 01       	movw	r26, r28
    411c:	af 55       	subi	r26, 0x5F	; 95
    411e:	bd 4f       	sbci	r27, 0xFD	; 253
    4120:	fe 01       	movw	r30, r28
    4122:	ef 55       	subi	r30, 0x5F	; 95
    4124:	fd 4f       	sbci	r31, 0xFD	; 253
    4126:	80 81       	ld	r24, Z
    4128:	8f 5f       	subi	r24, 0xFF	; 255
    412a:	8c 93       	st	X, r24
    412c:	fe 01       	movw	r30, r28
    412e:	ef 55       	subi	r30, 0x5F	; 95
    4130:	fd 4f       	sbci	r31, 0xFD	; 253
    4132:	80 81       	ld	r24, Z
    4134:	84 30       	cpi	r24, 0x04	; 4
    4136:	d0 f2       	brcs	.-76     	; 0x40ec <main+0x1f90>
					{
						stored_pass[pass_counter]=eeprom_read_byte ((EEPROM_ADMIN_ADDRESS + pass_counter));
					}
					/*compare passwords*/
					if ((ui8ComparePass(pass,stored_pass,PASS_SIZE)) == TRUE)//in case of right password
    4138:	ce 01       	movw	r24, r28
    413a:	80 55       	subi	r24, 0x50	; 80
    413c:	9d 4f       	sbci	r25, 0xFD	; 253
    413e:	9e 01       	movw	r18, r28
    4140:	2c 54       	subi	r18, 0x4C	; 76
    4142:	3d 4f       	sbci	r19, 0xFD	; 253
    4144:	b9 01       	movw	r22, r18
    4146:	44 e0       	ldi	r20, 0x04	; 4
    4148:	0e 94 7a 39 	call	0x72f4	; 0x72f4 <ui8ComparePass>
    414c:	81 30       	cpi	r24, 0x01	; 1
    414e:	09 f0       	breq	.+2      	; 0x4152 <main+0x1ff6>
    4150:	4c c2       	rjmp	.+1176   	; 0x45ea <main+0x248e>
					{
						login_mode = ADMIN;//set the login mode to admin mode
    4152:	fe 01       	movw	r30, r28
    4154:	e9 55       	subi	r30, 0x59	; 89
    4156:	fd 4f       	sbci	r31, 0xFD	; 253
    4158:	81 e0       	ldi	r24, 0x01	; 1
    415a:	80 83       	st	Z, r24
						pass_tries_count=0;//clear the counter of wrong tries
    415c:	fe 01       	movw	r30, r28
    415e:	ed 55       	subi	r30, 0x5D	; 93
    4160:	fd 4f       	sbci	r31, 0xFD	; 253
    4162:	10 82       	st	Z, r1
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    4164:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						LCD_vSend_string("Right pass");
    4168:	80 e5       	ldi	r24, 0x50	; 80
    416a:	91 e0       	ldi	r25, 0x01	; 1
    416c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
						LCD_movecursor(2,1);
    4170:	82 e0       	ldi	r24, 0x02	; 2
    4172:	61 e0       	ldi	r22, 0x01	; 1
    4174:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
						LCD_vSend_string("Admin mode");
    4178:	89 e3       	ldi	r24, 0x39	; 57
    417a:	91 e0       	ldi	r25, 0x01	; 1
    417c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    4180:	fe 01       	movw	r30, r28
    4182:	ef 55       	subi	r30, 0x5F	; 95
    4184:	fe 4f       	sbci	r31, 0xFE	; 254
    4186:	80 e0       	ldi	r24, 0x00	; 0
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	aa ef       	ldi	r26, 0xFA	; 250
    418c:	b3 e4       	ldi	r27, 0x43	; 67
    418e:	80 83       	st	Z, r24
    4190:	91 83       	std	Z+1, r25	; 0x01
    4192:	a2 83       	std	Z+2, r26	; 0x02
    4194:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4196:	8e 01       	movw	r16, r28
    4198:	03 56       	subi	r16, 0x63	; 99
    419a:	1e 4f       	sbci	r17, 0xFE	; 254
    419c:	fe 01       	movw	r30, r28
    419e:	ef 55       	subi	r30, 0x5F	; 95
    41a0:	fe 4f       	sbci	r31, 0xFE	; 254
    41a2:	60 81       	ld	r22, Z
    41a4:	71 81       	ldd	r23, Z+1	; 0x01
    41a6:	82 81       	ldd	r24, Z+2	; 0x02
    41a8:	93 81       	ldd	r25, Z+3	; 0x03
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	30 e0       	ldi	r19, 0x00	; 0
    41ae:	4a ef       	ldi	r20, 0xFA	; 250
    41b0:	54 e4       	ldi	r21, 0x44	; 68
    41b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41b6:	dc 01       	movw	r26, r24
    41b8:	cb 01       	movw	r24, r22
    41ba:	f8 01       	movw	r30, r16
    41bc:	80 83       	st	Z, r24
    41be:	91 83       	std	Z+1, r25	; 0x01
    41c0:	a2 83       	std	Z+2, r26	; 0x02
    41c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41c4:	fe 01       	movw	r30, r28
    41c6:	e3 56       	subi	r30, 0x63	; 99
    41c8:	fe 4f       	sbci	r31, 0xFE	; 254
    41ca:	60 81       	ld	r22, Z
    41cc:	71 81       	ldd	r23, Z+1	; 0x01
    41ce:	82 81       	ldd	r24, Z+2	; 0x02
    41d0:	93 81       	ldd	r25, Z+3	; 0x03
    41d2:	20 e0       	ldi	r18, 0x00	; 0
    41d4:	30 e0       	ldi	r19, 0x00	; 0
    41d6:	40 e8       	ldi	r20, 0x80	; 128
    41d8:	5f e3       	ldi	r21, 0x3F	; 63
    41da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41de:	88 23       	and	r24, r24
    41e0:	44 f4       	brge	.+16     	; 0x41f2 <main+0x2096>
		__ticks = 1;
    41e2:	fe 01       	movw	r30, r28
    41e4:	e5 56       	subi	r30, 0x65	; 101
    41e6:	fe 4f       	sbci	r31, 0xFE	; 254
    41e8:	81 e0       	ldi	r24, 0x01	; 1
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	91 83       	std	Z+1, r25	; 0x01
    41ee:	80 83       	st	Z, r24
    41f0:	64 c0       	rjmp	.+200    	; 0x42ba <main+0x215e>
	else if (__tmp > 65535)
    41f2:	fe 01       	movw	r30, r28
    41f4:	e3 56       	subi	r30, 0x63	; 99
    41f6:	fe 4f       	sbci	r31, 0xFE	; 254
    41f8:	60 81       	ld	r22, Z
    41fa:	71 81       	ldd	r23, Z+1	; 0x01
    41fc:	82 81       	ldd	r24, Z+2	; 0x02
    41fe:	93 81       	ldd	r25, Z+3	; 0x03
    4200:	20 e0       	ldi	r18, 0x00	; 0
    4202:	3f ef       	ldi	r19, 0xFF	; 255
    4204:	4f e7       	ldi	r20, 0x7F	; 127
    4206:	57 e4       	ldi	r21, 0x47	; 71
    4208:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    420c:	18 16       	cp	r1, r24
    420e:	0c f0       	brlt	.+2      	; 0x4212 <main+0x20b6>
    4210:	43 c0       	rjmp	.+134    	; 0x4298 <main+0x213c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4212:	fe 01       	movw	r30, r28
    4214:	ef 55       	subi	r30, 0x5F	; 95
    4216:	fe 4f       	sbci	r31, 0xFE	; 254
    4218:	60 81       	ld	r22, Z
    421a:	71 81       	ldd	r23, Z+1	; 0x01
    421c:	82 81       	ldd	r24, Z+2	; 0x02
    421e:	93 81       	ldd	r25, Z+3	; 0x03
    4220:	20 e0       	ldi	r18, 0x00	; 0
    4222:	30 e0       	ldi	r19, 0x00	; 0
    4224:	40 e2       	ldi	r20, 0x20	; 32
    4226:	51 e4       	ldi	r21, 0x41	; 65
    4228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    422c:	dc 01       	movw	r26, r24
    422e:	cb 01       	movw	r24, r22
    4230:	8e 01       	movw	r16, r28
    4232:	05 56       	subi	r16, 0x65	; 101
    4234:	1e 4f       	sbci	r17, 0xFE	; 254
    4236:	bc 01       	movw	r22, r24
    4238:	cd 01       	movw	r24, r26
    423a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    423e:	dc 01       	movw	r26, r24
    4240:	cb 01       	movw	r24, r22
    4242:	f8 01       	movw	r30, r16
    4244:	91 83       	std	Z+1, r25	; 0x01
    4246:	80 83       	st	Z, r24
    4248:	1f c0       	rjmp	.+62     	; 0x4288 <main+0x212c>
    424a:	fe 01       	movw	r30, r28
    424c:	e7 56       	subi	r30, 0x67	; 103
    424e:	fe 4f       	sbci	r31, 0xFE	; 254
    4250:	88 ec       	ldi	r24, 0xC8	; 200
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	91 83       	std	Z+1, r25	; 0x01
    4256:	80 83       	st	Z, r24
    4258:	fe 01       	movw	r30, r28
    425a:	e7 56       	subi	r30, 0x67	; 103
    425c:	fe 4f       	sbci	r31, 0xFE	; 254
    425e:	80 81       	ld	r24, Z
    4260:	91 81       	ldd	r25, Z+1	; 0x01
    4262:	01 97       	sbiw	r24, 0x01	; 1
    4264:	f1 f7       	brne	.-4      	; 0x4262 <main+0x2106>
    4266:	fe 01       	movw	r30, r28
    4268:	e7 56       	subi	r30, 0x67	; 103
    426a:	fe 4f       	sbci	r31, 0xFE	; 254
    426c:	91 83       	std	Z+1, r25	; 0x01
    426e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4270:	de 01       	movw	r26, r28
    4272:	a5 56       	subi	r26, 0x65	; 101
    4274:	be 4f       	sbci	r27, 0xFE	; 254
    4276:	fe 01       	movw	r30, r28
    4278:	e5 56       	subi	r30, 0x65	; 101
    427a:	fe 4f       	sbci	r31, 0xFE	; 254
    427c:	80 81       	ld	r24, Z
    427e:	91 81       	ldd	r25, Z+1	; 0x01
    4280:	01 97       	sbiw	r24, 0x01	; 1
    4282:	11 96       	adiw	r26, 0x01	; 1
    4284:	9c 93       	st	X, r25
    4286:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4288:	fe 01       	movw	r30, r28
    428a:	e5 56       	subi	r30, 0x65	; 101
    428c:	fe 4f       	sbci	r31, 0xFE	; 254
    428e:	80 81       	ld	r24, Z
    4290:	91 81       	ldd	r25, Z+1	; 0x01
    4292:	00 97       	sbiw	r24, 0x00	; 0
    4294:	d1 f6       	brne	.-76     	; 0x424a <main+0x20ee>
    4296:	27 c0       	rjmp	.+78     	; 0x42e6 <main+0x218a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4298:	8e 01       	movw	r16, r28
    429a:	05 56       	subi	r16, 0x65	; 101
    429c:	1e 4f       	sbci	r17, 0xFE	; 254
    429e:	fe 01       	movw	r30, r28
    42a0:	e3 56       	subi	r30, 0x63	; 99
    42a2:	fe 4f       	sbci	r31, 0xFE	; 254
    42a4:	60 81       	ld	r22, Z
    42a6:	71 81       	ldd	r23, Z+1	; 0x01
    42a8:	82 81       	ldd	r24, Z+2	; 0x02
    42aa:	93 81       	ldd	r25, Z+3	; 0x03
    42ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42b0:	dc 01       	movw	r26, r24
    42b2:	cb 01       	movw	r24, r22
    42b4:	f8 01       	movw	r30, r16
    42b6:	91 83       	std	Z+1, r25	; 0x01
    42b8:	80 83       	st	Z, r24
    42ba:	de 01       	movw	r26, r28
    42bc:	a9 56       	subi	r26, 0x69	; 105
    42be:	be 4f       	sbci	r27, 0xFE	; 254
    42c0:	fe 01       	movw	r30, r28
    42c2:	e5 56       	subi	r30, 0x65	; 101
    42c4:	fe 4f       	sbci	r31, 0xFE	; 254
    42c6:	80 81       	ld	r24, Z
    42c8:	91 81       	ldd	r25, Z+1	; 0x01
    42ca:	8d 93       	st	X+, r24
    42cc:	9c 93       	st	X, r25
    42ce:	fe 01       	movw	r30, r28
    42d0:	e9 56       	subi	r30, 0x69	; 105
    42d2:	fe 4f       	sbci	r31, 0xFE	; 254
    42d4:	80 81       	ld	r24, Z
    42d6:	91 81       	ldd	r25, Z+1	; 0x01
    42d8:	01 97       	sbiw	r24, 0x01	; 1
    42da:	f1 f7       	brne	.-4      	; 0x42d8 <main+0x217c>
    42dc:	fe 01       	movw	r30, r28
    42de:	e9 56       	subi	r30, 0x69	; 105
    42e0:	fe 4f       	sbci	r31, 0xFE	; 254
    42e2:	91 83       	std	Z+1, r25	; 0x01
    42e4:	80 83       	st	Z, r24
						_delay_ms(500);//Halt the system for the given time in (ms)
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    42e6:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						LCD_vSend_string("Door Opening!");
    42ea:	8b e5       	ldi	r24, 0x5B	; 91
    42ec:	91 e0       	ldi	r25, 0x01	; 1
    42ee:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
						LED_vTurnOn(ADMIN_LED_PORT,ADMIN_LED_PIN);//turn on the led of admin
    42f2:	84 e4       	ldi	r24, 0x44	; 68
    42f4:	60 e0       	ldi	r22, 0x00	; 0
    42f6:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LED_vTurnOn>
						SPI_ui8TransmitRecive(DOOR_OPEN);//Send the code of open Door
    42fa:	87 e3       	ldi	r24, 0x37	; 55
    42fc:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <SPI_ui8TransmitRecive>
						DIO_write(BUZZER_PORT,BUZZER_PIN,1);
    4300:	84 e4       	ldi	r24, 0x44	; 68
    4302:	66 e0       	ldi	r22, 0x06	; 6
    4304:	41 e0       	ldi	r20, 0x01	; 1
    4306:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    430a:	fe 01       	movw	r30, r28
    430c:	ed 56       	subi	r30, 0x6D	; 109
    430e:	fe 4f       	sbci	r31, 0xFE	; 254
    4310:	80 e0       	ldi	r24, 0x00	; 0
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	a8 ec       	ldi	r26, 0xC8	; 200
    4316:	b2 e4       	ldi	r27, 0x42	; 66
    4318:	80 83       	st	Z, r24
    431a:	91 83       	std	Z+1, r25	; 0x01
    431c:	a2 83       	std	Z+2, r26	; 0x02
    431e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4320:	8e 01       	movw	r16, r28
    4322:	01 57       	subi	r16, 0x71	; 113
    4324:	1e 4f       	sbci	r17, 0xFE	; 254
    4326:	fe 01       	movw	r30, r28
    4328:	ed 56       	subi	r30, 0x6D	; 109
    432a:	fe 4f       	sbci	r31, 0xFE	; 254
    432c:	60 81       	ld	r22, Z
    432e:	71 81       	ldd	r23, Z+1	; 0x01
    4330:	82 81       	ldd	r24, Z+2	; 0x02
    4332:	93 81       	ldd	r25, Z+3	; 0x03
    4334:	20 e0       	ldi	r18, 0x00	; 0
    4336:	30 e0       	ldi	r19, 0x00	; 0
    4338:	4a ef       	ldi	r20, 0xFA	; 250
    433a:	54 e4       	ldi	r21, 0x44	; 68
    433c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4340:	dc 01       	movw	r26, r24
    4342:	cb 01       	movw	r24, r22
    4344:	f8 01       	movw	r30, r16
    4346:	80 83       	st	Z, r24
    4348:	91 83       	std	Z+1, r25	; 0x01
    434a:	a2 83       	std	Z+2, r26	; 0x02
    434c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    434e:	fe 01       	movw	r30, r28
    4350:	e1 57       	subi	r30, 0x71	; 113
    4352:	fe 4f       	sbci	r31, 0xFE	; 254
    4354:	60 81       	ld	r22, Z
    4356:	71 81       	ldd	r23, Z+1	; 0x01
    4358:	82 81       	ldd	r24, Z+2	; 0x02
    435a:	93 81       	ldd	r25, Z+3	; 0x03
    435c:	20 e0       	ldi	r18, 0x00	; 0
    435e:	30 e0       	ldi	r19, 0x00	; 0
    4360:	40 e8       	ldi	r20, 0x80	; 128
    4362:	5f e3       	ldi	r21, 0x3F	; 63
    4364:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4368:	88 23       	and	r24, r24
    436a:	44 f4       	brge	.+16     	; 0x437c <main+0x2220>
		__ticks = 1;
    436c:	fe 01       	movw	r30, r28
    436e:	e3 57       	subi	r30, 0x73	; 115
    4370:	fe 4f       	sbci	r31, 0xFE	; 254
    4372:	81 e0       	ldi	r24, 0x01	; 1
    4374:	90 e0       	ldi	r25, 0x00	; 0
    4376:	91 83       	std	Z+1, r25	; 0x01
    4378:	80 83       	st	Z, r24
    437a:	64 c0       	rjmp	.+200    	; 0x4444 <main+0x22e8>
	else if (__tmp > 65535)
    437c:	fe 01       	movw	r30, r28
    437e:	e1 57       	subi	r30, 0x71	; 113
    4380:	fe 4f       	sbci	r31, 0xFE	; 254
    4382:	60 81       	ld	r22, Z
    4384:	71 81       	ldd	r23, Z+1	; 0x01
    4386:	82 81       	ldd	r24, Z+2	; 0x02
    4388:	93 81       	ldd	r25, Z+3	; 0x03
    438a:	20 e0       	ldi	r18, 0x00	; 0
    438c:	3f ef       	ldi	r19, 0xFF	; 255
    438e:	4f e7       	ldi	r20, 0x7F	; 127
    4390:	57 e4       	ldi	r21, 0x47	; 71
    4392:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4396:	18 16       	cp	r1, r24
    4398:	0c f0       	brlt	.+2      	; 0x439c <main+0x2240>
    439a:	43 c0       	rjmp	.+134    	; 0x4422 <main+0x22c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    439c:	fe 01       	movw	r30, r28
    439e:	ed 56       	subi	r30, 0x6D	; 109
    43a0:	fe 4f       	sbci	r31, 0xFE	; 254
    43a2:	60 81       	ld	r22, Z
    43a4:	71 81       	ldd	r23, Z+1	; 0x01
    43a6:	82 81       	ldd	r24, Z+2	; 0x02
    43a8:	93 81       	ldd	r25, Z+3	; 0x03
    43aa:	20 e0       	ldi	r18, 0x00	; 0
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	40 e2       	ldi	r20, 0x20	; 32
    43b0:	51 e4       	ldi	r21, 0x41	; 65
    43b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43b6:	dc 01       	movw	r26, r24
    43b8:	cb 01       	movw	r24, r22
    43ba:	8e 01       	movw	r16, r28
    43bc:	03 57       	subi	r16, 0x73	; 115
    43be:	1e 4f       	sbci	r17, 0xFE	; 254
    43c0:	bc 01       	movw	r22, r24
    43c2:	cd 01       	movw	r24, r26
    43c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43c8:	dc 01       	movw	r26, r24
    43ca:	cb 01       	movw	r24, r22
    43cc:	f8 01       	movw	r30, r16
    43ce:	91 83       	std	Z+1, r25	; 0x01
    43d0:	80 83       	st	Z, r24
    43d2:	1f c0       	rjmp	.+62     	; 0x4412 <main+0x22b6>
    43d4:	fe 01       	movw	r30, r28
    43d6:	e5 57       	subi	r30, 0x75	; 117
    43d8:	fe 4f       	sbci	r31, 0xFE	; 254
    43da:	88 ec       	ldi	r24, 0xC8	; 200
    43dc:	90 e0       	ldi	r25, 0x00	; 0
    43de:	91 83       	std	Z+1, r25	; 0x01
    43e0:	80 83       	st	Z, r24
    43e2:	fe 01       	movw	r30, r28
    43e4:	e5 57       	subi	r30, 0x75	; 117
    43e6:	fe 4f       	sbci	r31, 0xFE	; 254
    43e8:	80 81       	ld	r24, Z
    43ea:	91 81       	ldd	r25, Z+1	; 0x01
    43ec:	01 97       	sbiw	r24, 0x01	; 1
    43ee:	f1 f7       	brne	.-4      	; 0x43ec <main+0x2290>
    43f0:	fe 01       	movw	r30, r28
    43f2:	e5 57       	subi	r30, 0x75	; 117
    43f4:	fe 4f       	sbci	r31, 0xFE	; 254
    43f6:	91 83       	std	Z+1, r25	; 0x01
    43f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43fa:	de 01       	movw	r26, r28
    43fc:	a3 57       	subi	r26, 0x73	; 115
    43fe:	be 4f       	sbci	r27, 0xFE	; 254
    4400:	fe 01       	movw	r30, r28
    4402:	e3 57       	subi	r30, 0x73	; 115
    4404:	fe 4f       	sbci	r31, 0xFE	; 254
    4406:	80 81       	ld	r24, Z
    4408:	91 81       	ldd	r25, Z+1	; 0x01
    440a:	01 97       	sbiw	r24, 0x01	; 1
    440c:	11 96       	adiw	r26, 0x01	; 1
    440e:	9c 93       	st	X, r25
    4410:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4412:	fe 01       	movw	r30, r28
    4414:	e3 57       	subi	r30, 0x73	; 115
    4416:	fe 4f       	sbci	r31, 0xFE	; 254
    4418:	80 81       	ld	r24, Z
    441a:	91 81       	ldd	r25, Z+1	; 0x01
    441c:	00 97       	sbiw	r24, 0x00	; 0
    441e:	d1 f6       	brne	.-76     	; 0x43d4 <main+0x2278>
    4420:	27 c0       	rjmp	.+78     	; 0x4470 <main+0x2314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4422:	8e 01       	movw	r16, r28
    4424:	03 57       	subi	r16, 0x73	; 115
    4426:	1e 4f       	sbci	r17, 0xFE	; 254
    4428:	fe 01       	movw	r30, r28
    442a:	e1 57       	subi	r30, 0x71	; 113
    442c:	fe 4f       	sbci	r31, 0xFE	; 254
    442e:	60 81       	ld	r22, Z
    4430:	71 81       	ldd	r23, Z+1	; 0x01
    4432:	82 81       	ldd	r24, Z+2	; 0x02
    4434:	93 81       	ldd	r25, Z+3	; 0x03
    4436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    443a:	dc 01       	movw	r26, r24
    443c:	cb 01       	movw	r24, r22
    443e:	f8 01       	movw	r30, r16
    4440:	91 83       	std	Z+1, r25	; 0x01
    4442:	80 83       	st	Z, r24
    4444:	de 01       	movw	r26, r28
    4446:	a7 57       	subi	r26, 0x77	; 119
    4448:	be 4f       	sbci	r27, 0xFE	; 254
    444a:	fe 01       	movw	r30, r28
    444c:	e3 57       	subi	r30, 0x73	; 115
    444e:	fe 4f       	sbci	r31, 0xFE	; 254
    4450:	80 81       	ld	r24, Z
    4452:	91 81       	ldd	r25, Z+1	; 0x01
    4454:	8d 93       	st	X+, r24
    4456:	9c 93       	st	X, r25
    4458:	fe 01       	movw	r30, r28
    445a:	e7 57       	subi	r30, 0x77	; 119
    445c:	fe 4f       	sbci	r31, 0xFE	; 254
    445e:	80 81       	ld	r24, Z
    4460:	91 81       	ldd	r25, Z+1	; 0x01
    4462:	01 97       	sbiw	r24, 0x01	; 1
    4464:	f1 f7       	brne	.-4      	; 0x4462 <main+0x2306>
    4466:	fe 01       	movw	r30, r28
    4468:	e7 57       	subi	r30, 0x77	; 119
    446a:	fe 4f       	sbci	r31, 0xFE	; 254
    446c:	91 83       	std	Z+1, r25	; 0x01
    446e:	80 83       	st	Z, r24
						_delay_ms(100);
						DIO_write(BUZZER_PORT,BUZZER_PIN,0);
    4470:	84 e4       	ldi	r24, 0x44	; 68
    4472:	66 e0       	ldi	r22, 0x06	; 6
    4474:	40 e0       	ldi	r20, 0x00	; 0
    4476:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    447a:	fe 01       	movw	r30, r28
    447c:	eb 57       	subi	r30, 0x7B	; 123
    447e:	fe 4f       	sbci	r31, 0xFE	; 254
    4480:	80 e0       	ldi	r24, 0x00	; 0
    4482:	90 e8       	ldi	r25, 0x80	; 128
    4484:	ad ee       	ldi	r26, 0xED	; 237
    4486:	b4 e4       	ldi	r27, 0x44	; 68
    4488:	80 83       	st	Z, r24
    448a:	91 83       	std	Z+1, r25	; 0x01
    448c:	a2 83       	std	Z+2, r26	; 0x02
    448e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4490:	8e 01       	movw	r16, r28
    4492:	0f 57       	subi	r16, 0x7F	; 127
    4494:	1e 4f       	sbci	r17, 0xFE	; 254
    4496:	fe 01       	movw	r30, r28
    4498:	eb 57       	subi	r30, 0x7B	; 123
    449a:	fe 4f       	sbci	r31, 0xFE	; 254
    449c:	60 81       	ld	r22, Z
    449e:	71 81       	ldd	r23, Z+1	; 0x01
    44a0:	82 81       	ldd	r24, Z+2	; 0x02
    44a2:	93 81       	ldd	r25, Z+3	; 0x03
    44a4:	20 e0       	ldi	r18, 0x00	; 0
    44a6:	30 e0       	ldi	r19, 0x00	; 0
    44a8:	4a ef       	ldi	r20, 0xFA	; 250
    44aa:	54 e4       	ldi	r21, 0x44	; 68
    44ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44b0:	dc 01       	movw	r26, r24
    44b2:	cb 01       	movw	r24, r22
    44b4:	f8 01       	movw	r30, r16
    44b6:	80 83       	st	Z, r24
    44b8:	91 83       	std	Z+1, r25	; 0x01
    44ba:	a2 83       	std	Z+2, r26	; 0x02
    44bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    44be:	fe 01       	movw	r30, r28
    44c0:	ef 57       	subi	r30, 0x7F	; 127
    44c2:	fe 4f       	sbci	r31, 0xFE	; 254
    44c4:	60 81       	ld	r22, Z
    44c6:	71 81       	ldd	r23, Z+1	; 0x01
    44c8:	82 81       	ldd	r24, Z+2	; 0x02
    44ca:	93 81       	ldd	r25, Z+3	; 0x03
    44cc:	20 e0       	ldi	r18, 0x00	; 0
    44ce:	30 e0       	ldi	r19, 0x00	; 0
    44d0:	40 e8       	ldi	r20, 0x80	; 128
    44d2:	5f e3       	ldi	r21, 0x3F	; 63
    44d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44d8:	88 23       	and	r24, r24
    44da:	44 f4       	brge	.+16     	; 0x44ec <main+0x2390>
		__ticks = 1;
    44dc:	fe 01       	movw	r30, r28
    44de:	e1 58       	subi	r30, 0x81	; 129
    44e0:	fe 4f       	sbci	r31, 0xFE	; 254
    44e2:	81 e0       	ldi	r24, 0x01	; 1
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	91 83       	std	Z+1, r25	; 0x01
    44e8:	80 83       	st	Z, r24
    44ea:	64 c0       	rjmp	.+200    	; 0x45b4 <main+0x2458>
	else if (__tmp > 65535)
    44ec:	fe 01       	movw	r30, r28
    44ee:	ef 57       	subi	r30, 0x7F	; 127
    44f0:	fe 4f       	sbci	r31, 0xFE	; 254
    44f2:	60 81       	ld	r22, Z
    44f4:	71 81       	ldd	r23, Z+1	; 0x01
    44f6:	82 81       	ldd	r24, Z+2	; 0x02
    44f8:	93 81       	ldd	r25, Z+3	; 0x03
    44fa:	20 e0       	ldi	r18, 0x00	; 0
    44fc:	3f ef       	ldi	r19, 0xFF	; 255
    44fe:	4f e7       	ldi	r20, 0x7F	; 127
    4500:	57 e4       	ldi	r21, 0x47	; 71
    4502:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4506:	18 16       	cp	r1, r24
    4508:	0c f0       	brlt	.+2      	; 0x450c <main+0x23b0>
    450a:	43 c0       	rjmp	.+134    	; 0x4592 <main+0x2436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    450c:	fe 01       	movw	r30, r28
    450e:	eb 57       	subi	r30, 0x7B	; 123
    4510:	fe 4f       	sbci	r31, 0xFE	; 254
    4512:	60 81       	ld	r22, Z
    4514:	71 81       	ldd	r23, Z+1	; 0x01
    4516:	82 81       	ldd	r24, Z+2	; 0x02
    4518:	93 81       	ldd	r25, Z+3	; 0x03
    451a:	20 e0       	ldi	r18, 0x00	; 0
    451c:	30 e0       	ldi	r19, 0x00	; 0
    451e:	40 e2       	ldi	r20, 0x20	; 32
    4520:	51 e4       	ldi	r21, 0x41	; 65
    4522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4526:	dc 01       	movw	r26, r24
    4528:	cb 01       	movw	r24, r22
    452a:	8e 01       	movw	r16, r28
    452c:	01 58       	subi	r16, 0x81	; 129
    452e:	1e 4f       	sbci	r17, 0xFE	; 254
    4530:	bc 01       	movw	r22, r24
    4532:	cd 01       	movw	r24, r26
    4534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4538:	dc 01       	movw	r26, r24
    453a:	cb 01       	movw	r24, r22
    453c:	f8 01       	movw	r30, r16
    453e:	91 83       	std	Z+1, r25	; 0x01
    4540:	80 83       	st	Z, r24
    4542:	1f c0       	rjmp	.+62     	; 0x4582 <main+0x2426>
    4544:	fe 01       	movw	r30, r28
    4546:	e3 58       	subi	r30, 0x83	; 131
    4548:	fe 4f       	sbci	r31, 0xFE	; 254
    454a:	88 ec       	ldi	r24, 0xC8	; 200
    454c:	90 e0       	ldi	r25, 0x00	; 0
    454e:	91 83       	std	Z+1, r25	; 0x01
    4550:	80 83       	st	Z, r24
    4552:	fe 01       	movw	r30, r28
    4554:	e3 58       	subi	r30, 0x83	; 131
    4556:	fe 4f       	sbci	r31, 0xFE	; 254
    4558:	80 81       	ld	r24, Z
    455a:	91 81       	ldd	r25, Z+1	; 0x01
    455c:	01 97       	sbiw	r24, 0x01	; 1
    455e:	f1 f7       	brne	.-4      	; 0x455c <main+0x2400>
    4560:	fe 01       	movw	r30, r28
    4562:	e3 58       	subi	r30, 0x83	; 131
    4564:	fe 4f       	sbci	r31, 0xFE	; 254
    4566:	91 83       	std	Z+1, r25	; 0x01
    4568:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    456a:	de 01       	movw	r26, r28
    456c:	a1 58       	subi	r26, 0x81	; 129
    456e:	be 4f       	sbci	r27, 0xFE	; 254
    4570:	fe 01       	movw	r30, r28
    4572:	e1 58       	subi	r30, 0x81	; 129
    4574:	fe 4f       	sbci	r31, 0xFE	; 254
    4576:	80 81       	ld	r24, Z
    4578:	91 81       	ldd	r25, Z+1	; 0x01
    457a:	01 97       	sbiw	r24, 0x01	; 1
    457c:	11 96       	adiw	r26, 0x01	; 1
    457e:	9c 93       	st	X, r25
    4580:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4582:	fe 01       	movw	r30, r28
    4584:	e1 58       	subi	r30, 0x81	; 129
    4586:	fe 4f       	sbci	r31, 0xFE	; 254
    4588:	80 81       	ld	r24, Z
    458a:	91 81       	ldd	r25, Z+1	; 0x01
    458c:	00 97       	sbiw	r24, 0x00	; 0
    458e:	d1 f6       	brne	.-76     	; 0x4544 <main+0x23e8>
    4590:	27 c0       	rjmp	.+78     	; 0x45e0 <main+0x2484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4592:	8e 01       	movw	r16, r28
    4594:	01 58       	subi	r16, 0x81	; 129
    4596:	1e 4f       	sbci	r17, 0xFE	; 254
    4598:	fe 01       	movw	r30, r28
    459a:	ef 57       	subi	r30, 0x7F	; 127
    459c:	fe 4f       	sbci	r31, 0xFE	; 254
    459e:	60 81       	ld	r22, Z
    45a0:	71 81       	ldd	r23, Z+1	; 0x01
    45a2:	82 81       	ldd	r24, Z+2	; 0x02
    45a4:	93 81       	ldd	r25, Z+3	; 0x03
    45a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45aa:	dc 01       	movw	r26, r24
    45ac:	cb 01       	movw	r24, r22
    45ae:	f8 01       	movw	r30, r16
    45b0:	91 83       	std	Z+1, r25	; 0x01
    45b2:	80 83       	st	Z, r24
    45b4:	de 01       	movw	r26, r28
    45b6:	a5 58       	subi	r26, 0x85	; 133
    45b8:	be 4f       	sbci	r27, 0xFE	; 254
    45ba:	fe 01       	movw	r30, r28
    45bc:	e1 58       	subi	r30, 0x81	; 129
    45be:	fe 4f       	sbci	r31, 0xFE	; 254
    45c0:	80 81       	ld	r24, Z
    45c2:	91 81       	ldd	r25, Z+1	; 0x01
    45c4:	8d 93       	st	X+, r24
    45c6:	9c 93       	st	X, r25
    45c8:	fe 01       	movw	r30, r28
    45ca:	e5 58       	subi	r30, 0x85	; 133
    45cc:	fe 4f       	sbci	r31, 0xFE	; 254
    45ce:	80 81       	ld	r24, Z
    45d0:	91 81       	ldd	r25, Z+1	; 0x01
    45d2:	01 97       	sbiw	r24, 0x01	; 1
    45d4:	f1 f7       	brne	.-4      	; 0x45d2 <main+0x2476>
    45d6:	fe 01       	movw	r30, r28
    45d8:	e5 58       	subi	r30, 0x85	; 133
    45da:	fe 4f       	sbci	r31, 0xFE	; 254
    45dc:	91 83       	std	Z+1, r25	; 0x01
    45de:	80 83       	st	Z, r24
						_delay_ms(1900);//Halt the system for the given time in (ms)
						timer0_initializeCTC();//start the timer that counts the session time
    45e0:	0e 94 97 3c 	call	0x792e	; 0x792e <timer0_initializeCTC>
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    45e4:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
    45e8:	a8 c1       	rjmp	.+848    	; 0x493a <main+0x27de>
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
    45ea:	de 01       	movw	r26, r28
    45ec:	ad 55       	subi	r26, 0x5D	; 93
    45ee:	bd 4f       	sbci	r27, 0xFD	; 253
    45f0:	fe 01       	movw	r30, r28
    45f2:	ed 55       	subi	r30, 0x5D	; 93
    45f4:	fd 4f       	sbci	r31, 0xFD	; 253
    45f6:	80 81       	ld	r24, Z
    45f8:	8f 5f       	subi	r24, 0xFF	; 255
    45fa:	8c 93       	st	X, r24
						login_mode = NO_MODE;//set the mode as not logged in
    45fc:	fe 01       	movw	r30, r28
    45fe:	e9 55       	subi	r30, 0x59	; 89
    4600:	fd 4f       	sbci	r31, 0xFD	; 253
    4602:	10 82       	st	Z, r1
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    4604:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						LCD_vSend_string("Wrong Pass");
    4608:	89 e6       	ldi	r24, 0x69	; 105
    460a:	91 e0       	ldi	r25, 0x01	; 1
    460c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
						LCD_movecursor(2,1);
    4610:	82 e0       	ldi	r24, 0x02	; 2
    4612:	61 e0       	ldi	r22, 0x01	; 1
    4614:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
						LCD_vSend_string("Tries left:");
    4618:	84 e7       	ldi	r24, 0x74	; 116
    461a:	91 e0       	ldi	r25, 0x01	; 1
    461c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
						LCD_vSend_char(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
    4620:	fe 01       	movw	r30, r28
    4622:	ed 55       	subi	r30, 0x5D	; 93
    4624:	fd 4f       	sbci	r31, 0xFD	; 253
    4626:	93 e3       	ldi	r25, 0x33	; 51
    4628:	80 81       	ld	r24, Z
    462a:	f9 2f       	mov	r31, r25
    462c:	f8 1b       	sub	r31, r24
    462e:	8f 2f       	mov	r24, r31
    4630:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
						DIO_write(BUZZER_PORT,BUZZER_PIN,1);
    4634:	84 e4       	ldi	r24, 0x44	; 68
    4636:	66 e0       	ldi	r22, 0x06	; 6
    4638:	41 e0       	ldi	r20, 0x01	; 1
    463a:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    463e:	fe 01       	movw	r30, r28
    4640:	e9 58       	subi	r30, 0x89	; 137
    4642:	fe 4f       	sbci	r31, 0xFE	; 254
    4644:	80 e0       	ldi	r24, 0x00	; 0
    4646:	90 e0       	ldi	r25, 0x00	; 0
    4648:	aa e7       	ldi	r26, 0x7A	; 122
    464a:	b3 e4       	ldi	r27, 0x43	; 67
    464c:	80 83       	st	Z, r24
    464e:	91 83       	std	Z+1, r25	; 0x01
    4650:	a2 83       	std	Z+2, r26	; 0x02
    4652:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4654:	8e 01       	movw	r16, r28
    4656:	0d 58       	subi	r16, 0x8D	; 141
    4658:	1e 4f       	sbci	r17, 0xFE	; 254
    465a:	fe 01       	movw	r30, r28
    465c:	e9 58       	subi	r30, 0x89	; 137
    465e:	fe 4f       	sbci	r31, 0xFE	; 254
    4660:	60 81       	ld	r22, Z
    4662:	71 81       	ldd	r23, Z+1	; 0x01
    4664:	82 81       	ldd	r24, Z+2	; 0x02
    4666:	93 81       	ldd	r25, Z+3	; 0x03
    4668:	20 e0       	ldi	r18, 0x00	; 0
    466a:	30 e0       	ldi	r19, 0x00	; 0
    466c:	4a ef       	ldi	r20, 0xFA	; 250
    466e:	54 e4       	ldi	r21, 0x44	; 68
    4670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4674:	dc 01       	movw	r26, r24
    4676:	cb 01       	movw	r24, r22
    4678:	f8 01       	movw	r30, r16
    467a:	80 83       	st	Z, r24
    467c:	91 83       	std	Z+1, r25	; 0x01
    467e:	a2 83       	std	Z+2, r26	; 0x02
    4680:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4682:	fe 01       	movw	r30, r28
    4684:	ed 58       	subi	r30, 0x8D	; 141
    4686:	fe 4f       	sbci	r31, 0xFE	; 254
    4688:	60 81       	ld	r22, Z
    468a:	71 81       	ldd	r23, Z+1	; 0x01
    468c:	82 81       	ldd	r24, Z+2	; 0x02
    468e:	93 81       	ldd	r25, Z+3	; 0x03
    4690:	20 e0       	ldi	r18, 0x00	; 0
    4692:	30 e0       	ldi	r19, 0x00	; 0
    4694:	40 e8       	ldi	r20, 0x80	; 128
    4696:	5f e3       	ldi	r21, 0x3F	; 63
    4698:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    469c:	88 23       	and	r24, r24
    469e:	44 f4       	brge	.+16     	; 0x46b0 <main+0x2554>
		__ticks = 1;
    46a0:	fe 01       	movw	r30, r28
    46a2:	ef 58       	subi	r30, 0x8F	; 143
    46a4:	fe 4f       	sbci	r31, 0xFE	; 254
    46a6:	81 e0       	ldi	r24, 0x01	; 1
    46a8:	90 e0       	ldi	r25, 0x00	; 0
    46aa:	91 83       	std	Z+1, r25	; 0x01
    46ac:	80 83       	st	Z, r24
    46ae:	64 c0       	rjmp	.+200    	; 0x4778 <main+0x261c>
	else if (__tmp > 65535)
    46b0:	fe 01       	movw	r30, r28
    46b2:	ed 58       	subi	r30, 0x8D	; 141
    46b4:	fe 4f       	sbci	r31, 0xFE	; 254
    46b6:	60 81       	ld	r22, Z
    46b8:	71 81       	ldd	r23, Z+1	; 0x01
    46ba:	82 81       	ldd	r24, Z+2	; 0x02
    46bc:	93 81       	ldd	r25, Z+3	; 0x03
    46be:	20 e0       	ldi	r18, 0x00	; 0
    46c0:	3f ef       	ldi	r19, 0xFF	; 255
    46c2:	4f e7       	ldi	r20, 0x7F	; 127
    46c4:	57 e4       	ldi	r21, 0x47	; 71
    46c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46ca:	18 16       	cp	r1, r24
    46cc:	0c f0       	brlt	.+2      	; 0x46d0 <main+0x2574>
    46ce:	43 c0       	rjmp	.+134    	; 0x4756 <main+0x25fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46d0:	fe 01       	movw	r30, r28
    46d2:	e9 58       	subi	r30, 0x89	; 137
    46d4:	fe 4f       	sbci	r31, 0xFE	; 254
    46d6:	60 81       	ld	r22, Z
    46d8:	71 81       	ldd	r23, Z+1	; 0x01
    46da:	82 81       	ldd	r24, Z+2	; 0x02
    46dc:	93 81       	ldd	r25, Z+3	; 0x03
    46de:	20 e0       	ldi	r18, 0x00	; 0
    46e0:	30 e0       	ldi	r19, 0x00	; 0
    46e2:	40 e2       	ldi	r20, 0x20	; 32
    46e4:	51 e4       	ldi	r21, 0x41	; 65
    46e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46ea:	dc 01       	movw	r26, r24
    46ec:	cb 01       	movw	r24, r22
    46ee:	8e 01       	movw	r16, r28
    46f0:	0f 58       	subi	r16, 0x8F	; 143
    46f2:	1e 4f       	sbci	r17, 0xFE	; 254
    46f4:	bc 01       	movw	r22, r24
    46f6:	cd 01       	movw	r24, r26
    46f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46fc:	dc 01       	movw	r26, r24
    46fe:	cb 01       	movw	r24, r22
    4700:	f8 01       	movw	r30, r16
    4702:	91 83       	std	Z+1, r25	; 0x01
    4704:	80 83       	st	Z, r24
    4706:	1f c0       	rjmp	.+62     	; 0x4746 <main+0x25ea>
    4708:	fe 01       	movw	r30, r28
    470a:	e1 59       	subi	r30, 0x91	; 145
    470c:	fe 4f       	sbci	r31, 0xFE	; 254
    470e:	88 ec       	ldi	r24, 0xC8	; 200
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	91 83       	std	Z+1, r25	; 0x01
    4714:	80 83       	st	Z, r24
    4716:	fe 01       	movw	r30, r28
    4718:	e1 59       	subi	r30, 0x91	; 145
    471a:	fe 4f       	sbci	r31, 0xFE	; 254
    471c:	80 81       	ld	r24, Z
    471e:	91 81       	ldd	r25, Z+1	; 0x01
    4720:	01 97       	sbiw	r24, 0x01	; 1
    4722:	f1 f7       	brne	.-4      	; 0x4720 <main+0x25c4>
    4724:	fe 01       	movw	r30, r28
    4726:	e1 59       	subi	r30, 0x91	; 145
    4728:	fe 4f       	sbci	r31, 0xFE	; 254
    472a:	91 83       	std	Z+1, r25	; 0x01
    472c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    472e:	de 01       	movw	r26, r28
    4730:	af 58       	subi	r26, 0x8F	; 143
    4732:	be 4f       	sbci	r27, 0xFE	; 254
    4734:	fe 01       	movw	r30, r28
    4736:	ef 58       	subi	r30, 0x8F	; 143
    4738:	fe 4f       	sbci	r31, 0xFE	; 254
    473a:	80 81       	ld	r24, Z
    473c:	91 81       	ldd	r25, Z+1	; 0x01
    473e:	01 97       	sbiw	r24, 0x01	; 1
    4740:	11 96       	adiw	r26, 0x01	; 1
    4742:	9c 93       	st	X, r25
    4744:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4746:	fe 01       	movw	r30, r28
    4748:	ef 58       	subi	r30, 0x8F	; 143
    474a:	fe 4f       	sbci	r31, 0xFE	; 254
    474c:	80 81       	ld	r24, Z
    474e:	91 81       	ldd	r25, Z+1	; 0x01
    4750:	00 97       	sbiw	r24, 0x00	; 0
    4752:	d1 f6       	brne	.-76     	; 0x4708 <main+0x25ac>
    4754:	27 c0       	rjmp	.+78     	; 0x47a4 <main+0x2648>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4756:	8e 01       	movw	r16, r28
    4758:	0f 58       	subi	r16, 0x8F	; 143
    475a:	1e 4f       	sbci	r17, 0xFE	; 254
    475c:	fe 01       	movw	r30, r28
    475e:	ed 58       	subi	r30, 0x8D	; 141
    4760:	fe 4f       	sbci	r31, 0xFE	; 254
    4762:	60 81       	ld	r22, Z
    4764:	71 81       	ldd	r23, Z+1	; 0x01
    4766:	82 81       	ldd	r24, Z+2	; 0x02
    4768:	93 81       	ldd	r25, Z+3	; 0x03
    476a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    476e:	dc 01       	movw	r26, r24
    4770:	cb 01       	movw	r24, r22
    4772:	f8 01       	movw	r30, r16
    4774:	91 83       	std	Z+1, r25	; 0x01
    4776:	80 83       	st	Z, r24
    4778:	de 01       	movw	r26, r28
    477a:	a3 59       	subi	r26, 0x93	; 147
    477c:	be 4f       	sbci	r27, 0xFE	; 254
    477e:	fe 01       	movw	r30, r28
    4780:	ef 58       	subi	r30, 0x8F	; 143
    4782:	fe 4f       	sbci	r31, 0xFE	; 254
    4784:	80 81       	ld	r24, Z
    4786:	91 81       	ldd	r25, Z+1	; 0x01
    4788:	8d 93       	st	X+, r24
    478a:	9c 93       	st	X, r25
    478c:	fe 01       	movw	r30, r28
    478e:	e3 59       	subi	r30, 0x93	; 147
    4790:	fe 4f       	sbci	r31, 0xFE	; 254
    4792:	80 81       	ld	r24, Z
    4794:	91 81       	ldd	r25, Z+1	; 0x01
    4796:	01 97       	sbiw	r24, 0x01	; 1
    4798:	f1 f7       	brne	.-4      	; 0x4796 <main+0x263a>
    479a:	fe 01       	movw	r30, r28
    479c:	e3 59       	subi	r30, 0x93	; 147
    479e:	fe 4f       	sbci	r31, 0xFE	; 254
    47a0:	91 83       	std	Z+1, r25	; 0x01
    47a2:	80 83       	st	Z, r24
						_delay_ms(250);
						DIO_write(BUZZER_PORT,BUZZER_PIN,0);
    47a4:	84 e4       	ldi	r24, 0x44	; 68
    47a6:	66 e0       	ldi	r22, 0x06	; 6
    47a8:	40 e0       	ldi	r20, 0x00	; 0
    47aa:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    47ae:	fe 01       	movw	r30, r28
    47b0:	e7 59       	subi	r30, 0x97	; 151
    47b2:	fe 4f       	sbci	r31, 0xFE	; 254
    47b4:	80 e0       	ldi	r24, 0x00	; 0
    47b6:	90 e8       	ldi	r25, 0x80	; 128
    47b8:	ab e3       	ldi	r26, 0x3B	; 59
    47ba:	b4 e4       	ldi	r27, 0x44	; 68
    47bc:	80 83       	st	Z, r24
    47be:	91 83       	std	Z+1, r25	; 0x01
    47c0:	a2 83       	std	Z+2, r26	; 0x02
    47c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47c4:	8e 01       	movw	r16, r28
    47c6:	0b 59       	subi	r16, 0x9B	; 155
    47c8:	1e 4f       	sbci	r17, 0xFE	; 254
    47ca:	fe 01       	movw	r30, r28
    47cc:	e7 59       	subi	r30, 0x97	; 151
    47ce:	fe 4f       	sbci	r31, 0xFE	; 254
    47d0:	60 81       	ld	r22, Z
    47d2:	71 81       	ldd	r23, Z+1	; 0x01
    47d4:	82 81       	ldd	r24, Z+2	; 0x02
    47d6:	93 81       	ldd	r25, Z+3	; 0x03
    47d8:	20 e0       	ldi	r18, 0x00	; 0
    47da:	30 e0       	ldi	r19, 0x00	; 0
    47dc:	4a ef       	ldi	r20, 0xFA	; 250
    47de:	54 e4       	ldi	r21, 0x44	; 68
    47e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47e4:	dc 01       	movw	r26, r24
    47e6:	cb 01       	movw	r24, r22
    47e8:	f8 01       	movw	r30, r16
    47ea:	80 83       	st	Z, r24
    47ec:	91 83       	std	Z+1, r25	; 0x01
    47ee:	a2 83       	std	Z+2, r26	; 0x02
    47f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    47f2:	fe 01       	movw	r30, r28
    47f4:	eb 59       	subi	r30, 0x9B	; 155
    47f6:	fe 4f       	sbci	r31, 0xFE	; 254
    47f8:	60 81       	ld	r22, Z
    47fa:	71 81       	ldd	r23, Z+1	; 0x01
    47fc:	82 81       	ldd	r24, Z+2	; 0x02
    47fe:	93 81       	ldd	r25, Z+3	; 0x03
    4800:	20 e0       	ldi	r18, 0x00	; 0
    4802:	30 e0       	ldi	r19, 0x00	; 0
    4804:	40 e8       	ldi	r20, 0x80	; 128
    4806:	5f e3       	ldi	r21, 0x3F	; 63
    4808:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    480c:	88 23       	and	r24, r24
    480e:	44 f4       	brge	.+16     	; 0x4820 <main+0x26c4>
		__ticks = 1;
    4810:	fe 01       	movw	r30, r28
    4812:	ed 59       	subi	r30, 0x9D	; 157
    4814:	fe 4f       	sbci	r31, 0xFE	; 254
    4816:	81 e0       	ldi	r24, 0x01	; 1
    4818:	90 e0       	ldi	r25, 0x00	; 0
    481a:	91 83       	std	Z+1, r25	; 0x01
    481c:	80 83       	st	Z, r24
    481e:	64 c0       	rjmp	.+200    	; 0x48e8 <main+0x278c>
	else if (__tmp > 65535)
    4820:	fe 01       	movw	r30, r28
    4822:	eb 59       	subi	r30, 0x9B	; 155
    4824:	fe 4f       	sbci	r31, 0xFE	; 254
    4826:	60 81       	ld	r22, Z
    4828:	71 81       	ldd	r23, Z+1	; 0x01
    482a:	82 81       	ldd	r24, Z+2	; 0x02
    482c:	93 81       	ldd	r25, Z+3	; 0x03
    482e:	20 e0       	ldi	r18, 0x00	; 0
    4830:	3f ef       	ldi	r19, 0xFF	; 255
    4832:	4f e7       	ldi	r20, 0x7F	; 127
    4834:	57 e4       	ldi	r21, 0x47	; 71
    4836:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    483a:	18 16       	cp	r1, r24
    483c:	0c f0       	brlt	.+2      	; 0x4840 <main+0x26e4>
    483e:	43 c0       	rjmp	.+134    	; 0x48c6 <main+0x276a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4840:	fe 01       	movw	r30, r28
    4842:	e7 59       	subi	r30, 0x97	; 151
    4844:	fe 4f       	sbci	r31, 0xFE	; 254
    4846:	60 81       	ld	r22, Z
    4848:	71 81       	ldd	r23, Z+1	; 0x01
    484a:	82 81       	ldd	r24, Z+2	; 0x02
    484c:	93 81       	ldd	r25, Z+3	; 0x03
    484e:	20 e0       	ldi	r18, 0x00	; 0
    4850:	30 e0       	ldi	r19, 0x00	; 0
    4852:	40 e2       	ldi	r20, 0x20	; 32
    4854:	51 e4       	ldi	r21, 0x41	; 65
    4856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    485a:	dc 01       	movw	r26, r24
    485c:	cb 01       	movw	r24, r22
    485e:	8e 01       	movw	r16, r28
    4860:	0d 59       	subi	r16, 0x9D	; 157
    4862:	1e 4f       	sbci	r17, 0xFE	; 254
    4864:	bc 01       	movw	r22, r24
    4866:	cd 01       	movw	r24, r26
    4868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    486c:	dc 01       	movw	r26, r24
    486e:	cb 01       	movw	r24, r22
    4870:	f8 01       	movw	r30, r16
    4872:	91 83       	std	Z+1, r25	; 0x01
    4874:	80 83       	st	Z, r24
    4876:	1f c0       	rjmp	.+62     	; 0x48b6 <main+0x275a>
    4878:	fe 01       	movw	r30, r28
    487a:	ef 59       	subi	r30, 0x9F	; 159
    487c:	fe 4f       	sbci	r31, 0xFE	; 254
    487e:	88 ec       	ldi	r24, 0xC8	; 200
    4880:	90 e0       	ldi	r25, 0x00	; 0
    4882:	91 83       	std	Z+1, r25	; 0x01
    4884:	80 83       	st	Z, r24
    4886:	fe 01       	movw	r30, r28
    4888:	ef 59       	subi	r30, 0x9F	; 159
    488a:	fe 4f       	sbci	r31, 0xFE	; 254
    488c:	80 81       	ld	r24, Z
    488e:	91 81       	ldd	r25, Z+1	; 0x01
    4890:	01 97       	sbiw	r24, 0x01	; 1
    4892:	f1 f7       	brne	.-4      	; 0x4890 <main+0x2734>
    4894:	fe 01       	movw	r30, r28
    4896:	ef 59       	subi	r30, 0x9F	; 159
    4898:	fe 4f       	sbci	r31, 0xFE	; 254
    489a:	91 83       	std	Z+1, r25	; 0x01
    489c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    489e:	de 01       	movw	r26, r28
    48a0:	ad 59       	subi	r26, 0x9D	; 157
    48a2:	be 4f       	sbci	r27, 0xFE	; 254
    48a4:	fe 01       	movw	r30, r28
    48a6:	ed 59       	subi	r30, 0x9D	; 157
    48a8:	fe 4f       	sbci	r31, 0xFE	; 254
    48aa:	80 81       	ld	r24, Z
    48ac:	91 81       	ldd	r25, Z+1	; 0x01
    48ae:	01 97       	sbiw	r24, 0x01	; 1
    48b0:	11 96       	adiw	r26, 0x01	; 1
    48b2:	9c 93       	st	X, r25
    48b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48b6:	fe 01       	movw	r30, r28
    48b8:	ed 59       	subi	r30, 0x9D	; 157
    48ba:	fe 4f       	sbci	r31, 0xFE	; 254
    48bc:	80 81       	ld	r24, Z
    48be:	91 81       	ldd	r25, Z+1	; 0x01
    48c0:	00 97       	sbiw	r24, 0x00	; 0
    48c2:	d1 f6       	brne	.-76     	; 0x4878 <main+0x271c>
    48c4:	27 c0       	rjmp	.+78     	; 0x4914 <main+0x27b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48c6:	8e 01       	movw	r16, r28
    48c8:	0d 59       	subi	r16, 0x9D	; 157
    48ca:	1e 4f       	sbci	r17, 0xFE	; 254
    48cc:	fe 01       	movw	r30, r28
    48ce:	eb 59       	subi	r30, 0x9B	; 155
    48d0:	fe 4f       	sbci	r31, 0xFE	; 254
    48d2:	60 81       	ld	r22, Z
    48d4:	71 81       	ldd	r23, Z+1	; 0x01
    48d6:	82 81       	ldd	r24, Z+2	; 0x02
    48d8:	93 81       	ldd	r25, Z+3	; 0x03
    48da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48de:	dc 01       	movw	r26, r24
    48e0:	cb 01       	movw	r24, r22
    48e2:	f8 01       	movw	r30, r16
    48e4:	91 83       	std	Z+1, r25	; 0x01
    48e6:	80 83       	st	Z, r24
    48e8:	de 01       	movw	r26, r28
    48ea:	a1 5a       	subi	r26, 0xA1	; 161
    48ec:	be 4f       	sbci	r27, 0xFE	; 254
    48ee:	fe 01       	movw	r30, r28
    48f0:	ed 59       	subi	r30, 0x9D	; 157
    48f2:	fe 4f       	sbci	r31, 0xFE	; 254
    48f4:	80 81       	ld	r24, Z
    48f6:	91 81       	ldd	r25, Z+1	; 0x01
    48f8:	8d 93       	st	X+, r24
    48fa:	9c 93       	st	X, r25
    48fc:	fe 01       	movw	r30, r28
    48fe:	e1 5a       	subi	r30, 0xA1	; 161
    4900:	fe 4f       	sbci	r31, 0xFE	; 254
    4902:	80 81       	ld	r24, Z
    4904:	91 81       	ldd	r25, Z+1	; 0x01
    4906:	01 97       	sbiw	r24, 0x01	; 1
    4908:	f1 f7       	brne	.-4      	; 0x4906 <main+0x27aa>
    490a:	fe 01       	movw	r30, r28
    490c:	e1 5a       	subi	r30, 0xA1	; 161
    490e:	fe 4f       	sbci	r31, 0xFE	; 254
    4910:	91 83       	std	Z+1, r25	; 0x01
    4912:	80 83       	st	Z, r24
						_delay_ms(750);//Halt the system for the given time in (ms)
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    4914:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
    4918:	fe 01       	movw	r30, r28
    491a:	ed 55       	subi	r30, 0x5D	; 93
    491c:	fd 4f       	sbci	r31, 0xFD	; 253
    491e:	80 81       	ld	r24, Z
    4920:	83 30       	cpi	r24, 0x03	; 3
    4922:	58 f0       	brcs	.+22     	; 0x493a <main+0x27de>
						{
							eeprom_update_byte (LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
    4924:	88 e0       	ldi	r24, 0x08	; 8
    4926:	90 e0       	ldi	r25, 0x00	; 0
    4928:	61 e0       	ldi	r22, 0x01	; 1
    492a:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <__eeupd_byte_m32>
							block_mode_flag = TRUE;//turn on block mode
    492e:	fe 01       	movw	r30, r28
    4930:	ea 55       	subi	r30, 0x5A	; 90
    4932:	fd 4f       	sbci	r31, 0xFD	; 253
    4934:	81 e0       	ldi	r24, 0x01	; 1
    4936:	80 83       	st	Z, r24
    4938:	3a c5       	rjmp	.+2676   	; 0x53ae <main+0x3252>

			switch(key_pressed)
			{
			/********************************* Admin login **********************************************/
			case CHECK_ADMIN_MODE:
				while(login_mode!=ADMIN)//this loop is to repeat the login for admin in case of wrong password
    493a:	fe 01       	movw	r30, r28
    493c:	e9 55       	subi	r30, 0x59	; 89
    493e:	fd 4f       	sbci	r31, 0xFD	; 253
    4940:	80 81       	ld	r24, Z
    4942:	81 30       	cpi	r24, 0x01	; 1
    4944:	09 f0       	breq	.+2      	; 0x4948 <main+0x27ec>
    4946:	56 c9       	rjmp	.-3412   	; 0x3bf4 <main+0x1a98>
    4948:	32 c5       	rjmp	.+2660   	; 0x53ae <main+0x3252>
				break;//bREAK SWITCH case
				/********************************* Guest login **********************************************/
			case  CHECK_GUEST_MODE:
				while(login_mode != GUEST)
				{
					key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
    494a:	fe 01       	movw	r30, r28
    494c:	eb 55       	subi	r30, 0x5B	; 91
    494e:	fd 4f       	sbci	r31, 0xFD	; 253
    4950:	8f ef       	ldi	r24, 0xFF	; 255
    4952:	80 83       	st	Z, r24
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    4954:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
					LCD_vSend_string("Guest mode");
    4958:	80 e8       	ldi	r24, 0x80	; 128
    495a:	91 e0       	ldi	r25, 0x01	; 1
    495c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
					LCD_movecursor(2,1);
    4960:	82 e0       	ldi	r24, 0x02	; 2
    4962:	61 e0       	ldi	r22, 0x01	; 1
    4964:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
					LCD_vSend_string("Enter pass:");
    4968:	8b e8       	ldi	r24, 0x8B	; 139
    496a:	91 e0       	ldi	r25, 0x01	; 1
    496c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    4970:	fe 01       	movw	r30, r28
    4972:	e5 5a       	subi	r30, 0xA5	; 165
    4974:	fe 4f       	sbci	r31, 0xFE	; 254
    4976:	80 e0       	ldi	r24, 0x00	; 0
    4978:	90 e0       	ldi	r25, 0x00	; 0
    497a:	a8 e4       	ldi	r26, 0x48	; 72
    497c:	b3 e4       	ldi	r27, 0x43	; 67
    497e:	80 83       	st	Z, r24
    4980:	91 83       	std	Z+1, r25	; 0x01
    4982:	a2 83       	std	Z+2, r26	; 0x02
    4984:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4986:	8e 01       	movw	r16, r28
    4988:	09 5a       	subi	r16, 0xA9	; 169
    498a:	1e 4f       	sbci	r17, 0xFE	; 254
    498c:	fe 01       	movw	r30, r28
    498e:	e5 5a       	subi	r30, 0xA5	; 165
    4990:	fe 4f       	sbci	r31, 0xFE	; 254
    4992:	60 81       	ld	r22, Z
    4994:	71 81       	ldd	r23, Z+1	; 0x01
    4996:	82 81       	ldd	r24, Z+2	; 0x02
    4998:	93 81       	ldd	r25, Z+3	; 0x03
    499a:	20 e0       	ldi	r18, 0x00	; 0
    499c:	30 e0       	ldi	r19, 0x00	; 0
    499e:	4a ef       	ldi	r20, 0xFA	; 250
    49a0:	54 e4       	ldi	r21, 0x44	; 68
    49a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49a6:	dc 01       	movw	r26, r24
    49a8:	cb 01       	movw	r24, r22
    49aa:	f8 01       	movw	r30, r16
    49ac:	80 83       	st	Z, r24
    49ae:	91 83       	std	Z+1, r25	; 0x01
    49b0:	a2 83       	std	Z+2, r26	; 0x02
    49b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49b4:	fe 01       	movw	r30, r28
    49b6:	e9 5a       	subi	r30, 0xA9	; 169
    49b8:	fe 4f       	sbci	r31, 0xFE	; 254
    49ba:	60 81       	ld	r22, Z
    49bc:	71 81       	ldd	r23, Z+1	; 0x01
    49be:	82 81       	ldd	r24, Z+2	; 0x02
    49c0:	93 81       	ldd	r25, Z+3	; 0x03
    49c2:	20 e0       	ldi	r18, 0x00	; 0
    49c4:	30 e0       	ldi	r19, 0x00	; 0
    49c6:	40 e8       	ldi	r20, 0x80	; 128
    49c8:	5f e3       	ldi	r21, 0x3F	; 63
    49ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49ce:	88 23       	and	r24, r24
    49d0:	44 f4       	brge	.+16     	; 0x49e2 <main+0x2886>
		__ticks = 1;
    49d2:	fe 01       	movw	r30, r28
    49d4:	eb 5a       	subi	r30, 0xAB	; 171
    49d6:	fe 4f       	sbci	r31, 0xFE	; 254
    49d8:	81 e0       	ldi	r24, 0x01	; 1
    49da:	90 e0       	ldi	r25, 0x00	; 0
    49dc:	91 83       	std	Z+1, r25	; 0x01
    49de:	80 83       	st	Z, r24
    49e0:	64 c0       	rjmp	.+200    	; 0x4aaa <main+0x294e>
	else if (__tmp > 65535)
    49e2:	fe 01       	movw	r30, r28
    49e4:	e9 5a       	subi	r30, 0xA9	; 169
    49e6:	fe 4f       	sbci	r31, 0xFE	; 254
    49e8:	60 81       	ld	r22, Z
    49ea:	71 81       	ldd	r23, Z+1	; 0x01
    49ec:	82 81       	ldd	r24, Z+2	; 0x02
    49ee:	93 81       	ldd	r25, Z+3	; 0x03
    49f0:	20 e0       	ldi	r18, 0x00	; 0
    49f2:	3f ef       	ldi	r19, 0xFF	; 255
    49f4:	4f e7       	ldi	r20, 0x7F	; 127
    49f6:	57 e4       	ldi	r21, 0x47	; 71
    49f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49fc:	18 16       	cp	r1, r24
    49fe:	0c f0       	brlt	.+2      	; 0x4a02 <main+0x28a6>
    4a00:	43 c0       	rjmp	.+134    	; 0x4a88 <main+0x292c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a02:	fe 01       	movw	r30, r28
    4a04:	e5 5a       	subi	r30, 0xA5	; 165
    4a06:	fe 4f       	sbci	r31, 0xFE	; 254
    4a08:	60 81       	ld	r22, Z
    4a0a:	71 81       	ldd	r23, Z+1	; 0x01
    4a0c:	82 81       	ldd	r24, Z+2	; 0x02
    4a0e:	93 81       	ldd	r25, Z+3	; 0x03
    4a10:	20 e0       	ldi	r18, 0x00	; 0
    4a12:	30 e0       	ldi	r19, 0x00	; 0
    4a14:	40 e2       	ldi	r20, 0x20	; 32
    4a16:	51 e4       	ldi	r21, 0x41	; 65
    4a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a1c:	dc 01       	movw	r26, r24
    4a1e:	cb 01       	movw	r24, r22
    4a20:	8e 01       	movw	r16, r28
    4a22:	0b 5a       	subi	r16, 0xAB	; 171
    4a24:	1e 4f       	sbci	r17, 0xFE	; 254
    4a26:	bc 01       	movw	r22, r24
    4a28:	cd 01       	movw	r24, r26
    4a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a2e:	dc 01       	movw	r26, r24
    4a30:	cb 01       	movw	r24, r22
    4a32:	f8 01       	movw	r30, r16
    4a34:	91 83       	std	Z+1, r25	; 0x01
    4a36:	80 83       	st	Z, r24
    4a38:	1f c0       	rjmp	.+62     	; 0x4a78 <main+0x291c>
    4a3a:	fe 01       	movw	r30, r28
    4a3c:	ed 5a       	subi	r30, 0xAD	; 173
    4a3e:	fe 4f       	sbci	r31, 0xFE	; 254
    4a40:	88 ec       	ldi	r24, 0xC8	; 200
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	91 83       	std	Z+1, r25	; 0x01
    4a46:	80 83       	st	Z, r24
    4a48:	fe 01       	movw	r30, r28
    4a4a:	ed 5a       	subi	r30, 0xAD	; 173
    4a4c:	fe 4f       	sbci	r31, 0xFE	; 254
    4a4e:	80 81       	ld	r24, Z
    4a50:	91 81       	ldd	r25, Z+1	; 0x01
    4a52:	01 97       	sbiw	r24, 0x01	; 1
    4a54:	f1 f7       	brne	.-4      	; 0x4a52 <main+0x28f6>
    4a56:	fe 01       	movw	r30, r28
    4a58:	ed 5a       	subi	r30, 0xAD	; 173
    4a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    4a5c:	91 83       	std	Z+1, r25	; 0x01
    4a5e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a60:	de 01       	movw	r26, r28
    4a62:	ab 5a       	subi	r26, 0xAB	; 171
    4a64:	be 4f       	sbci	r27, 0xFE	; 254
    4a66:	fe 01       	movw	r30, r28
    4a68:	eb 5a       	subi	r30, 0xAB	; 171
    4a6a:	fe 4f       	sbci	r31, 0xFE	; 254
    4a6c:	80 81       	ld	r24, Z
    4a6e:	91 81       	ldd	r25, Z+1	; 0x01
    4a70:	01 97       	sbiw	r24, 0x01	; 1
    4a72:	11 96       	adiw	r26, 0x01	; 1
    4a74:	9c 93       	st	X, r25
    4a76:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a78:	fe 01       	movw	r30, r28
    4a7a:	eb 5a       	subi	r30, 0xAB	; 171
    4a7c:	fe 4f       	sbci	r31, 0xFE	; 254
    4a7e:	80 81       	ld	r24, Z
    4a80:	91 81       	ldd	r25, Z+1	; 0x01
    4a82:	00 97       	sbiw	r24, 0x00	; 0
    4a84:	d1 f6       	brne	.-76     	; 0x4a3a <main+0x28de>
    4a86:	28 c0       	rjmp	.+80     	; 0x4ad8 <main+0x297c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a88:	8e 01       	movw	r16, r28
    4a8a:	0b 5a       	subi	r16, 0xAB	; 171
    4a8c:	1e 4f       	sbci	r17, 0xFE	; 254
    4a8e:	fe 01       	movw	r30, r28
    4a90:	e9 5a       	subi	r30, 0xA9	; 169
    4a92:	fe 4f       	sbci	r31, 0xFE	; 254
    4a94:	60 81       	ld	r22, Z
    4a96:	71 81       	ldd	r23, Z+1	; 0x01
    4a98:	82 81       	ldd	r24, Z+2	; 0x02
    4a9a:	93 81       	ldd	r25, Z+3	; 0x03
    4a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aa0:	dc 01       	movw	r26, r24
    4aa2:	cb 01       	movw	r24, r22
    4aa4:	f8 01       	movw	r30, r16
    4aa6:	91 83       	std	Z+1, r25	; 0x01
    4aa8:	80 83       	st	Z, r24
    4aaa:	de 01       	movw	r26, r28
    4aac:	af 5a       	subi	r26, 0xAF	; 175
    4aae:	be 4f       	sbci	r27, 0xFE	; 254
    4ab0:	fe 01       	movw	r30, r28
    4ab2:	eb 5a       	subi	r30, 0xAB	; 171
    4ab4:	fe 4f       	sbci	r31, 0xFE	; 254
    4ab6:	80 81       	ld	r24, Z
    4ab8:	91 81       	ldd	r25, Z+1	; 0x01
    4aba:	11 96       	adiw	r26, 0x01	; 1
    4abc:	9c 93       	st	X, r25
    4abe:	8e 93       	st	-X, r24
    4ac0:	fe 01       	movw	r30, r28
    4ac2:	ef 5a       	subi	r30, 0xAF	; 175
    4ac4:	fe 4f       	sbci	r31, 0xFE	; 254
    4ac6:	80 81       	ld	r24, Z
    4ac8:	91 81       	ldd	r25, Z+1	; 0x01
    4aca:	01 97       	sbiw	r24, 0x01	; 1
    4acc:	f1 f7       	brne	.-4      	; 0x4aca <main+0x296e>
    4ace:	fe 01       	movw	r30, r28
    4ad0:	ef 5a       	subi	r30, 0xAF	; 175
    4ad2:	fe 4f       	sbci	r31, 0xFE	; 254
    4ad4:	91 83       	std	Z+1, r25	; 0x01
    4ad6:	80 83       	st	Z, r24
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
    4ad8:	fe 01       	movw	r30, r28
    4ada:	ef 55       	subi	r30, 0x5F	; 95
    4adc:	fd 4f       	sbci	r31, 0xFD	; 253
    4ade:	10 82       	st	Z, r1
    4ae0:	a4 c1       	rjmp	.+840    	; 0x4e2a <main+0x2cce>
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
						{
							key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
    4ae2:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <keypad_u8check_press>
    4ae6:	fe 01       	movw	r30, r28
    4ae8:	eb 55       	subi	r30, 0x5B	; 91
    4aea:	fd 4f       	sbci	r31, 0xFD	; 253
    4aec:	80 83       	st	Z, r24
					LCD_vSend_string("Enter pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
    4aee:	fe 01       	movw	r30, r28
    4af0:	eb 55       	subi	r30, 0x5B	; 91
    4af2:	fd 4f       	sbci	r31, 0xFD	; 253
    4af4:	80 81       	ld	r24, Z
    4af6:	8f 3f       	cpi	r24, 0xFF	; 255
    4af8:	a1 f3       	breq	.-24     	; 0x4ae2 <main+0x2986>
						{
							key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
						}
						pass[pass_counter]=key_pressed;//add the pressed key to the password string
    4afa:	fe 01       	movw	r30, r28
    4afc:	ef 55       	subi	r30, 0x5F	; 95
    4afe:	fd 4f       	sbci	r31, 0xFD	; 253
    4b00:	80 81       	ld	r24, Z
    4b02:	28 2f       	mov	r18, r24
    4b04:	30 e0       	ldi	r19, 0x00	; 0
    4b06:	ce 01       	movw	r24, r28
    4b08:	80 55       	subi	r24, 0x50	; 80
    4b0a:	9d 4f       	sbci	r25, 0xFD	; 253
    4b0c:	dc 01       	movw	r26, r24
    4b0e:	a2 0f       	add	r26, r18
    4b10:	b3 1f       	adc	r27, r19
    4b12:	fe 01       	movw	r30, r28
    4b14:	eb 55       	subi	r30, 0x5B	; 91
    4b16:	fd 4f       	sbci	r31, 0xFD	; 253
    4b18:	80 81       	ld	r24, Z
    4b1a:	8c 93       	st	X, r24
						LCD_vSend_char(key_pressed);//print the entered character
    4b1c:	fe 01       	movw	r30, r28
    4b1e:	eb 55       	subi	r30, 0x5B	; 91
    4b20:	fd 4f       	sbci	r31, 0xFD	; 253
    4b22:	80 81       	ld	r24, Z
    4b24:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
    4b28:	fe 01       	movw	r30, r28
    4b2a:	e3 5b       	subi	r30, 0xB3	; 179
    4b2c:	fe 4f       	sbci	r31, 0xFE	; 254
    4b2e:	80 e0       	ldi	r24, 0x00	; 0
    4b30:	90 e0       	ldi	r25, 0x00	; 0
    4b32:	a6 e9       	ldi	r26, 0x96	; 150
    4b34:	b3 e4       	ldi	r27, 0x43	; 67
    4b36:	80 83       	st	Z, r24
    4b38:	91 83       	std	Z+1, r25	; 0x01
    4b3a:	a2 83       	std	Z+2, r26	; 0x02
    4b3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b3e:	8e 01       	movw	r16, r28
    4b40:	07 5b       	subi	r16, 0xB7	; 183
    4b42:	1e 4f       	sbci	r17, 0xFE	; 254
    4b44:	fe 01       	movw	r30, r28
    4b46:	e3 5b       	subi	r30, 0xB3	; 179
    4b48:	fe 4f       	sbci	r31, 0xFE	; 254
    4b4a:	60 81       	ld	r22, Z
    4b4c:	71 81       	ldd	r23, Z+1	; 0x01
    4b4e:	82 81       	ldd	r24, Z+2	; 0x02
    4b50:	93 81       	ldd	r25, Z+3	; 0x03
    4b52:	20 e0       	ldi	r18, 0x00	; 0
    4b54:	30 e0       	ldi	r19, 0x00	; 0
    4b56:	4a ef       	ldi	r20, 0xFA	; 250
    4b58:	54 e4       	ldi	r21, 0x44	; 68
    4b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b5e:	dc 01       	movw	r26, r24
    4b60:	cb 01       	movw	r24, r22
    4b62:	f8 01       	movw	r30, r16
    4b64:	80 83       	st	Z, r24
    4b66:	91 83       	std	Z+1, r25	; 0x01
    4b68:	a2 83       	std	Z+2, r26	; 0x02
    4b6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b6c:	fe 01       	movw	r30, r28
    4b6e:	e7 5b       	subi	r30, 0xB7	; 183
    4b70:	fe 4f       	sbci	r31, 0xFE	; 254
    4b72:	60 81       	ld	r22, Z
    4b74:	71 81       	ldd	r23, Z+1	; 0x01
    4b76:	82 81       	ldd	r24, Z+2	; 0x02
    4b78:	93 81       	ldd	r25, Z+3	; 0x03
    4b7a:	20 e0       	ldi	r18, 0x00	; 0
    4b7c:	30 e0       	ldi	r19, 0x00	; 0
    4b7e:	40 e8       	ldi	r20, 0x80	; 128
    4b80:	5f e3       	ldi	r21, 0x3F	; 63
    4b82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b86:	88 23       	and	r24, r24
    4b88:	44 f4       	brge	.+16     	; 0x4b9a <main+0x2a3e>
		__ticks = 1;
    4b8a:	fe 01       	movw	r30, r28
    4b8c:	e9 5b       	subi	r30, 0xB9	; 185
    4b8e:	fe 4f       	sbci	r31, 0xFE	; 254
    4b90:	81 e0       	ldi	r24, 0x01	; 1
    4b92:	90 e0       	ldi	r25, 0x00	; 0
    4b94:	91 83       	std	Z+1, r25	; 0x01
    4b96:	80 83       	st	Z, r24
    4b98:	64 c0       	rjmp	.+200    	; 0x4c62 <main+0x2b06>
	else if (__tmp > 65535)
    4b9a:	fe 01       	movw	r30, r28
    4b9c:	e7 5b       	subi	r30, 0xB7	; 183
    4b9e:	fe 4f       	sbci	r31, 0xFE	; 254
    4ba0:	60 81       	ld	r22, Z
    4ba2:	71 81       	ldd	r23, Z+1	; 0x01
    4ba4:	82 81       	ldd	r24, Z+2	; 0x02
    4ba6:	93 81       	ldd	r25, Z+3	; 0x03
    4ba8:	20 e0       	ldi	r18, 0x00	; 0
    4baa:	3f ef       	ldi	r19, 0xFF	; 255
    4bac:	4f e7       	ldi	r20, 0x7F	; 127
    4bae:	57 e4       	ldi	r21, 0x47	; 71
    4bb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4bb4:	18 16       	cp	r1, r24
    4bb6:	0c f0       	brlt	.+2      	; 0x4bba <main+0x2a5e>
    4bb8:	43 c0       	rjmp	.+134    	; 0x4c40 <main+0x2ae4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bba:	fe 01       	movw	r30, r28
    4bbc:	e3 5b       	subi	r30, 0xB3	; 179
    4bbe:	fe 4f       	sbci	r31, 0xFE	; 254
    4bc0:	60 81       	ld	r22, Z
    4bc2:	71 81       	ldd	r23, Z+1	; 0x01
    4bc4:	82 81       	ldd	r24, Z+2	; 0x02
    4bc6:	93 81       	ldd	r25, Z+3	; 0x03
    4bc8:	20 e0       	ldi	r18, 0x00	; 0
    4bca:	30 e0       	ldi	r19, 0x00	; 0
    4bcc:	40 e2       	ldi	r20, 0x20	; 32
    4bce:	51 e4       	ldi	r21, 0x41	; 65
    4bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bd4:	dc 01       	movw	r26, r24
    4bd6:	cb 01       	movw	r24, r22
    4bd8:	8e 01       	movw	r16, r28
    4bda:	09 5b       	subi	r16, 0xB9	; 185
    4bdc:	1e 4f       	sbci	r17, 0xFE	; 254
    4bde:	bc 01       	movw	r22, r24
    4be0:	cd 01       	movw	r24, r26
    4be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4be6:	dc 01       	movw	r26, r24
    4be8:	cb 01       	movw	r24, r22
    4bea:	f8 01       	movw	r30, r16
    4bec:	91 83       	std	Z+1, r25	; 0x01
    4bee:	80 83       	st	Z, r24
    4bf0:	1f c0       	rjmp	.+62     	; 0x4c30 <main+0x2ad4>
    4bf2:	fe 01       	movw	r30, r28
    4bf4:	eb 5b       	subi	r30, 0xBB	; 187
    4bf6:	fe 4f       	sbci	r31, 0xFE	; 254
    4bf8:	88 ec       	ldi	r24, 0xC8	; 200
    4bfa:	90 e0       	ldi	r25, 0x00	; 0
    4bfc:	91 83       	std	Z+1, r25	; 0x01
    4bfe:	80 83       	st	Z, r24
    4c00:	fe 01       	movw	r30, r28
    4c02:	eb 5b       	subi	r30, 0xBB	; 187
    4c04:	fe 4f       	sbci	r31, 0xFE	; 254
    4c06:	80 81       	ld	r24, Z
    4c08:	91 81       	ldd	r25, Z+1	; 0x01
    4c0a:	01 97       	sbiw	r24, 0x01	; 1
    4c0c:	f1 f7       	brne	.-4      	; 0x4c0a <main+0x2aae>
    4c0e:	fe 01       	movw	r30, r28
    4c10:	eb 5b       	subi	r30, 0xBB	; 187
    4c12:	fe 4f       	sbci	r31, 0xFE	; 254
    4c14:	91 83       	std	Z+1, r25	; 0x01
    4c16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c18:	de 01       	movw	r26, r28
    4c1a:	a9 5b       	subi	r26, 0xB9	; 185
    4c1c:	be 4f       	sbci	r27, 0xFE	; 254
    4c1e:	fe 01       	movw	r30, r28
    4c20:	e9 5b       	subi	r30, 0xB9	; 185
    4c22:	fe 4f       	sbci	r31, 0xFE	; 254
    4c24:	80 81       	ld	r24, Z
    4c26:	91 81       	ldd	r25, Z+1	; 0x01
    4c28:	01 97       	sbiw	r24, 0x01	; 1
    4c2a:	11 96       	adiw	r26, 0x01	; 1
    4c2c:	9c 93       	st	X, r25
    4c2e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c30:	fe 01       	movw	r30, r28
    4c32:	e9 5b       	subi	r30, 0xB9	; 185
    4c34:	fe 4f       	sbci	r31, 0xFE	; 254
    4c36:	80 81       	ld	r24, Z
    4c38:	91 81       	ldd	r25, Z+1	; 0x01
    4c3a:	00 97       	sbiw	r24, 0x00	; 0
    4c3c:	d1 f6       	brne	.-76     	; 0x4bf2 <main+0x2a96>
    4c3e:	27 c0       	rjmp	.+78     	; 0x4c8e <main+0x2b32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c40:	8e 01       	movw	r16, r28
    4c42:	09 5b       	subi	r16, 0xB9	; 185
    4c44:	1e 4f       	sbci	r17, 0xFE	; 254
    4c46:	fe 01       	movw	r30, r28
    4c48:	e7 5b       	subi	r30, 0xB7	; 183
    4c4a:	fe 4f       	sbci	r31, 0xFE	; 254
    4c4c:	60 81       	ld	r22, Z
    4c4e:	71 81       	ldd	r23, Z+1	; 0x01
    4c50:	82 81       	ldd	r24, Z+2	; 0x02
    4c52:	93 81       	ldd	r25, Z+3	; 0x03
    4c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c58:	dc 01       	movw	r26, r24
    4c5a:	cb 01       	movw	r24, r22
    4c5c:	f8 01       	movw	r30, r16
    4c5e:	91 83       	std	Z+1, r25	; 0x01
    4c60:	80 83       	st	Z, r24
    4c62:	de 01       	movw	r26, r28
    4c64:	ad 5b       	subi	r26, 0xBD	; 189
    4c66:	be 4f       	sbci	r27, 0xFE	; 254
    4c68:	fe 01       	movw	r30, r28
    4c6a:	e9 5b       	subi	r30, 0xB9	; 185
    4c6c:	fe 4f       	sbci	r31, 0xFE	; 254
    4c6e:	80 81       	ld	r24, Z
    4c70:	91 81       	ldd	r25, Z+1	; 0x01
    4c72:	8d 93       	st	X+, r24
    4c74:	9c 93       	st	X, r25
    4c76:	fe 01       	movw	r30, r28
    4c78:	ed 5b       	subi	r30, 0xBD	; 189
    4c7a:	fe 4f       	sbci	r31, 0xFE	; 254
    4c7c:	80 81       	ld	r24, Z
    4c7e:	91 81       	ldd	r25, Z+1	; 0x01
    4c80:	01 97       	sbiw	r24, 0x01	; 1
    4c82:	f1 f7       	brne	.-4      	; 0x4c80 <main+0x2b24>
    4c84:	fe 01       	movw	r30, r28
    4c86:	ed 5b       	subi	r30, 0xBD	; 189
    4c88:	fe 4f       	sbci	r31, 0xFE	; 254
    4c8a:	91 83       	std	Z+1, r25	; 0x01
    4c8c:	80 83       	st	Z, r24
						_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
						LCD_movecursor(2,12+pass_counter);//return the cursor to the location of the previous character to replace it with the password sign
    4c8e:	fe 01       	movw	r30, r28
    4c90:	ef 55       	subi	r30, 0x5F	; 95
    4c92:	fd 4f       	sbci	r31, 0xFD	; 253
    4c94:	80 81       	ld	r24, Z
    4c96:	98 2f       	mov	r25, r24
    4c98:	94 5f       	subi	r25, 0xF4	; 244
    4c9a:	82 e0       	ldi	r24, 0x02	; 2
    4c9c:	69 2f       	mov	r22, r25
    4c9e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
						LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
    4ca2:	8a e2       	ldi	r24, 0x2A	; 42
    4ca4:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
    4ca8:	fe 01       	movw	r30, r28
    4caa:	e1 5c       	subi	r30, 0xC1	; 193
    4cac:	fe 4f       	sbci	r31, 0xFE	; 254
    4cae:	80 e0       	ldi	r24, 0x00	; 0
    4cb0:	90 e0       	ldi	r25, 0x00	; 0
    4cb2:	a8 ec       	ldi	r26, 0xC8	; 200
    4cb4:	b2 e4       	ldi	r27, 0x42	; 66
    4cb6:	80 83       	st	Z, r24
    4cb8:	91 83       	std	Z+1, r25	; 0x01
    4cba:	a2 83       	std	Z+2, r26	; 0x02
    4cbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cbe:	8e 01       	movw	r16, r28
    4cc0:	05 5c       	subi	r16, 0xC5	; 197
    4cc2:	1e 4f       	sbci	r17, 0xFE	; 254
    4cc4:	fe 01       	movw	r30, r28
    4cc6:	e1 5c       	subi	r30, 0xC1	; 193
    4cc8:	fe 4f       	sbci	r31, 0xFE	; 254
    4cca:	60 81       	ld	r22, Z
    4ccc:	71 81       	ldd	r23, Z+1	; 0x01
    4cce:	82 81       	ldd	r24, Z+2	; 0x02
    4cd0:	93 81       	ldd	r25, Z+3	; 0x03
    4cd2:	20 e0       	ldi	r18, 0x00	; 0
    4cd4:	30 e0       	ldi	r19, 0x00	; 0
    4cd6:	4a ef       	ldi	r20, 0xFA	; 250
    4cd8:	54 e4       	ldi	r21, 0x44	; 68
    4cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cde:	dc 01       	movw	r26, r24
    4ce0:	cb 01       	movw	r24, r22
    4ce2:	f8 01       	movw	r30, r16
    4ce4:	80 83       	st	Z, r24
    4ce6:	91 83       	std	Z+1, r25	; 0x01
    4ce8:	a2 83       	std	Z+2, r26	; 0x02
    4cea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4cec:	fe 01       	movw	r30, r28
    4cee:	e5 5c       	subi	r30, 0xC5	; 197
    4cf0:	fe 4f       	sbci	r31, 0xFE	; 254
    4cf2:	60 81       	ld	r22, Z
    4cf4:	71 81       	ldd	r23, Z+1	; 0x01
    4cf6:	82 81       	ldd	r24, Z+2	; 0x02
    4cf8:	93 81       	ldd	r25, Z+3	; 0x03
    4cfa:	20 e0       	ldi	r18, 0x00	; 0
    4cfc:	30 e0       	ldi	r19, 0x00	; 0
    4cfe:	40 e8       	ldi	r20, 0x80	; 128
    4d00:	5f e3       	ldi	r21, 0x3F	; 63
    4d02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d06:	88 23       	and	r24, r24
    4d08:	44 f4       	brge	.+16     	; 0x4d1a <main+0x2bbe>
		__ticks = 1;
    4d0a:	fe 01       	movw	r30, r28
    4d0c:	e7 5c       	subi	r30, 0xC7	; 199
    4d0e:	fe 4f       	sbci	r31, 0xFE	; 254
    4d10:	81 e0       	ldi	r24, 0x01	; 1
    4d12:	90 e0       	ldi	r25, 0x00	; 0
    4d14:	91 83       	std	Z+1, r25	; 0x01
    4d16:	80 83       	st	Z, r24
    4d18:	64 c0       	rjmp	.+200    	; 0x4de2 <main+0x2c86>
	else if (__tmp > 65535)
    4d1a:	fe 01       	movw	r30, r28
    4d1c:	e5 5c       	subi	r30, 0xC5	; 197
    4d1e:	fe 4f       	sbci	r31, 0xFE	; 254
    4d20:	60 81       	ld	r22, Z
    4d22:	71 81       	ldd	r23, Z+1	; 0x01
    4d24:	82 81       	ldd	r24, Z+2	; 0x02
    4d26:	93 81       	ldd	r25, Z+3	; 0x03
    4d28:	20 e0       	ldi	r18, 0x00	; 0
    4d2a:	3f ef       	ldi	r19, 0xFF	; 255
    4d2c:	4f e7       	ldi	r20, 0x7F	; 127
    4d2e:	57 e4       	ldi	r21, 0x47	; 71
    4d30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d34:	18 16       	cp	r1, r24
    4d36:	0c f0       	brlt	.+2      	; 0x4d3a <main+0x2bde>
    4d38:	43 c0       	rjmp	.+134    	; 0x4dc0 <main+0x2c64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d3a:	fe 01       	movw	r30, r28
    4d3c:	e1 5c       	subi	r30, 0xC1	; 193
    4d3e:	fe 4f       	sbci	r31, 0xFE	; 254
    4d40:	60 81       	ld	r22, Z
    4d42:	71 81       	ldd	r23, Z+1	; 0x01
    4d44:	82 81       	ldd	r24, Z+2	; 0x02
    4d46:	93 81       	ldd	r25, Z+3	; 0x03
    4d48:	20 e0       	ldi	r18, 0x00	; 0
    4d4a:	30 e0       	ldi	r19, 0x00	; 0
    4d4c:	40 e2       	ldi	r20, 0x20	; 32
    4d4e:	51 e4       	ldi	r21, 0x41	; 65
    4d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d54:	dc 01       	movw	r26, r24
    4d56:	cb 01       	movw	r24, r22
    4d58:	8e 01       	movw	r16, r28
    4d5a:	07 5c       	subi	r16, 0xC7	; 199
    4d5c:	1e 4f       	sbci	r17, 0xFE	; 254
    4d5e:	bc 01       	movw	r22, r24
    4d60:	cd 01       	movw	r24, r26
    4d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d66:	dc 01       	movw	r26, r24
    4d68:	cb 01       	movw	r24, r22
    4d6a:	f8 01       	movw	r30, r16
    4d6c:	91 83       	std	Z+1, r25	; 0x01
    4d6e:	80 83       	st	Z, r24
    4d70:	1f c0       	rjmp	.+62     	; 0x4db0 <main+0x2c54>
    4d72:	fe 01       	movw	r30, r28
    4d74:	e9 5c       	subi	r30, 0xC9	; 201
    4d76:	fe 4f       	sbci	r31, 0xFE	; 254
    4d78:	88 ec       	ldi	r24, 0xC8	; 200
    4d7a:	90 e0       	ldi	r25, 0x00	; 0
    4d7c:	91 83       	std	Z+1, r25	; 0x01
    4d7e:	80 83       	st	Z, r24
    4d80:	fe 01       	movw	r30, r28
    4d82:	e9 5c       	subi	r30, 0xC9	; 201
    4d84:	fe 4f       	sbci	r31, 0xFE	; 254
    4d86:	80 81       	ld	r24, Z
    4d88:	91 81       	ldd	r25, Z+1	; 0x01
    4d8a:	01 97       	sbiw	r24, 0x01	; 1
    4d8c:	f1 f7       	brne	.-4      	; 0x4d8a <main+0x2c2e>
    4d8e:	fe 01       	movw	r30, r28
    4d90:	e9 5c       	subi	r30, 0xC9	; 201
    4d92:	fe 4f       	sbci	r31, 0xFE	; 254
    4d94:	91 83       	std	Z+1, r25	; 0x01
    4d96:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d98:	de 01       	movw	r26, r28
    4d9a:	a7 5c       	subi	r26, 0xC7	; 199
    4d9c:	be 4f       	sbci	r27, 0xFE	; 254
    4d9e:	fe 01       	movw	r30, r28
    4da0:	e7 5c       	subi	r30, 0xC7	; 199
    4da2:	fe 4f       	sbci	r31, 0xFE	; 254
    4da4:	80 81       	ld	r24, Z
    4da6:	91 81       	ldd	r25, Z+1	; 0x01
    4da8:	01 97       	sbiw	r24, 0x01	; 1
    4daa:	11 96       	adiw	r26, 0x01	; 1
    4dac:	9c 93       	st	X, r25
    4dae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4db0:	fe 01       	movw	r30, r28
    4db2:	e7 5c       	subi	r30, 0xC7	; 199
    4db4:	fe 4f       	sbci	r31, 0xFE	; 254
    4db6:	80 81       	ld	r24, Z
    4db8:	91 81       	ldd	r25, Z+1	; 0x01
    4dba:	00 97       	sbiw	r24, 0x00	; 0
    4dbc:	d1 f6       	brne	.-76     	; 0x4d72 <main+0x2c16>
    4dbe:	27 c0       	rjmp	.+78     	; 0x4e0e <main+0x2cb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dc0:	8e 01       	movw	r16, r28
    4dc2:	07 5c       	subi	r16, 0xC7	; 199
    4dc4:	1e 4f       	sbci	r17, 0xFE	; 254
    4dc6:	fe 01       	movw	r30, r28
    4dc8:	e5 5c       	subi	r30, 0xC5	; 197
    4dca:	fe 4f       	sbci	r31, 0xFE	; 254
    4dcc:	60 81       	ld	r22, Z
    4dce:	71 81       	ldd	r23, Z+1	; 0x01
    4dd0:	82 81       	ldd	r24, Z+2	; 0x02
    4dd2:	93 81       	ldd	r25, Z+3	; 0x03
    4dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dd8:	dc 01       	movw	r26, r24
    4dda:	cb 01       	movw	r24, r22
    4ddc:	f8 01       	movw	r30, r16
    4dde:	91 83       	std	Z+1, r25	; 0x01
    4de0:	80 83       	st	Z, r24
    4de2:	de 01       	movw	r26, r28
    4de4:	ab 5c       	subi	r26, 0xCB	; 203
    4de6:	be 4f       	sbci	r27, 0xFE	; 254
    4de8:	fe 01       	movw	r30, r28
    4dea:	e7 5c       	subi	r30, 0xC7	; 199
    4dec:	fe 4f       	sbci	r31, 0xFE	; 254
    4dee:	80 81       	ld	r24, Z
    4df0:	91 81       	ldd	r25, Z+1	; 0x01
    4df2:	8d 93       	st	X+, r24
    4df4:	9c 93       	st	X, r25
    4df6:	fe 01       	movw	r30, r28
    4df8:	eb 5c       	subi	r30, 0xCB	; 203
    4dfa:	fe 4f       	sbci	r31, 0xFE	; 254
    4dfc:	80 81       	ld	r24, Z
    4dfe:	91 81       	ldd	r25, Z+1	; 0x01
    4e00:	01 97       	sbiw	r24, 0x01	; 1
    4e02:	f1 f7       	brne	.-4      	; 0x4e00 <main+0x2ca4>
    4e04:	fe 01       	movw	r30, r28
    4e06:	eb 5c       	subi	r30, 0xCB	; 203
    4e08:	fe 4f       	sbci	r31, 0xFE	; 254
    4e0a:	91 83       	std	Z+1, r25	; 0x01
    4e0c:	80 83       	st	Z, r24
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
    4e0e:	de 01       	movw	r26, r28
    4e10:	af 55       	subi	r26, 0x5F	; 95
    4e12:	bd 4f       	sbci	r27, 0xFD	; 253
    4e14:	fe 01       	movw	r30, r28
    4e16:	ef 55       	subi	r30, 0x5F	; 95
    4e18:	fd 4f       	sbci	r31, 0xFD	; 253
    4e1a:	80 81       	ld	r24, Z
    4e1c:	8f 5f       	subi	r24, 0xFF	; 255
    4e1e:	8c 93       	st	X, r24
						key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
    4e20:	fe 01       	movw	r30, r28
    4e22:	eb 55       	subi	r30, 0x5B	; 91
    4e24:	fd 4f       	sbci	r31, 0xFD	; 253
    4e26:	8f ef       	ldi	r24, 0xFF	; 255
    4e28:	80 83       	st	Z, r24
					LCD_vSend_string("Guest mode");
					LCD_movecursor(2,1);
					LCD_vSend_string("Enter pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
    4e2a:	fe 01       	movw	r30, r28
    4e2c:	ef 55       	subi	r30, 0x5F	; 95
    4e2e:	fd 4f       	sbci	r31, 0xFD	; 253
    4e30:	80 81       	ld	r24, Z
    4e32:	84 30       	cpi	r24, 0x04	; 4
    4e34:	08 f4       	brcc	.+2      	; 0x4e38 <main+0x2cdc>
    4e36:	5b ce       	rjmp	.-842    	; 0x4aee <main+0x2992>
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					}
					//eeprom_read_block (EEPROM_GUEST_ADDRESS,stored_pass,PASS_SIZE);//Save the entire password in the EEPROM
					for(pass_counter=0;pass_counter<PASS_SIZE;pass_counter++)
    4e38:	fe 01       	movw	r30, r28
    4e3a:	ef 55       	subi	r30, 0x5F	; 95
    4e3c:	fd 4f       	sbci	r31, 0xFD	; 253
    4e3e:	10 82       	st	Z, r1
    4e40:	21 c0       	rjmp	.+66     	; 0x4e84 <main+0x2d28>
					{
						stored_pass[pass_counter]=eeprom_read_byte ((EEPROM_GUEST_ADDRESS + pass_counter));
    4e42:	fe 01       	movw	r30, r28
    4e44:	ef 55       	subi	r30, 0x5F	; 95
    4e46:	fd 4f       	sbci	r31, 0xFD	; 253
    4e48:	80 81       	ld	r24, Z
    4e4a:	08 2f       	mov	r16, r24
    4e4c:	10 e0       	ldi	r17, 0x00	; 0
    4e4e:	fe 01       	movw	r30, r28
    4e50:	ef 55       	subi	r30, 0x5F	; 95
    4e52:	fd 4f       	sbci	r31, 0xFD	; 253
    4e54:	80 81       	ld	r24, Z
    4e56:	88 2f       	mov	r24, r24
    4e58:	90 e0       	ldi	r25, 0x00	; 0
    4e5a:	80 5b       	subi	r24, 0xB0	; 176
    4e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    4e5e:	0e 94 92 3d 	call	0x7b24	; 0x7b24 <__eerd_byte_m32>
    4e62:	28 2f       	mov	r18, r24
    4e64:	ce 01       	movw	r24, r28
    4e66:	8c 54       	subi	r24, 0x4C	; 76
    4e68:	9d 4f       	sbci	r25, 0xFD	; 253
    4e6a:	fc 01       	movw	r30, r24
    4e6c:	e0 0f       	add	r30, r16
    4e6e:	f1 1f       	adc	r31, r17
    4e70:	20 83       	st	Z, r18
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					}
					//eeprom_read_block (EEPROM_GUEST_ADDRESS,stored_pass,PASS_SIZE);//Save the entire password in the EEPROM
					for(pass_counter=0;pass_counter<PASS_SIZE;pass_counter++)
    4e72:	de 01       	movw	r26, r28
    4e74:	af 55       	subi	r26, 0x5F	; 95
    4e76:	bd 4f       	sbci	r27, 0xFD	; 253
    4e78:	fe 01       	movw	r30, r28
    4e7a:	ef 55       	subi	r30, 0x5F	; 95
    4e7c:	fd 4f       	sbci	r31, 0xFD	; 253
    4e7e:	80 81       	ld	r24, Z
    4e80:	8f 5f       	subi	r24, 0xFF	; 255
    4e82:	8c 93       	st	X, r24
    4e84:	fe 01       	movw	r30, r28
    4e86:	ef 55       	subi	r30, 0x5F	; 95
    4e88:	fd 4f       	sbci	r31, 0xFD	; 253
    4e8a:	80 81       	ld	r24, Z
    4e8c:	84 30       	cpi	r24, 0x04	; 4
    4e8e:	c8 f2       	brcs	.-78     	; 0x4e42 <main+0x2ce6>
					{
						stored_pass[pass_counter]=eeprom_read_byte ((EEPROM_GUEST_ADDRESS + pass_counter));
					}

					/*compare passwords*/
					if (ui8ComparePass(pass,stored_pass,PASS_SIZE))//in case of right password
    4e90:	ce 01       	movw	r24, r28
    4e92:	80 55       	subi	r24, 0x50	; 80
    4e94:	9d 4f       	sbci	r25, 0xFD	; 253
    4e96:	9e 01       	movw	r18, r28
    4e98:	2c 54       	subi	r18, 0x4C	; 76
    4e9a:	3d 4f       	sbci	r19, 0xFD	; 253
    4e9c:	b9 01       	movw	r22, r18
    4e9e:	44 e0       	ldi	r20, 0x04	; 4
    4ea0:	0e 94 7a 39 	call	0x72f4	; 0x72f4 <ui8ComparePass>
    4ea4:	88 23       	and	r24, r24
    4ea6:	09 f4       	brne	.+2      	; 0x4eaa <main+0x2d4e>
    4ea8:	d3 c0       	rjmp	.+422    	; 0x5050 <main+0x2ef4>
					{
						login_mode = GUEST;
    4eaa:	fe 01       	movw	r30, r28
    4eac:	e9 55       	subi	r30, 0x59	; 89
    4eae:	fd 4f       	sbci	r31, 0xFD	; 253
    4eb0:	82 e0       	ldi	r24, 0x02	; 2
    4eb2:	80 83       	st	Z, r24
						pass_tries_count=0;//clear the counter of wrong tries
    4eb4:	fe 01       	movw	r30, r28
    4eb6:	ed 55       	subi	r30, 0x5D	; 93
    4eb8:	fd 4f       	sbci	r31, 0xFD	; 253
    4eba:	10 82       	st	Z, r1
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    4ebc:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						LCD_vSend_string("Right pass");
    4ec0:	80 e5       	ldi	r24, 0x50	; 80
    4ec2:	91 e0       	ldi	r25, 0x01	; 1
    4ec4:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
						LCD_movecursor(2,1);
    4ec8:	82 e0       	ldi	r24, 0x02	; 2
    4eca:	61 e0       	ldi	r22, 0x01	; 1
    4ecc:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
						LCD_vSend_string("Guest mode");
    4ed0:	80 e8       	ldi	r24, 0x80	; 128
    4ed2:	91 e0       	ldi	r25, 0x01	; 1
    4ed4:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    4ed8:	fe 01       	movw	r30, r28
    4eda:	ef 5c       	subi	r30, 0xCF	; 207
    4edc:	fe 4f       	sbci	r31, 0xFE	; 254
    4ede:	80 e0       	ldi	r24, 0x00	; 0
    4ee0:	90 e0       	ldi	r25, 0x00	; 0
    4ee2:	aa ef       	ldi	r26, 0xFA	; 250
    4ee4:	b3 e4       	ldi	r27, 0x43	; 67
    4ee6:	80 83       	st	Z, r24
    4ee8:	91 83       	std	Z+1, r25	; 0x01
    4eea:	a2 83       	std	Z+2, r26	; 0x02
    4eec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4eee:	8e 01       	movw	r16, r28
    4ef0:	03 5d       	subi	r16, 0xD3	; 211
    4ef2:	1e 4f       	sbci	r17, 0xFE	; 254
    4ef4:	fe 01       	movw	r30, r28
    4ef6:	ef 5c       	subi	r30, 0xCF	; 207
    4ef8:	fe 4f       	sbci	r31, 0xFE	; 254
    4efa:	60 81       	ld	r22, Z
    4efc:	71 81       	ldd	r23, Z+1	; 0x01
    4efe:	82 81       	ldd	r24, Z+2	; 0x02
    4f00:	93 81       	ldd	r25, Z+3	; 0x03
    4f02:	20 e0       	ldi	r18, 0x00	; 0
    4f04:	30 e0       	ldi	r19, 0x00	; 0
    4f06:	4a ef       	ldi	r20, 0xFA	; 250
    4f08:	54 e4       	ldi	r21, 0x44	; 68
    4f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f0e:	dc 01       	movw	r26, r24
    4f10:	cb 01       	movw	r24, r22
    4f12:	f8 01       	movw	r30, r16
    4f14:	80 83       	st	Z, r24
    4f16:	91 83       	std	Z+1, r25	; 0x01
    4f18:	a2 83       	std	Z+2, r26	; 0x02
    4f1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f1c:	fe 01       	movw	r30, r28
    4f1e:	e3 5d       	subi	r30, 0xD3	; 211
    4f20:	fe 4f       	sbci	r31, 0xFE	; 254
    4f22:	60 81       	ld	r22, Z
    4f24:	71 81       	ldd	r23, Z+1	; 0x01
    4f26:	82 81       	ldd	r24, Z+2	; 0x02
    4f28:	93 81       	ldd	r25, Z+3	; 0x03
    4f2a:	20 e0       	ldi	r18, 0x00	; 0
    4f2c:	30 e0       	ldi	r19, 0x00	; 0
    4f2e:	40 e8       	ldi	r20, 0x80	; 128
    4f30:	5f e3       	ldi	r21, 0x3F	; 63
    4f32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f36:	88 23       	and	r24, r24
    4f38:	44 f4       	brge	.+16     	; 0x4f4a <main+0x2dee>
		__ticks = 1;
    4f3a:	fe 01       	movw	r30, r28
    4f3c:	e5 5d       	subi	r30, 0xD5	; 213
    4f3e:	fe 4f       	sbci	r31, 0xFE	; 254
    4f40:	81 e0       	ldi	r24, 0x01	; 1
    4f42:	90 e0       	ldi	r25, 0x00	; 0
    4f44:	91 83       	std	Z+1, r25	; 0x01
    4f46:	80 83       	st	Z, r24
    4f48:	64 c0       	rjmp	.+200    	; 0x5012 <main+0x2eb6>
	else if (__tmp > 65535)
    4f4a:	fe 01       	movw	r30, r28
    4f4c:	e3 5d       	subi	r30, 0xD3	; 211
    4f4e:	fe 4f       	sbci	r31, 0xFE	; 254
    4f50:	60 81       	ld	r22, Z
    4f52:	71 81       	ldd	r23, Z+1	; 0x01
    4f54:	82 81       	ldd	r24, Z+2	; 0x02
    4f56:	93 81       	ldd	r25, Z+3	; 0x03
    4f58:	20 e0       	ldi	r18, 0x00	; 0
    4f5a:	3f ef       	ldi	r19, 0xFF	; 255
    4f5c:	4f e7       	ldi	r20, 0x7F	; 127
    4f5e:	57 e4       	ldi	r21, 0x47	; 71
    4f60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f64:	18 16       	cp	r1, r24
    4f66:	0c f0       	brlt	.+2      	; 0x4f6a <main+0x2e0e>
    4f68:	43 c0       	rjmp	.+134    	; 0x4ff0 <main+0x2e94>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f6a:	fe 01       	movw	r30, r28
    4f6c:	ef 5c       	subi	r30, 0xCF	; 207
    4f6e:	fe 4f       	sbci	r31, 0xFE	; 254
    4f70:	60 81       	ld	r22, Z
    4f72:	71 81       	ldd	r23, Z+1	; 0x01
    4f74:	82 81       	ldd	r24, Z+2	; 0x02
    4f76:	93 81       	ldd	r25, Z+3	; 0x03
    4f78:	20 e0       	ldi	r18, 0x00	; 0
    4f7a:	30 e0       	ldi	r19, 0x00	; 0
    4f7c:	40 e2       	ldi	r20, 0x20	; 32
    4f7e:	51 e4       	ldi	r21, 0x41	; 65
    4f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f84:	dc 01       	movw	r26, r24
    4f86:	cb 01       	movw	r24, r22
    4f88:	8e 01       	movw	r16, r28
    4f8a:	05 5d       	subi	r16, 0xD5	; 213
    4f8c:	1e 4f       	sbci	r17, 0xFE	; 254
    4f8e:	bc 01       	movw	r22, r24
    4f90:	cd 01       	movw	r24, r26
    4f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f96:	dc 01       	movw	r26, r24
    4f98:	cb 01       	movw	r24, r22
    4f9a:	f8 01       	movw	r30, r16
    4f9c:	91 83       	std	Z+1, r25	; 0x01
    4f9e:	80 83       	st	Z, r24
    4fa0:	1f c0       	rjmp	.+62     	; 0x4fe0 <main+0x2e84>
    4fa2:	fe 01       	movw	r30, r28
    4fa4:	e7 5d       	subi	r30, 0xD7	; 215
    4fa6:	fe 4f       	sbci	r31, 0xFE	; 254
    4fa8:	88 ec       	ldi	r24, 0xC8	; 200
    4faa:	90 e0       	ldi	r25, 0x00	; 0
    4fac:	91 83       	std	Z+1, r25	; 0x01
    4fae:	80 83       	st	Z, r24
    4fb0:	fe 01       	movw	r30, r28
    4fb2:	e7 5d       	subi	r30, 0xD7	; 215
    4fb4:	fe 4f       	sbci	r31, 0xFE	; 254
    4fb6:	80 81       	ld	r24, Z
    4fb8:	91 81       	ldd	r25, Z+1	; 0x01
    4fba:	01 97       	sbiw	r24, 0x01	; 1
    4fbc:	f1 f7       	brne	.-4      	; 0x4fba <main+0x2e5e>
    4fbe:	fe 01       	movw	r30, r28
    4fc0:	e7 5d       	subi	r30, 0xD7	; 215
    4fc2:	fe 4f       	sbci	r31, 0xFE	; 254
    4fc4:	91 83       	std	Z+1, r25	; 0x01
    4fc6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fc8:	de 01       	movw	r26, r28
    4fca:	a5 5d       	subi	r26, 0xD5	; 213
    4fcc:	be 4f       	sbci	r27, 0xFE	; 254
    4fce:	fe 01       	movw	r30, r28
    4fd0:	e5 5d       	subi	r30, 0xD5	; 213
    4fd2:	fe 4f       	sbci	r31, 0xFE	; 254
    4fd4:	80 81       	ld	r24, Z
    4fd6:	91 81       	ldd	r25, Z+1	; 0x01
    4fd8:	01 97       	sbiw	r24, 0x01	; 1
    4fda:	11 96       	adiw	r26, 0x01	; 1
    4fdc:	9c 93       	st	X, r25
    4fde:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fe0:	fe 01       	movw	r30, r28
    4fe2:	e5 5d       	subi	r30, 0xD5	; 213
    4fe4:	fe 4f       	sbci	r31, 0xFE	; 254
    4fe6:	80 81       	ld	r24, Z
    4fe8:	91 81       	ldd	r25, Z+1	; 0x01
    4fea:	00 97       	sbiw	r24, 0x00	; 0
    4fec:	d1 f6       	brne	.-76     	; 0x4fa2 <main+0x2e46>
    4fee:	27 c0       	rjmp	.+78     	; 0x503e <main+0x2ee2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ff0:	8e 01       	movw	r16, r28
    4ff2:	05 5d       	subi	r16, 0xD5	; 213
    4ff4:	1e 4f       	sbci	r17, 0xFE	; 254
    4ff6:	fe 01       	movw	r30, r28
    4ff8:	e3 5d       	subi	r30, 0xD3	; 211
    4ffa:	fe 4f       	sbci	r31, 0xFE	; 254
    4ffc:	60 81       	ld	r22, Z
    4ffe:	71 81       	ldd	r23, Z+1	; 0x01
    5000:	82 81       	ldd	r24, Z+2	; 0x02
    5002:	93 81       	ldd	r25, Z+3	; 0x03
    5004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5008:	dc 01       	movw	r26, r24
    500a:	cb 01       	movw	r24, r22
    500c:	f8 01       	movw	r30, r16
    500e:	91 83       	std	Z+1, r25	; 0x01
    5010:	80 83       	st	Z, r24
    5012:	de 01       	movw	r26, r28
    5014:	a9 5d       	subi	r26, 0xD9	; 217
    5016:	be 4f       	sbci	r27, 0xFE	; 254
    5018:	fe 01       	movw	r30, r28
    501a:	e5 5d       	subi	r30, 0xD5	; 213
    501c:	fe 4f       	sbci	r31, 0xFE	; 254
    501e:	80 81       	ld	r24, Z
    5020:	91 81       	ldd	r25, Z+1	; 0x01
    5022:	8d 93       	st	X+, r24
    5024:	9c 93       	st	X, r25
    5026:	fe 01       	movw	r30, r28
    5028:	e9 5d       	subi	r30, 0xD9	; 217
    502a:	fe 4f       	sbci	r31, 0xFE	; 254
    502c:	80 81       	ld	r24, Z
    502e:	91 81       	ldd	r25, Z+1	; 0x01
    5030:	01 97       	sbiw	r24, 0x01	; 1
    5032:	f1 f7       	brne	.-4      	; 0x5030 <main+0x2ed4>
    5034:	fe 01       	movw	r30, r28
    5036:	e9 5d       	subi	r30, 0xD9	; 217
    5038:	fe 4f       	sbci	r31, 0xFE	; 254
    503a:	91 83       	std	Z+1, r25	; 0x01
    503c:	80 83       	st	Z, r24
						_delay_ms(500);//Halt the system for the given time in (ms)
						LED_vTurnOn(GUEST_LED_PORT,GUEST_LED_PIN);//turn the led of gust mode that is connected to the master micro controller on
    503e:	84 e4       	ldi	r24, 0x44	; 68
    5040:	61 e0       	ldi	r22, 0x01	; 1
    5042:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LED_vTurnOn>
						timer0_initializeCTC();//start the counter of the session
    5046:	0e 94 97 3c 	call	0x792e	; 0x792e <timer0_initializeCTC>
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    504a:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
    504e:	a8 c1       	rjmp	.+848    	; 0x53a0 <main+0x3244>
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
    5050:	de 01       	movw	r26, r28
    5052:	ad 55       	subi	r26, 0x5D	; 93
    5054:	bd 4f       	sbci	r27, 0xFD	; 253
    5056:	fe 01       	movw	r30, r28
    5058:	ed 55       	subi	r30, 0x5D	; 93
    505a:	fd 4f       	sbci	r31, 0xFD	; 253
    505c:	80 81       	ld	r24, Z
    505e:	8f 5f       	subi	r24, 0xFF	; 255
    5060:	8c 93       	st	X, r24
						login_mode = NO_MODE;//set the mode as not logged in
    5062:	fe 01       	movw	r30, r28
    5064:	e9 55       	subi	r30, 0x59	; 89
    5066:	fd 4f       	sbci	r31, 0xFD	; 253
    5068:	10 82       	st	Z, r1
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    506a:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						LCD_vSend_string("Wrong pass");
    506e:	87 e9       	ldi	r24, 0x97	; 151
    5070:	91 e0       	ldi	r25, 0x01	; 1
    5072:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
						LCD_movecursor(2,1);
    5076:	82 e0       	ldi	r24, 0x02	; 2
    5078:	61 e0       	ldi	r22, 0x01	; 1
    507a:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
						LCD_vSend_string("Tries left:");
    507e:	84 e7       	ldi	r24, 0x74	; 116
    5080:	91 e0       	ldi	r25, 0x01	; 1
    5082:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
						LCD_vSend_char(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
    5086:	fe 01       	movw	r30, r28
    5088:	ed 55       	subi	r30, 0x5D	; 93
    508a:	fd 4f       	sbci	r31, 0xFD	; 253
    508c:	93 e3       	ldi	r25, 0x33	; 51
    508e:	80 81       	ld	r24, Z
    5090:	f9 2f       	mov	r31, r25
    5092:	f8 1b       	sub	r31, r24
    5094:	8f 2f       	mov	r24, r31
    5096:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
						DIO_write(BUZZER_PORT,BUZZER_PIN,1);
    509a:	84 e4       	ldi	r24, 0x44	; 68
    509c:	66 e0       	ldi	r22, 0x06	; 6
    509e:	41 e0       	ldi	r20, 0x01	; 1
    50a0:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    50a4:	fe 01       	movw	r30, r28
    50a6:	ed 5d       	subi	r30, 0xDD	; 221
    50a8:	fe 4f       	sbci	r31, 0xFE	; 254
    50aa:	80 e0       	ldi	r24, 0x00	; 0
    50ac:	90 e0       	ldi	r25, 0x00	; 0
    50ae:	aa e7       	ldi	r26, 0x7A	; 122
    50b0:	b3 e4       	ldi	r27, 0x43	; 67
    50b2:	80 83       	st	Z, r24
    50b4:	91 83       	std	Z+1, r25	; 0x01
    50b6:	a2 83       	std	Z+2, r26	; 0x02
    50b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50ba:	8e 01       	movw	r16, r28
    50bc:	01 5e       	subi	r16, 0xE1	; 225
    50be:	1e 4f       	sbci	r17, 0xFE	; 254
    50c0:	fe 01       	movw	r30, r28
    50c2:	ed 5d       	subi	r30, 0xDD	; 221
    50c4:	fe 4f       	sbci	r31, 0xFE	; 254
    50c6:	60 81       	ld	r22, Z
    50c8:	71 81       	ldd	r23, Z+1	; 0x01
    50ca:	82 81       	ldd	r24, Z+2	; 0x02
    50cc:	93 81       	ldd	r25, Z+3	; 0x03
    50ce:	20 e0       	ldi	r18, 0x00	; 0
    50d0:	30 e0       	ldi	r19, 0x00	; 0
    50d2:	4a ef       	ldi	r20, 0xFA	; 250
    50d4:	54 e4       	ldi	r21, 0x44	; 68
    50d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50da:	dc 01       	movw	r26, r24
    50dc:	cb 01       	movw	r24, r22
    50de:	f8 01       	movw	r30, r16
    50e0:	80 83       	st	Z, r24
    50e2:	91 83       	std	Z+1, r25	; 0x01
    50e4:	a2 83       	std	Z+2, r26	; 0x02
    50e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50e8:	fe 01       	movw	r30, r28
    50ea:	e1 5e       	subi	r30, 0xE1	; 225
    50ec:	fe 4f       	sbci	r31, 0xFE	; 254
    50ee:	60 81       	ld	r22, Z
    50f0:	71 81       	ldd	r23, Z+1	; 0x01
    50f2:	82 81       	ldd	r24, Z+2	; 0x02
    50f4:	93 81       	ldd	r25, Z+3	; 0x03
    50f6:	20 e0       	ldi	r18, 0x00	; 0
    50f8:	30 e0       	ldi	r19, 0x00	; 0
    50fa:	40 e8       	ldi	r20, 0x80	; 128
    50fc:	5f e3       	ldi	r21, 0x3F	; 63
    50fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5102:	88 23       	and	r24, r24
    5104:	44 f4       	brge	.+16     	; 0x5116 <main+0x2fba>
		__ticks = 1;
    5106:	fe 01       	movw	r30, r28
    5108:	e3 5e       	subi	r30, 0xE3	; 227
    510a:	fe 4f       	sbci	r31, 0xFE	; 254
    510c:	81 e0       	ldi	r24, 0x01	; 1
    510e:	90 e0       	ldi	r25, 0x00	; 0
    5110:	91 83       	std	Z+1, r25	; 0x01
    5112:	80 83       	st	Z, r24
    5114:	64 c0       	rjmp	.+200    	; 0x51de <main+0x3082>
	else if (__tmp > 65535)
    5116:	fe 01       	movw	r30, r28
    5118:	e1 5e       	subi	r30, 0xE1	; 225
    511a:	fe 4f       	sbci	r31, 0xFE	; 254
    511c:	60 81       	ld	r22, Z
    511e:	71 81       	ldd	r23, Z+1	; 0x01
    5120:	82 81       	ldd	r24, Z+2	; 0x02
    5122:	93 81       	ldd	r25, Z+3	; 0x03
    5124:	20 e0       	ldi	r18, 0x00	; 0
    5126:	3f ef       	ldi	r19, 0xFF	; 255
    5128:	4f e7       	ldi	r20, 0x7F	; 127
    512a:	57 e4       	ldi	r21, 0x47	; 71
    512c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5130:	18 16       	cp	r1, r24
    5132:	0c f0       	brlt	.+2      	; 0x5136 <main+0x2fda>
    5134:	43 c0       	rjmp	.+134    	; 0x51bc <main+0x3060>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5136:	fe 01       	movw	r30, r28
    5138:	ed 5d       	subi	r30, 0xDD	; 221
    513a:	fe 4f       	sbci	r31, 0xFE	; 254
    513c:	60 81       	ld	r22, Z
    513e:	71 81       	ldd	r23, Z+1	; 0x01
    5140:	82 81       	ldd	r24, Z+2	; 0x02
    5142:	93 81       	ldd	r25, Z+3	; 0x03
    5144:	20 e0       	ldi	r18, 0x00	; 0
    5146:	30 e0       	ldi	r19, 0x00	; 0
    5148:	40 e2       	ldi	r20, 0x20	; 32
    514a:	51 e4       	ldi	r21, 0x41	; 65
    514c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5150:	dc 01       	movw	r26, r24
    5152:	cb 01       	movw	r24, r22
    5154:	8e 01       	movw	r16, r28
    5156:	03 5e       	subi	r16, 0xE3	; 227
    5158:	1e 4f       	sbci	r17, 0xFE	; 254
    515a:	bc 01       	movw	r22, r24
    515c:	cd 01       	movw	r24, r26
    515e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5162:	dc 01       	movw	r26, r24
    5164:	cb 01       	movw	r24, r22
    5166:	f8 01       	movw	r30, r16
    5168:	91 83       	std	Z+1, r25	; 0x01
    516a:	80 83       	st	Z, r24
    516c:	1f c0       	rjmp	.+62     	; 0x51ac <main+0x3050>
    516e:	fe 01       	movw	r30, r28
    5170:	e5 5e       	subi	r30, 0xE5	; 229
    5172:	fe 4f       	sbci	r31, 0xFE	; 254
    5174:	88 ec       	ldi	r24, 0xC8	; 200
    5176:	90 e0       	ldi	r25, 0x00	; 0
    5178:	91 83       	std	Z+1, r25	; 0x01
    517a:	80 83       	st	Z, r24
    517c:	fe 01       	movw	r30, r28
    517e:	e5 5e       	subi	r30, 0xE5	; 229
    5180:	fe 4f       	sbci	r31, 0xFE	; 254
    5182:	80 81       	ld	r24, Z
    5184:	91 81       	ldd	r25, Z+1	; 0x01
    5186:	01 97       	sbiw	r24, 0x01	; 1
    5188:	f1 f7       	brne	.-4      	; 0x5186 <main+0x302a>
    518a:	fe 01       	movw	r30, r28
    518c:	e5 5e       	subi	r30, 0xE5	; 229
    518e:	fe 4f       	sbci	r31, 0xFE	; 254
    5190:	91 83       	std	Z+1, r25	; 0x01
    5192:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5194:	de 01       	movw	r26, r28
    5196:	a3 5e       	subi	r26, 0xE3	; 227
    5198:	be 4f       	sbci	r27, 0xFE	; 254
    519a:	fe 01       	movw	r30, r28
    519c:	e3 5e       	subi	r30, 0xE3	; 227
    519e:	fe 4f       	sbci	r31, 0xFE	; 254
    51a0:	80 81       	ld	r24, Z
    51a2:	91 81       	ldd	r25, Z+1	; 0x01
    51a4:	01 97       	sbiw	r24, 0x01	; 1
    51a6:	11 96       	adiw	r26, 0x01	; 1
    51a8:	9c 93       	st	X, r25
    51aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51ac:	fe 01       	movw	r30, r28
    51ae:	e3 5e       	subi	r30, 0xE3	; 227
    51b0:	fe 4f       	sbci	r31, 0xFE	; 254
    51b2:	80 81       	ld	r24, Z
    51b4:	91 81       	ldd	r25, Z+1	; 0x01
    51b6:	00 97       	sbiw	r24, 0x00	; 0
    51b8:	d1 f6       	brne	.-76     	; 0x516e <main+0x3012>
    51ba:	27 c0       	rjmp	.+78     	; 0x520a <main+0x30ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51bc:	8e 01       	movw	r16, r28
    51be:	03 5e       	subi	r16, 0xE3	; 227
    51c0:	1e 4f       	sbci	r17, 0xFE	; 254
    51c2:	fe 01       	movw	r30, r28
    51c4:	e1 5e       	subi	r30, 0xE1	; 225
    51c6:	fe 4f       	sbci	r31, 0xFE	; 254
    51c8:	60 81       	ld	r22, Z
    51ca:	71 81       	ldd	r23, Z+1	; 0x01
    51cc:	82 81       	ldd	r24, Z+2	; 0x02
    51ce:	93 81       	ldd	r25, Z+3	; 0x03
    51d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51d4:	dc 01       	movw	r26, r24
    51d6:	cb 01       	movw	r24, r22
    51d8:	f8 01       	movw	r30, r16
    51da:	91 83       	std	Z+1, r25	; 0x01
    51dc:	80 83       	st	Z, r24
    51de:	de 01       	movw	r26, r28
    51e0:	a7 5e       	subi	r26, 0xE7	; 231
    51e2:	be 4f       	sbci	r27, 0xFE	; 254
    51e4:	fe 01       	movw	r30, r28
    51e6:	e3 5e       	subi	r30, 0xE3	; 227
    51e8:	fe 4f       	sbci	r31, 0xFE	; 254
    51ea:	80 81       	ld	r24, Z
    51ec:	91 81       	ldd	r25, Z+1	; 0x01
    51ee:	8d 93       	st	X+, r24
    51f0:	9c 93       	st	X, r25
    51f2:	fe 01       	movw	r30, r28
    51f4:	e7 5e       	subi	r30, 0xE7	; 231
    51f6:	fe 4f       	sbci	r31, 0xFE	; 254
    51f8:	80 81       	ld	r24, Z
    51fa:	91 81       	ldd	r25, Z+1	; 0x01
    51fc:	01 97       	sbiw	r24, 0x01	; 1
    51fe:	f1 f7       	brne	.-4      	; 0x51fc <main+0x30a0>
    5200:	fe 01       	movw	r30, r28
    5202:	e7 5e       	subi	r30, 0xE7	; 231
    5204:	fe 4f       	sbci	r31, 0xFE	; 254
    5206:	91 83       	std	Z+1, r25	; 0x01
    5208:	80 83       	st	Z, r24
						_delay_ms(250);
						DIO_write(BUZZER_PORT,BUZZER_PIN,0);
    520a:	84 e4       	ldi	r24, 0x44	; 68
    520c:	66 e0       	ldi	r22, 0x06	; 6
    520e:	40 e0       	ldi	r20, 0x00	; 0
    5210:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    5214:	fe 01       	movw	r30, r28
    5216:	eb 5e       	subi	r30, 0xEB	; 235
    5218:	fe 4f       	sbci	r31, 0xFE	; 254
    521a:	80 e0       	ldi	r24, 0x00	; 0
    521c:	90 e8       	ldi	r25, 0x80	; 128
    521e:	ab e3       	ldi	r26, 0x3B	; 59
    5220:	b4 e4       	ldi	r27, 0x44	; 68
    5222:	80 83       	st	Z, r24
    5224:	91 83       	std	Z+1, r25	; 0x01
    5226:	a2 83       	std	Z+2, r26	; 0x02
    5228:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    522a:	8e 01       	movw	r16, r28
    522c:	0f 5e       	subi	r16, 0xEF	; 239
    522e:	1e 4f       	sbci	r17, 0xFE	; 254
    5230:	fe 01       	movw	r30, r28
    5232:	eb 5e       	subi	r30, 0xEB	; 235
    5234:	fe 4f       	sbci	r31, 0xFE	; 254
    5236:	60 81       	ld	r22, Z
    5238:	71 81       	ldd	r23, Z+1	; 0x01
    523a:	82 81       	ldd	r24, Z+2	; 0x02
    523c:	93 81       	ldd	r25, Z+3	; 0x03
    523e:	20 e0       	ldi	r18, 0x00	; 0
    5240:	30 e0       	ldi	r19, 0x00	; 0
    5242:	4a ef       	ldi	r20, 0xFA	; 250
    5244:	54 e4       	ldi	r21, 0x44	; 68
    5246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    524a:	dc 01       	movw	r26, r24
    524c:	cb 01       	movw	r24, r22
    524e:	f8 01       	movw	r30, r16
    5250:	80 83       	st	Z, r24
    5252:	91 83       	std	Z+1, r25	; 0x01
    5254:	a2 83       	std	Z+2, r26	; 0x02
    5256:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5258:	fe 01       	movw	r30, r28
    525a:	ef 5e       	subi	r30, 0xEF	; 239
    525c:	fe 4f       	sbci	r31, 0xFE	; 254
    525e:	60 81       	ld	r22, Z
    5260:	71 81       	ldd	r23, Z+1	; 0x01
    5262:	82 81       	ldd	r24, Z+2	; 0x02
    5264:	93 81       	ldd	r25, Z+3	; 0x03
    5266:	20 e0       	ldi	r18, 0x00	; 0
    5268:	30 e0       	ldi	r19, 0x00	; 0
    526a:	40 e8       	ldi	r20, 0x80	; 128
    526c:	5f e3       	ldi	r21, 0x3F	; 63
    526e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5272:	88 23       	and	r24, r24
    5274:	44 f4       	brge	.+16     	; 0x5286 <main+0x312a>
		__ticks = 1;
    5276:	fe 01       	movw	r30, r28
    5278:	e1 5f       	subi	r30, 0xF1	; 241
    527a:	fe 4f       	sbci	r31, 0xFE	; 254
    527c:	81 e0       	ldi	r24, 0x01	; 1
    527e:	90 e0       	ldi	r25, 0x00	; 0
    5280:	91 83       	std	Z+1, r25	; 0x01
    5282:	80 83       	st	Z, r24
    5284:	64 c0       	rjmp	.+200    	; 0x534e <main+0x31f2>
	else if (__tmp > 65535)
    5286:	fe 01       	movw	r30, r28
    5288:	ef 5e       	subi	r30, 0xEF	; 239
    528a:	fe 4f       	sbci	r31, 0xFE	; 254
    528c:	60 81       	ld	r22, Z
    528e:	71 81       	ldd	r23, Z+1	; 0x01
    5290:	82 81       	ldd	r24, Z+2	; 0x02
    5292:	93 81       	ldd	r25, Z+3	; 0x03
    5294:	20 e0       	ldi	r18, 0x00	; 0
    5296:	3f ef       	ldi	r19, 0xFF	; 255
    5298:	4f e7       	ldi	r20, 0x7F	; 127
    529a:	57 e4       	ldi	r21, 0x47	; 71
    529c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52a0:	18 16       	cp	r1, r24
    52a2:	0c f0       	brlt	.+2      	; 0x52a6 <main+0x314a>
    52a4:	43 c0       	rjmp	.+134    	; 0x532c <main+0x31d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52a6:	fe 01       	movw	r30, r28
    52a8:	eb 5e       	subi	r30, 0xEB	; 235
    52aa:	fe 4f       	sbci	r31, 0xFE	; 254
    52ac:	60 81       	ld	r22, Z
    52ae:	71 81       	ldd	r23, Z+1	; 0x01
    52b0:	82 81       	ldd	r24, Z+2	; 0x02
    52b2:	93 81       	ldd	r25, Z+3	; 0x03
    52b4:	20 e0       	ldi	r18, 0x00	; 0
    52b6:	30 e0       	ldi	r19, 0x00	; 0
    52b8:	40 e2       	ldi	r20, 0x20	; 32
    52ba:	51 e4       	ldi	r21, 0x41	; 65
    52bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52c0:	dc 01       	movw	r26, r24
    52c2:	cb 01       	movw	r24, r22
    52c4:	8e 01       	movw	r16, r28
    52c6:	01 5f       	subi	r16, 0xF1	; 241
    52c8:	1e 4f       	sbci	r17, 0xFE	; 254
    52ca:	bc 01       	movw	r22, r24
    52cc:	cd 01       	movw	r24, r26
    52ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52d2:	dc 01       	movw	r26, r24
    52d4:	cb 01       	movw	r24, r22
    52d6:	f8 01       	movw	r30, r16
    52d8:	91 83       	std	Z+1, r25	; 0x01
    52da:	80 83       	st	Z, r24
    52dc:	1f c0       	rjmp	.+62     	; 0x531c <main+0x31c0>
    52de:	fe 01       	movw	r30, r28
    52e0:	e3 5f       	subi	r30, 0xF3	; 243
    52e2:	fe 4f       	sbci	r31, 0xFE	; 254
    52e4:	88 ec       	ldi	r24, 0xC8	; 200
    52e6:	90 e0       	ldi	r25, 0x00	; 0
    52e8:	91 83       	std	Z+1, r25	; 0x01
    52ea:	80 83       	st	Z, r24
    52ec:	fe 01       	movw	r30, r28
    52ee:	e3 5f       	subi	r30, 0xF3	; 243
    52f0:	fe 4f       	sbci	r31, 0xFE	; 254
    52f2:	80 81       	ld	r24, Z
    52f4:	91 81       	ldd	r25, Z+1	; 0x01
    52f6:	01 97       	sbiw	r24, 0x01	; 1
    52f8:	f1 f7       	brne	.-4      	; 0x52f6 <main+0x319a>
    52fa:	fe 01       	movw	r30, r28
    52fc:	e3 5f       	subi	r30, 0xF3	; 243
    52fe:	fe 4f       	sbci	r31, 0xFE	; 254
    5300:	91 83       	std	Z+1, r25	; 0x01
    5302:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5304:	de 01       	movw	r26, r28
    5306:	a1 5f       	subi	r26, 0xF1	; 241
    5308:	be 4f       	sbci	r27, 0xFE	; 254
    530a:	fe 01       	movw	r30, r28
    530c:	e1 5f       	subi	r30, 0xF1	; 241
    530e:	fe 4f       	sbci	r31, 0xFE	; 254
    5310:	80 81       	ld	r24, Z
    5312:	91 81       	ldd	r25, Z+1	; 0x01
    5314:	01 97       	sbiw	r24, 0x01	; 1
    5316:	11 96       	adiw	r26, 0x01	; 1
    5318:	9c 93       	st	X, r25
    531a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    531c:	fe 01       	movw	r30, r28
    531e:	e1 5f       	subi	r30, 0xF1	; 241
    5320:	fe 4f       	sbci	r31, 0xFE	; 254
    5322:	80 81       	ld	r24, Z
    5324:	91 81       	ldd	r25, Z+1	; 0x01
    5326:	00 97       	sbiw	r24, 0x00	; 0
    5328:	d1 f6       	brne	.-76     	; 0x52de <main+0x3182>
    532a:	27 c0       	rjmp	.+78     	; 0x537a <main+0x321e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    532c:	8e 01       	movw	r16, r28
    532e:	01 5f       	subi	r16, 0xF1	; 241
    5330:	1e 4f       	sbci	r17, 0xFE	; 254
    5332:	fe 01       	movw	r30, r28
    5334:	ef 5e       	subi	r30, 0xEF	; 239
    5336:	fe 4f       	sbci	r31, 0xFE	; 254
    5338:	60 81       	ld	r22, Z
    533a:	71 81       	ldd	r23, Z+1	; 0x01
    533c:	82 81       	ldd	r24, Z+2	; 0x02
    533e:	93 81       	ldd	r25, Z+3	; 0x03
    5340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5344:	dc 01       	movw	r26, r24
    5346:	cb 01       	movw	r24, r22
    5348:	f8 01       	movw	r30, r16
    534a:	91 83       	std	Z+1, r25	; 0x01
    534c:	80 83       	st	Z, r24
    534e:	de 01       	movw	r26, r28
    5350:	a5 5f       	subi	r26, 0xF5	; 245
    5352:	be 4f       	sbci	r27, 0xFE	; 254
    5354:	fe 01       	movw	r30, r28
    5356:	e1 5f       	subi	r30, 0xF1	; 241
    5358:	fe 4f       	sbci	r31, 0xFE	; 254
    535a:	80 81       	ld	r24, Z
    535c:	91 81       	ldd	r25, Z+1	; 0x01
    535e:	8d 93       	st	X+, r24
    5360:	9c 93       	st	X, r25
    5362:	fe 01       	movw	r30, r28
    5364:	e5 5f       	subi	r30, 0xF5	; 245
    5366:	fe 4f       	sbci	r31, 0xFE	; 254
    5368:	80 81       	ld	r24, Z
    536a:	91 81       	ldd	r25, Z+1	; 0x01
    536c:	01 97       	sbiw	r24, 0x01	; 1
    536e:	f1 f7       	brne	.-4      	; 0x536c <main+0x3210>
    5370:	fe 01       	movw	r30, r28
    5372:	e5 5f       	subi	r30, 0xF5	; 245
    5374:	fe 4f       	sbci	r31, 0xFE	; 254
    5376:	91 83       	std	Z+1, r25	; 0x01
    5378:	80 83       	st	Z, r24
						_delay_ms(750);//Halt the system for the given time in (ms)
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    537a:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
    537e:	fe 01       	movw	r30, r28
    5380:	ed 55       	subi	r30, 0x5D	; 93
    5382:	fd 4f       	sbci	r31, 0xFD	; 253
    5384:	80 81       	ld	r24, Z
    5386:	83 30       	cpi	r24, 0x03	; 3
    5388:	58 f0       	brcs	.+22     	; 0x53a0 <main+0x3244>
						{
							eeprom_update_byte (LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
    538a:	88 e0       	ldi	r24, 0x08	; 8
    538c:	90 e0       	ldi	r25, 0x00	; 0
    538e:	61 e0       	ldi	r22, 0x01	; 1
    5390:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <__eeupd_byte_m32>
							block_mode_flag = TRUE;//turn on block mode
    5394:	fe 01       	movw	r30, r28
    5396:	ea 55       	subi	r30, 0x5A	; 90
    5398:	fd 4f       	sbci	r31, 0xFD	; 253
    539a:	81 e0       	ldi	r24, 0x01	; 1
    539c:	80 83       	st	Z, r24
    539e:	07 c0       	rjmp	.+14     	; 0x53ae <main+0x3252>
					}
				}
				break;//bREAK SWITCH case
				/********************************* Guest login **********************************************/
			case  CHECK_GUEST_MODE:
				while(login_mode != GUEST)
    53a0:	fe 01       	movw	r30, r28
    53a2:	e9 55       	subi	r30, 0x59	; 89
    53a4:	fd 4f       	sbci	r31, 0xFD	; 253
    53a6:	80 81       	ld	r24, Z
    53a8:	82 30       	cpi	r24, 0x02	; 2
    53aa:	09 f0       	breq	.+2      	; 0x53ae <main+0x3252>
    53ac:	ce ca       	rjmp	.-2660   	; 0x494a <main+0x27ee>
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
			LCD_vSend_string("Session Timeout");//print session timeout message
			_delay_ms(1000);//Halt the system for the given time in (ms)
		}

		while (login_mode==NO_MODE)//The user can only leave the loop only in case of he was logged in as guest or admin
    53ae:	fe 01       	movw	r30, r28
    53b0:	e9 55       	subi	r30, 0x59	; 89
    53b2:	fd 4f       	sbci	r31, 0xFD	; 253
    53b4:	80 81       	ld	r24, Z
    53b6:	88 23       	and	r24, r24
    53b8:	11 f4       	brne	.+4      	; 0x53be <main+0x3262>
    53ba:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <main+0x105c>
			}//end of switch

		}

		/*************************************************************************************************/
		uint8 show_menu = MAIN_MENU;
    53be:	fe 01       	movw	r30, r28
    53c0:	ee 55       	subi	r30, 0x5E	; 94
    53c2:	fd 4f       	sbci	r31, 0xFD	; 253
    53c4:	81 e0       	ldi	r24, 0x01	; 1
    53c6:	80 83       	st	Z, r24
    53c8:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <main+0x514e>


		while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
		{
			key_pressed = NOT_PRESSED;//Set the key pressed by the user to its default value
    53cc:	fe 01       	movw	r30, r28
    53ce:	eb 55       	subi	r30, 0x5B	; 91
    53d0:	fd 4f       	sbci	r31, 0xFD	; 253
    53d2:	8f ef       	ldi	r24, 0xFF	; 255
    53d4:	80 83       	st	Z, r24
			switch (show_menu)
    53d6:	fe 01       	movw	r30, r28
    53d8:	ee 55       	subi	r30, 0x5E	; 94
    53da:	fd 4f       	sbci	r31, 0xFD	; 253
    53dc:	80 81       	ld	r24, Z
    53de:	28 2f       	mov	r18, r24
    53e0:	30 e0       	ldi	r19, 0x00	; 0
    53e2:	c8 54       	subi	r28, 0x48	; 72
    53e4:	dd 4f       	sbci	r29, 0xFD	; 253
    53e6:	39 83       	std	Y+1, r19	; 0x01
    53e8:	28 83       	st	Y, r18
    53ea:	c8 5b       	subi	r28, 0xB8	; 184
    53ec:	d2 40       	sbci	r29, 0x02	; 2
    53ee:	c8 54       	subi	r28, 0x48	; 72
    53f0:	dd 4f       	sbci	r29, 0xFD	; 253
    53f2:	88 81       	ld	r24, Y
    53f4:	99 81       	ldd	r25, Y+1	; 0x01
    53f6:	c8 5b       	subi	r28, 0xB8	; 184
    53f8:	d2 40       	sbci	r29, 0x02	; 2
    53fa:	85 30       	cpi	r24, 0x05	; 5
    53fc:	91 05       	cpc	r25, r1
    53fe:	11 f4       	brne	.+4      	; 0x5404 <main+0x32a8>
    5400:	0c 94 67 32 	jmp	0x64ce	; 0x64ce <main+0x4372>
    5404:	c8 54       	subi	r28, 0x48	; 72
    5406:	dd 4f       	sbci	r29, 0xFD	; 253
    5408:	e8 81       	ld	r30, Y
    540a:	f9 81       	ldd	r31, Y+1	; 0x01
    540c:	c8 5b       	subi	r28, 0xB8	; 184
    540e:	d2 40       	sbci	r29, 0x02	; 2
    5410:	e6 30       	cpi	r30, 0x06	; 6
    5412:	f1 05       	cpc	r31, r1
    5414:	bc f5       	brge	.+110    	; 0x5484 <main+0x3328>
    5416:	c8 54       	subi	r28, 0x48	; 72
    5418:	dd 4f       	sbci	r29, 0xFD	; 253
    541a:	28 81       	ld	r18, Y
    541c:	39 81       	ldd	r19, Y+1	; 0x01
    541e:	c8 5b       	subi	r28, 0xB8	; 184
    5420:	d2 40       	sbci	r29, 0x02	; 2
    5422:	22 30       	cpi	r18, 0x02	; 2
    5424:	31 05       	cpc	r19, r1
    5426:	09 f4       	brne	.+2      	; 0x542a <main+0x32ce>
    5428:	28 c3       	rjmp	.+1616   	; 0x5a7a <main+0x391e>
    542a:	c8 54       	subi	r28, 0x48	; 72
    542c:	dd 4f       	sbci	r29, 0xFD	; 253
    542e:	88 81       	ld	r24, Y
    5430:	99 81       	ldd	r25, Y+1	; 0x01
    5432:	c8 5b       	subi	r28, 0xB8	; 184
    5434:	d2 40       	sbci	r29, 0x02	; 2
    5436:	83 30       	cpi	r24, 0x03	; 3
    5438:	91 05       	cpc	r25, r1
    543a:	64 f4       	brge	.+24     	; 0x5454 <main+0x32f8>
    543c:	c8 54       	subi	r28, 0x48	; 72
    543e:	dd 4f       	sbci	r29, 0xFD	; 253
    5440:	e8 81       	ld	r30, Y
    5442:	f9 81       	ldd	r31, Y+1	; 0x01
    5444:	c8 5b       	subi	r28, 0xB8	; 184
    5446:	d2 40       	sbci	r29, 0x02	; 2
    5448:	e1 30       	cpi	r30, 0x01	; 1
    544a:	f1 05       	cpc	r31, r1
    544c:	09 f4       	brne	.+2      	; 0x5450 <main+0x32f4>
    544e:	5d c0       	rjmp	.+186    	; 0x550a <main+0x33ae>
    5450:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <main+0x514e>
    5454:	c8 54       	subi	r28, 0x48	; 72
    5456:	dd 4f       	sbci	r29, 0xFD	; 253
    5458:	28 81       	ld	r18, Y
    545a:	39 81       	ldd	r19, Y+1	; 0x01
    545c:	c8 5b       	subi	r28, 0xB8	; 184
    545e:	d2 40       	sbci	r29, 0x02	; 2
    5460:	23 30       	cpi	r18, 0x03	; 3
    5462:	31 05       	cpc	r19, r1
    5464:	11 f4       	brne	.+4      	; 0x546a <main+0x330e>
    5466:	0c 94 4d 32 	jmp	0x649a	; 0x649a <main+0x433e>
    546a:	c8 54       	subi	r28, 0x48	; 72
    546c:	dd 4f       	sbci	r29, 0xFD	; 253
    546e:	88 81       	ld	r24, Y
    5470:	99 81       	ldd	r25, Y+1	; 0x01
    5472:	c8 5b       	subi	r28, 0xB8	; 184
    5474:	d2 40       	sbci	r29, 0x02	; 2
    5476:	84 30       	cpi	r24, 0x04	; 4
    5478:	91 05       	cpc	r25, r1
    547a:	11 f4       	brne	.+4      	; 0x5480 <main+0x3324>
    547c:	0c 94 5a 32 	jmp	0x64b4	; 0x64b4 <main+0x4358>
    5480:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <main+0x514e>
    5484:	c8 54       	subi	r28, 0x48	; 72
    5486:	dd 4f       	sbci	r29, 0xFD	; 253
    5488:	e8 81       	ld	r30, Y
    548a:	f9 81       	ldd	r31, Y+1	; 0x01
    548c:	c8 5b       	subi	r28, 0xB8	; 184
    548e:	d2 40       	sbci	r29, 0x02	; 2
    5490:	e8 30       	cpi	r30, 0x08	; 8
    5492:	f1 05       	cpc	r31, r1
    5494:	09 f4       	brne	.+2      	; 0x5498 <main+0x333c>
    5496:	80 c5       	rjmp	.+2816   	; 0x5f98 <main+0x3e3c>
    5498:	c8 54       	subi	r28, 0x48	; 72
    549a:	dd 4f       	sbci	r29, 0xFD	; 253
    549c:	28 81       	ld	r18, Y
    549e:	39 81       	ldd	r19, Y+1	; 0x01
    54a0:	c8 5b       	subi	r28, 0xB8	; 184
    54a2:	d2 40       	sbci	r29, 0x02	; 2
    54a4:	29 30       	cpi	r18, 0x09	; 9
    54a6:	31 05       	cpc	r19, r1
    54a8:	c4 f4       	brge	.+48     	; 0x54da <main+0x337e>
    54aa:	c8 54       	subi	r28, 0x48	; 72
    54ac:	dd 4f       	sbci	r29, 0xFD	; 253
    54ae:	88 81       	ld	r24, Y
    54b0:	99 81       	ldd	r25, Y+1	; 0x01
    54b2:	c8 5b       	subi	r28, 0xB8	; 184
    54b4:	d2 40       	sbci	r29, 0x02	; 2
    54b6:	86 30       	cpi	r24, 0x06	; 6
    54b8:	91 05       	cpc	r25, r1
    54ba:	11 f4       	brne	.+4      	; 0x54c0 <main+0x3364>
    54bc:	0c 94 74 32 	jmp	0x64e8	; 0x64e8 <main+0x438c>
    54c0:	c8 54       	subi	r28, 0x48	; 72
    54c2:	dd 4f       	sbci	r29, 0xFD	; 253
    54c4:	e8 81       	ld	r30, Y
    54c6:	f9 81       	ldd	r31, Y+1	; 0x01
    54c8:	c8 5b       	subi	r28, 0xB8	; 184
    54ca:	d2 40       	sbci	r29, 0x02	; 2
    54cc:	e7 30       	cpi	r30, 0x07	; 7
    54ce:	f1 05       	cpc	r31, r1
    54d0:	11 f4       	brne	.+4      	; 0x54d6 <main+0x337a>
    54d2:	0c 94 8d 32 	jmp	0x651a	; 0x651a <main+0x43be>
    54d6:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <main+0x514e>
    54da:	c8 54       	subi	r28, 0x48	; 72
    54dc:	dd 4f       	sbci	r29, 0xFD	; 253
    54de:	28 81       	ld	r18, Y
    54e0:	39 81       	ldd	r19, Y+1	; 0x01
    54e2:	c8 5b       	subi	r28, 0xB8	; 184
    54e4:	d2 40       	sbci	r29, 0x02	; 2
    54e6:	29 30       	cpi	r18, 0x09	; 9
    54e8:	31 05       	cpc	r19, r1
    54ea:	11 f4       	brne	.+4      	; 0x54f0 <main+0x3394>
    54ec:	0c 94 9a 32 	jmp	0x6534	; 0x6534 <main+0x43d8>
    54f0:	c8 54       	subi	r28, 0x48	; 72
    54f2:	dd 4f       	sbci	r29, 0xFD	; 253
    54f4:	88 81       	ld	r24, Y
    54f6:	99 81       	ldd	r25, Y+1	; 0x01
    54f8:	c8 5b       	subi	r28, 0xB8	; 184
    54fa:	d2 40       	sbci	r29, 0x02	; 2
    54fc:	8a 30       	cpi	r24, 0x0A	; 10
    54fe:	91 05       	cpc	r25, r1
    5500:	11 f4       	brne	.+4      	; 0x5506 <main+0x33aa>
    5502:	0c 94 a7 32 	jmp	0x654e	; 0x654e <main+0x43f2>
    5506:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <main+0x514e>
			{
			case MAIN_MENU:
				do
				{
					/******************** print main Menu ******************/
					LCD_clearscreen();
    550a:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
					LCD_vSend_string("1:Room1 2:Room2");
    550e:	82 ea       	ldi	r24, 0xA2	; 162
    5510:	91 e0       	ldi	r25, 0x01	; 1
    5512:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
					LCD_movecursor(2,1);
    5516:	82 e0       	ldi	r24, 0x02	; 2
    5518:	61 e0       	ldi	r22, 0x01	; 1
    551a:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
					if(login_mode==ADMIN)//check login mode
    551e:	fe 01       	movw	r30, r28
    5520:	e9 55       	subi	r30, 0x59	; 89
    5522:	fd 4f       	sbci	r31, 0xFD	; 253
    5524:	80 81       	ld	r24, Z
    5526:	81 30       	cpi	r24, 0x01	; 1
    5528:	29 f4       	brne	.+10     	; 0x5534 <main+0x33d8>
					{
						LCD_vSend_string("3:Room3 4:More ");//this menu options only printed if the logged in user is an admin
    552a:	82 eb       	ldi	r24, 0xB2	; 178
    552c:	91 e0       	ldi	r25, 0x01	; 1
    552e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    5532:	0a c0       	rjmp	.+20     	; 0x5548 <main+0x33ec>
					}
					else if(login_mode==GUEST)//check login mode
    5534:	fe 01       	movw	r30, r28
    5536:	e9 55       	subi	r30, 0x59	; 89
    5538:	fd 4f       	sbci	r31, 0xFD	; 253
    553a:	80 81       	ld	r24, Z
    553c:	82 30       	cpi	r24, 0x02	; 2
    553e:	21 f4       	brne	.+8      	; 0x5548 <main+0x33ec>
					{
						LCD_vSend_string("3:Room3 4:Room4");//this menu options only printed if the logged in user is a guest
    5540:	82 ec       	ldi	r24, 0xC2	; 194
    5542:	91 e0       	ldi	r25, 0x01	; 1
    5544:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
					}
					/*******************************************************/

					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
    5548:	fe 01       	movw	r30, r28
    554a:	e9 55       	subi	r30, 0x59	; 89
    554c:	fd 4f       	sbci	r31, 0xFD	; 253
    554e:	80 81       	ld	r24, Z
    5550:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <u8GetKeyPressed>
    5554:	fe 01       	movw	r30, r28
    5556:	eb 55       	subi	r30, 0x5B	; 91
    5558:	fd 4f       	sbci	r31, 0xFD	; 253
    555a:	80 83       	st	Z, r24
    555c:	fe 01       	movw	r30, r28
    555e:	e9 5f       	subi	r30, 0xF9	; 249
    5560:	fe 4f       	sbci	r31, 0xFE	; 254
    5562:	80 e0       	ldi	r24, 0x00	; 0
    5564:	90 e0       	ldi	r25, 0x00	; 0
    5566:	a8 ec       	ldi	r26, 0xC8	; 200
    5568:	b2 e4       	ldi	r27, 0x42	; 66
    556a:	80 83       	st	Z, r24
    556c:	91 83       	std	Z+1, r25	; 0x01
    556e:	a2 83       	std	Z+2, r26	; 0x02
    5570:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5572:	8e 01       	movw	r16, r28
    5574:	0d 5f       	subi	r16, 0xFD	; 253
    5576:	1e 4f       	sbci	r17, 0xFE	; 254
    5578:	fe 01       	movw	r30, r28
    557a:	e9 5f       	subi	r30, 0xF9	; 249
    557c:	fe 4f       	sbci	r31, 0xFE	; 254
    557e:	60 81       	ld	r22, Z
    5580:	71 81       	ldd	r23, Z+1	; 0x01
    5582:	82 81       	ldd	r24, Z+2	; 0x02
    5584:	93 81       	ldd	r25, Z+3	; 0x03
    5586:	20 e0       	ldi	r18, 0x00	; 0
    5588:	30 e0       	ldi	r19, 0x00	; 0
    558a:	4a ef       	ldi	r20, 0xFA	; 250
    558c:	54 e4       	ldi	r21, 0x44	; 68
    558e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5592:	dc 01       	movw	r26, r24
    5594:	cb 01       	movw	r24, r22
    5596:	f8 01       	movw	r30, r16
    5598:	80 83       	st	Z, r24
    559a:	91 83       	std	Z+1, r25	; 0x01
    559c:	a2 83       	std	Z+2, r26	; 0x02
    559e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    55a0:	fe 01       	movw	r30, r28
    55a2:	ed 5f       	subi	r30, 0xFD	; 253
    55a4:	fe 4f       	sbci	r31, 0xFE	; 254
    55a6:	60 81       	ld	r22, Z
    55a8:	71 81       	ldd	r23, Z+1	; 0x01
    55aa:	82 81       	ldd	r24, Z+2	; 0x02
    55ac:	93 81       	ldd	r25, Z+3	; 0x03
    55ae:	20 e0       	ldi	r18, 0x00	; 0
    55b0:	30 e0       	ldi	r19, 0x00	; 0
    55b2:	40 e8       	ldi	r20, 0x80	; 128
    55b4:	5f e3       	ldi	r21, 0x3F	; 63
    55b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    55ba:	88 23       	and	r24, r24
    55bc:	44 f4       	brge	.+16     	; 0x55ce <main+0x3472>
		__ticks = 1;
    55be:	fe 01       	movw	r30, r28
    55c0:	ef 5f       	subi	r30, 0xFF	; 255
    55c2:	fe 4f       	sbci	r31, 0xFE	; 254
    55c4:	81 e0       	ldi	r24, 0x01	; 1
    55c6:	90 e0       	ldi	r25, 0x00	; 0
    55c8:	91 83       	std	Z+1, r25	; 0x01
    55ca:	80 83       	st	Z, r24
    55cc:	64 c0       	rjmp	.+200    	; 0x5696 <main+0x353a>
	else if (__tmp > 65535)
    55ce:	fe 01       	movw	r30, r28
    55d0:	ed 5f       	subi	r30, 0xFD	; 253
    55d2:	fe 4f       	sbci	r31, 0xFE	; 254
    55d4:	60 81       	ld	r22, Z
    55d6:	71 81       	ldd	r23, Z+1	; 0x01
    55d8:	82 81       	ldd	r24, Z+2	; 0x02
    55da:	93 81       	ldd	r25, Z+3	; 0x03
    55dc:	20 e0       	ldi	r18, 0x00	; 0
    55de:	3f ef       	ldi	r19, 0xFF	; 255
    55e0:	4f e7       	ldi	r20, 0x7F	; 127
    55e2:	57 e4       	ldi	r21, 0x47	; 71
    55e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55e8:	18 16       	cp	r1, r24
    55ea:	0c f0       	brlt	.+2      	; 0x55ee <main+0x3492>
    55ec:	43 c0       	rjmp	.+134    	; 0x5674 <main+0x3518>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55ee:	fe 01       	movw	r30, r28
    55f0:	e9 5f       	subi	r30, 0xF9	; 249
    55f2:	fe 4f       	sbci	r31, 0xFE	; 254
    55f4:	60 81       	ld	r22, Z
    55f6:	71 81       	ldd	r23, Z+1	; 0x01
    55f8:	82 81       	ldd	r24, Z+2	; 0x02
    55fa:	93 81       	ldd	r25, Z+3	; 0x03
    55fc:	20 e0       	ldi	r18, 0x00	; 0
    55fe:	30 e0       	ldi	r19, 0x00	; 0
    5600:	40 e2       	ldi	r20, 0x20	; 32
    5602:	51 e4       	ldi	r21, 0x41	; 65
    5604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5608:	dc 01       	movw	r26, r24
    560a:	cb 01       	movw	r24, r22
    560c:	8e 01       	movw	r16, r28
    560e:	0f 5f       	subi	r16, 0xFF	; 255
    5610:	1e 4f       	sbci	r17, 0xFE	; 254
    5612:	bc 01       	movw	r22, r24
    5614:	cd 01       	movw	r24, r26
    5616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    561a:	dc 01       	movw	r26, r24
    561c:	cb 01       	movw	r24, r22
    561e:	f8 01       	movw	r30, r16
    5620:	91 83       	std	Z+1, r25	; 0x01
    5622:	80 83       	st	Z, r24
    5624:	1f c0       	rjmp	.+62     	; 0x5664 <main+0x3508>
    5626:	fe 01       	movw	r30, r28
    5628:	e1 50       	subi	r30, 0x01	; 1
    562a:	ff 4f       	sbci	r31, 0xFF	; 255
    562c:	88 ec       	ldi	r24, 0xC8	; 200
    562e:	90 e0       	ldi	r25, 0x00	; 0
    5630:	91 83       	std	Z+1, r25	; 0x01
    5632:	80 83       	st	Z, r24
    5634:	fe 01       	movw	r30, r28
    5636:	e1 50       	subi	r30, 0x01	; 1
    5638:	ff 4f       	sbci	r31, 0xFF	; 255
    563a:	80 81       	ld	r24, Z
    563c:	91 81       	ldd	r25, Z+1	; 0x01
    563e:	01 97       	sbiw	r24, 0x01	; 1
    5640:	f1 f7       	brne	.-4      	; 0x563e <main+0x34e2>
    5642:	fe 01       	movw	r30, r28
    5644:	e1 50       	subi	r30, 0x01	; 1
    5646:	ff 4f       	sbci	r31, 0xFF	; 255
    5648:	91 83       	std	Z+1, r25	; 0x01
    564a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    564c:	de 01       	movw	r26, r28
    564e:	af 5f       	subi	r26, 0xFF	; 255
    5650:	be 4f       	sbci	r27, 0xFE	; 254
    5652:	fe 01       	movw	r30, r28
    5654:	ef 5f       	subi	r30, 0xFF	; 255
    5656:	fe 4f       	sbci	r31, 0xFE	; 254
    5658:	80 81       	ld	r24, Z
    565a:	91 81       	ldd	r25, Z+1	; 0x01
    565c:	01 97       	sbiw	r24, 0x01	; 1
    565e:	11 96       	adiw	r26, 0x01	; 1
    5660:	9c 93       	st	X, r25
    5662:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5664:	fe 01       	movw	r30, r28
    5666:	ef 5f       	subi	r30, 0xFF	; 255
    5668:	fe 4f       	sbci	r31, 0xFE	; 254
    566a:	80 81       	ld	r24, Z
    566c:	91 81       	ldd	r25, Z+1	; 0x01
    566e:	00 97       	sbiw	r24, 0x00	; 0
    5670:	d1 f6       	brne	.-76     	; 0x5626 <main+0x34ca>
    5672:	28 c0       	rjmp	.+80     	; 0x56c4 <main+0x3568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5674:	8e 01       	movw	r16, r28
    5676:	0f 5f       	subi	r16, 0xFF	; 255
    5678:	1e 4f       	sbci	r17, 0xFE	; 254
    567a:	fe 01       	movw	r30, r28
    567c:	ed 5f       	subi	r30, 0xFD	; 253
    567e:	fe 4f       	sbci	r31, 0xFE	; 254
    5680:	60 81       	ld	r22, Z
    5682:	71 81       	ldd	r23, Z+1	; 0x01
    5684:	82 81       	ldd	r24, Z+2	; 0x02
    5686:	93 81       	ldd	r25, Z+3	; 0x03
    5688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    568c:	dc 01       	movw	r26, r24
    568e:	cb 01       	movw	r24, r22
    5690:	f8 01       	movw	r30, r16
    5692:	91 83       	std	Z+1, r25	; 0x01
    5694:	80 83       	st	Z, r24
    5696:	de 01       	movw	r26, r28
    5698:	a3 50       	subi	r26, 0x03	; 3
    569a:	bf 4f       	sbci	r27, 0xFF	; 255
    569c:	fe 01       	movw	r30, r28
    569e:	ef 5f       	subi	r30, 0xFF	; 255
    56a0:	fe 4f       	sbci	r31, 0xFE	; 254
    56a2:	80 81       	ld	r24, Z
    56a4:	91 81       	ldd	r25, Z+1	; 0x01
    56a6:	11 96       	adiw	r26, 0x01	; 1
    56a8:	9c 93       	st	X, r25
    56aa:	8e 93       	st	-X, r24
    56ac:	fe 01       	movw	r30, r28
    56ae:	e3 50       	subi	r30, 0x03	; 3
    56b0:	ff 4f       	sbci	r31, 0xFF	; 255
    56b2:	80 81       	ld	r24, Z
    56b4:	91 81       	ldd	r25, Z+1	; 0x01
    56b6:	01 97       	sbiw	r24, 0x01	; 1
    56b8:	f1 f7       	brne	.-4      	; 0x56b6 <main+0x355a>
    56ba:	fe 01       	movw	r30, r28
    56bc:	e3 50       	subi	r30, 0x03	; 3
    56be:	ff 4f       	sbci	r31, 0xFF	; 255
    56c0:	91 83       	std	Z+1, r25	; 0x01
    56c2:	80 83       	st	Z, r24
					_delay_ms(100);//to avoid the duplication of the pressed key

					if (key_pressed == SELECT_ROOM1)//If key pressed is 1
    56c4:	fe 01       	movw	r30, r28
    56c6:	eb 55       	subi	r30, 0x5B	; 91
    56c8:	fd 4f       	sbci	r31, 0xFD	; 253
    56ca:	80 81       	ld	r24, Z
    56cc:	81 33       	cpi	r24, 0x31	; 49
    56ce:	31 f4       	brne	.+12     	; 0x56dc <main+0x3580>
					{
						show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
    56d0:	fe 01       	movw	r30, r28
    56d2:	ee 55       	subi	r30, 0x5E	; 94
    56d4:	fd 4f       	sbci	r31, 0xFD	; 253
    56d6:	83 e0       	ldi	r24, 0x03	; 3
    56d8:	80 83       	st	Z, r24
    56da:	ba c1       	rjmp	.+884    	; 0x5a50 <main+0x38f4>
					}
					else if (key_pressed == SELECT_ROOM2)//If key pressed is 2
    56dc:	fe 01       	movw	r30, r28
    56de:	eb 55       	subi	r30, 0x5B	; 91
    56e0:	fd 4f       	sbci	r31, 0xFD	; 253
    56e2:	80 81       	ld	r24, Z
    56e4:	82 33       	cpi	r24, 0x32	; 50
    56e6:	31 f4       	brne	.+12     	; 0x56f4 <main+0x3598>
					{
						show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
    56e8:	fe 01       	movw	r30, r28
    56ea:	ee 55       	subi	r30, 0x5E	; 94
    56ec:	fd 4f       	sbci	r31, 0xFD	; 253
    56ee:	84 e0       	ldi	r24, 0x04	; 4
    56f0:	80 83       	st	Z, r24
    56f2:	ae c1       	rjmp	.+860    	; 0x5a50 <main+0x38f4>
					}
					else if (key_pressed == SELECT_ROOM3)//If key pressed is 3
    56f4:	fe 01       	movw	r30, r28
    56f6:	eb 55       	subi	r30, 0x5B	; 91
    56f8:	fd 4f       	sbci	r31, 0xFD	; 253
    56fa:	80 81       	ld	r24, Z
    56fc:	83 33       	cpi	r24, 0x33	; 51
    56fe:	31 f4       	brne	.+12     	; 0x570c <main+0x35b0>
					{
						show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
    5700:	fe 01       	movw	r30, r28
    5702:	ee 55       	subi	r30, 0x5E	; 94
    5704:	fd 4f       	sbci	r31, 0xFD	; 253
    5706:	85 e0       	ldi	r24, 0x05	; 5
    5708:	80 83       	st	Z, r24
    570a:	a2 c1       	rjmp	.+836    	; 0x5a50 <main+0x38f4>
					}
					else if (key_pressed == SELECT_ROOM4 && login_mode == GUEST)//If key pressed is 4 and the logged in user is guest
    570c:	fe 01       	movw	r30, r28
    570e:	eb 55       	subi	r30, 0x5B	; 91
    5710:	fd 4f       	sbci	r31, 0xFD	; 253
    5712:	80 81       	ld	r24, Z
    5714:	84 33       	cpi	r24, 0x34	; 52
    5716:	61 f4       	brne	.+24     	; 0x5730 <main+0x35d4>
    5718:	fe 01       	movw	r30, r28
    571a:	e9 55       	subi	r30, 0x59	; 89
    571c:	fd 4f       	sbci	r31, 0xFD	; 253
    571e:	80 81       	ld	r24, Z
    5720:	82 30       	cpi	r24, 0x02	; 2
    5722:	31 f4       	brne	.+12     	; 0x5730 <main+0x35d4>
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
    5724:	fe 01       	movw	r30, r28
    5726:	ee 55       	subi	r30, 0x5E	; 94
    5728:	fd 4f       	sbci	r31, 0xFD	; 253
    572a:	86 e0       	ldi	r24, 0x06	; 6
    572c:	80 83       	st	Z, r24
    572e:	90 c1       	rjmp	.+800    	; 0x5a50 <main+0x38f4>
					}
					else if (key_pressed == ADMIN_MORE_OPTION && login_mode == ADMIN)//If key pressed is 4 and the logged in user is admin
    5730:	fe 01       	movw	r30, r28
    5732:	eb 55       	subi	r30, 0x5B	; 91
    5734:	fd 4f       	sbci	r31, 0xFD	; 253
    5736:	80 81       	ld	r24, Z
    5738:	84 33       	cpi	r24, 0x34	; 52
    573a:	61 f4       	brne	.+24     	; 0x5754 <main+0x35f8>
    573c:	fe 01       	movw	r30, r28
    573e:	e9 55       	subi	r30, 0x59	; 89
    5740:	fd 4f       	sbci	r31, 0xFD	; 253
    5742:	80 81       	ld	r24, Z
    5744:	81 30       	cpi	r24, 0x01	; 1
    5746:	31 f4       	brne	.+12     	; 0x5754 <main+0x35f8>
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
    5748:	fe 01       	movw	r30, r28
    574a:	ee 55       	subi	r30, 0x5E	; 94
    574c:	fd 4f       	sbci	r31, 0xFD	; 253
    574e:	82 e0       	ldi	r24, 0x02	; 2
    5750:	80 83       	st	Z, r24
    5752:	7e c1       	rjmp	.+764    	; 0x5a50 <main+0x38f4>
					}
					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
    5754:	fe 01       	movw	r30, r28
    5756:	eb 55       	subi	r30, 0x5B	; 91
    5758:	fd 4f       	sbci	r31, 0xFD	; 253
    575a:	80 81       	ld	r24, Z
    575c:	8f 3f       	cpi	r24, 0xFF	; 255
    575e:	09 f4       	brne	.+2      	; 0x5762 <main+0x3606>
    5760:	77 c1       	rjmp	.+750    	; 0x5a50 <main+0x38f4>
					{
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    5762:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						LCD_vSend_string("Wrong input");//print error message
    5766:	82 ed       	ldi	r24, 0xD2	; 210
    5768:	91 e0       	ldi	r25, 0x01	; 1
    576a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
						DIO_write(BUZZER_PORT,BUZZER_PIN,1);
    576e:	84 e4       	ldi	r24, 0x44	; 68
    5770:	66 e0       	ldi	r22, 0x06	; 6
    5772:	41 e0       	ldi	r20, 0x01	; 1
    5774:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    5778:	fe 01       	movw	r30, r28
    577a:	e7 50       	subi	r30, 0x07	; 7
    577c:	ff 4f       	sbci	r31, 0xFF	; 255
    577e:	80 e0       	ldi	r24, 0x00	; 0
    5780:	90 e0       	ldi	r25, 0x00	; 0
    5782:	aa e7       	ldi	r26, 0x7A	; 122
    5784:	b3 e4       	ldi	r27, 0x43	; 67
    5786:	80 83       	st	Z, r24
    5788:	91 83       	std	Z+1, r25	; 0x01
    578a:	a2 83       	std	Z+2, r26	; 0x02
    578c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    578e:	8e 01       	movw	r16, r28
    5790:	0b 50       	subi	r16, 0x0B	; 11
    5792:	1f 4f       	sbci	r17, 0xFF	; 255
    5794:	fe 01       	movw	r30, r28
    5796:	e7 50       	subi	r30, 0x07	; 7
    5798:	ff 4f       	sbci	r31, 0xFF	; 255
    579a:	60 81       	ld	r22, Z
    579c:	71 81       	ldd	r23, Z+1	; 0x01
    579e:	82 81       	ldd	r24, Z+2	; 0x02
    57a0:	93 81       	ldd	r25, Z+3	; 0x03
    57a2:	20 e0       	ldi	r18, 0x00	; 0
    57a4:	30 e0       	ldi	r19, 0x00	; 0
    57a6:	4a ef       	ldi	r20, 0xFA	; 250
    57a8:	54 e4       	ldi	r21, 0x44	; 68
    57aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57ae:	dc 01       	movw	r26, r24
    57b0:	cb 01       	movw	r24, r22
    57b2:	f8 01       	movw	r30, r16
    57b4:	80 83       	st	Z, r24
    57b6:	91 83       	std	Z+1, r25	; 0x01
    57b8:	a2 83       	std	Z+2, r26	; 0x02
    57ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    57bc:	fe 01       	movw	r30, r28
    57be:	eb 50       	subi	r30, 0x0B	; 11
    57c0:	ff 4f       	sbci	r31, 0xFF	; 255
    57c2:	60 81       	ld	r22, Z
    57c4:	71 81       	ldd	r23, Z+1	; 0x01
    57c6:	82 81       	ldd	r24, Z+2	; 0x02
    57c8:	93 81       	ldd	r25, Z+3	; 0x03
    57ca:	20 e0       	ldi	r18, 0x00	; 0
    57cc:	30 e0       	ldi	r19, 0x00	; 0
    57ce:	40 e8       	ldi	r20, 0x80	; 128
    57d0:	5f e3       	ldi	r21, 0x3F	; 63
    57d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57d6:	88 23       	and	r24, r24
    57d8:	44 f4       	brge	.+16     	; 0x57ea <main+0x368e>
		__ticks = 1;
    57da:	fe 01       	movw	r30, r28
    57dc:	ed 50       	subi	r30, 0x0D	; 13
    57de:	ff 4f       	sbci	r31, 0xFF	; 255
    57e0:	81 e0       	ldi	r24, 0x01	; 1
    57e2:	90 e0       	ldi	r25, 0x00	; 0
    57e4:	91 83       	std	Z+1, r25	; 0x01
    57e6:	80 83       	st	Z, r24
    57e8:	64 c0       	rjmp	.+200    	; 0x58b2 <main+0x3756>
	else if (__tmp > 65535)
    57ea:	fe 01       	movw	r30, r28
    57ec:	eb 50       	subi	r30, 0x0B	; 11
    57ee:	ff 4f       	sbci	r31, 0xFF	; 255
    57f0:	60 81       	ld	r22, Z
    57f2:	71 81       	ldd	r23, Z+1	; 0x01
    57f4:	82 81       	ldd	r24, Z+2	; 0x02
    57f6:	93 81       	ldd	r25, Z+3	; 0x03
    57f8:	20 e0       	ldi	r18, 0x00	; 0
    57fa:	3f ef       	ldi	r19, 0xFF	; 255
    57fc:	4f e7       	ldi	r20, 0x7F	; 127
    57fe:	57 e4       	ldi	r21, 0x47	; 71
    5800:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5804:	18 16       	cp	r1, r24
    5806:	0c f0       	brlt	.+2      	; 0x580a <main+0x36ae>
    5808:	43 c0       	rjmp	.+134    	; 0x5890 <main+0x3734>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    580a:	fe 01       	movw	r30, r28
    580c:	e7 50       	subi	r30, 0x07	; 7
    580e:	ff 4f       	sbci	r31, 0xFF	; 255
    5810:	60 81       	ld	r22, Z
    5812:	71 81       	ldd	r23, Z+1	; 0x01
    5814:	82 81       	ldd	r24, Z+2	; 0x02
    5816:	93 81       	ldd	r25, Z+3	; 0x03
    5818:	20 e0       	ldi	r18, 0x00	; 0
    581a:	30 e0       	ldi	r19, 0x00	; 0
    581c:	40 e2       	ldi	r20, 0x20	; 32
    581e:	51 e4       	ldi	r21, 0x41	; 65
    5820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5824:	dc 01       	movw	r26, r24
    5826:	cb 01       	movw	r24, r22
    5828:	8e 01       	movw	r16, r28
    582a:	0d 50       	subi	r16, 0x0D	; 13
    582c:	1f 4f       	sbci	r17, 0xFF	; 255
    582e:	bc 01       	movw	r22, r24
    5830:	cd 01       	movw	r24, r26
    5832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5836:	dc 01       	movw	r26, r24
    5838:	cb 01       	movw	r24, r22
    583a:	f8 01       	movw	r30, r16
    583c:	91 83       	std	Z+1, r25	; 0x01
    583e:	80 83       	st	Z, r24
    5840:	1f c0       	rjmp	.+62     	; 0x5880 <main+0x3724>
    5842:	fe 01       	movw	r30, r28
    5844:	ef 50       	subi	r30, 0x0F	; 15
    5846:	ff 4f       	sbci	r31, 0xFF	; 255
    5848:	88 ec       	ldi	r24, 0xC8	; 200
    584a:	90 e0       	ldi	r25, 0x00	; 0
    584c:	91 83       	std	Z+1, r25	; 0x01
    584e:	80 83       	st	Z, r24
    5850:	fe 01       	movw	r30, r28
    5852:	ef 50       	subi	r30, 0x0F	; 15
    5854:	ff 4f       	sbci	r31, 0xFF	; 255
    5856:	80 81       	ld	r24, Z
    5858:	91 81       	ldd	r25, Z+1	; 0x01
    585a:	01 97       	sbiw	r24, 0x01	; 1
    585c:	f1 f7       	brne	.-4      	; 0x585a <main+0x36fe>
    585e:	fe 01       	movw	r30, r28
    5860:	ef 50       	subi	r30, 0x0F	; 15
    5862:	ff 4f       	sbci	r31, 0xFF	; 255
    5864:	91 83       	std	Z+1, r25	; 0x01
    5866:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5868:	de 01       	movw	r26, r28
    586a:	ad 50       	subi	r26, 0x0D	; 13
    586c:	bf 4f       	sbci	r27, 0xFF	; 255
    586e:	fe 01       	movw	r30, r28
    5870:	ed 50       	subi	r30, 0x0D	; 13
    5872:	ff 4f       	sbci	r31, 0xFF	; 255
    5874:	80 81       	ld	r24, Z
    5876:	91 81       	ldd	r25, Z+1	; 0x01
    5878:	01 97       	sbiw	r24, 0x01	; 1
    587a:	11 96       	adiw	r26, 0x01	; 1
    587c:	9c 93       	st	X, r25
    587e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5880:	fe 01       	movw	r30, r28
    5882:	ed 50       	subi	r30, 0x0D	; 13
    5884:	ff 4f       	sbci	r31, 0xFF	; 255
    5886:	80 81       	ld	r24, Z
    5888:	91 81       	ldd	r25, Z+1	; 0x01
    588a:	00 97       	sbiw	r24, 0x00	; 0
    588c:	d1 f6       	brne	.-76     	; 0x5842 <main+0x36e6>
    588e:	27 c0       	rjmp	.+78     	; 0x58de <main+0x3782>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5890:	8e 01       	movw	r16, r28
    5892:	0d 50       	subi	r16, 0x0D	; 13
    5894:	1f 4f       	sbci	r17, 0xFF	; 255
    5896:	fe 01       	movw	r30, r28
    5898:	eb 50       	subi	r30, 0x0B	; 11
    589a:	ff 4f       	sbci	r31, 0xFF	; 255
    589c:	60 81       	ld	r22, Z
    589e:	71 81       	ldd	r23, Z+1	; 0x01
    58a0:	82 81       	ldd	r24, Z+2	; 0x02
    58a2:	93 81       	ldd	r25, Z+3	; 0x03
    58a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58a8:	dc 01       	movw	r26, r24
    58aa:	cb 01       	movw	r24, r22
    58ac:	f8 01       	movw	r30, r16
    58ae:	91 83       	std	Z+1, r25	; 0x01
    58b0:	80 83       	st	Z, r24
    58b2:	de 01       	movw	r26, r28
    58b4:	a1 51       	subi	r26, 0x11	; 17
    58b6:	bf 4f       	sbci	r27, 0xFF	; 255
    58b8:	fe 01       	movw	r30, r28
    58ba:	ed 50       	subi	r30, 0x0D	; 13
    58bc:	ff 4f       	sbci	r31, 0xFF	; 255
    58be:	80 81       	ld	r24, Z
    58c0:	91 81       	ldd	r25, Z+1	; 0x01
    58c2:	8d 93       	st	X+, r24
    58c4:	9c 93       	st	X, r25
    58c6:	fe 01       	movw	r30, r28
    58c8:	e1 51       	subi	r30, 0x11	; 17
    58ca:	ff 4f       	sbci	r31, 0xFF	; 255
    58cc:	80 81       	ld	r24, Z
    58ce:	91 81       	ldd	r25, Z+1	; 0x01
    58d0:	01 97       	sbiw	r24, 0x01	; 1
    58d2:	f1 f7       	brne	.-4      	; 0x58d0 <main+0x3774>
    58d4:	fe 01       	movw	r30, r28
    58d6:	e1 51       	subi	r30, 0x11	; 17
    58d8:	ff 4f       	sbci	r31, 0xFF	; 255
    58da:	91 83       	std	Z+1, r25	; 0x01
    58dc:	80 83       	st	Z, r24
						_delay_ms(250);
						DIO_write(BUZZER_PORT,BUZZER_PIN,0);
    58de:	84 e4       	ldi	r24, 0x44	; 68
    58e0:	66 e0       	ldi	r22, 0x06	; 6
    58e2:	40 e0       	ldi	r20, 0x00	; 0
    58e4:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    58e8:	fe 01       	movw	r30, r28
    58ea:	e5 51       	subi	r30, 0x15	; 21
    58ec:	ff 4f       	sbci	r31, 0xFF	; 255
    58ee:	80 e0       	ldi	r24, 0x00	; 0
    58f0:	90 e0       	ldi	r25, 0x00	; 0
    58f2:	aa e7       	ldi	r26, 0x7A	; 122
    58f4:	b3 e4       	ldi	r27, 0x43	; 67
    58f6:	80 83       	st	Z, r24
    58f8:	91 83       	std	Z+1, r25	; 0x01
    58fa:	a2 83       	std	Z+2, r26	; 0x02
    58fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58fe:	8e 01       	movw	r16, r28
    5900:	09 51       	subi	r16, 0x19	; 25
    5902:	1f 4f       	sbci	r17, 0xFF	; 255
    5904:	fe 01       	movw	r30, r28
    5906:	e5 51       	subi	r30, 0x15	; 21
    5908:	ff 4f       	sbci	r31, 0xFF	; 255
    590a:	60 81       	ld	r22, Z
    590c:	71 81       	ldd	r23, Z+1	; 0x01
    590e:	82 81       	ldd	r24, Z+2	; 0x02
    5910:	93 81       	ldd	r25, Z+3	; 0x03
    5912:	20 e0       	ldi	r18, 0x00	; 0
    5914:	30 e0       	ldi	r19, 0x00	; 0
    5916:	4a ef       	ldi	r20, 0xFA	; 250
    5918:	54 e4       	ldi	r21, 0x44	; 68
    591a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    591e:	dc 01       	movw	r26, r24
    5920:	cb 01       	movw	r24, r22
    5922:	f8 01       	movw	r30, r16
    5924:	80 83       	st	Z, r24
    5926:	91 83       	std	Z+1, r25	; 0x01
    5928:	a2 83       	std	Z+2, r26	; 0x02
    592a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    592c:	fe 01       	movw	r30, r28
    592e:	e9 51       	subi	r30, 0x19	; 25
    5930:	ff 4f       	sbci	r31, 0xFF	; 255
    5932:	60 81       	ld	r22, Z
    5934:	71 81       	ldd	r23, Z+1	; 0x01
    5936:	82 81       	ldd	r24, Z+2	; 0x02
    5938:	93 81       	ldd	r25, Z+3	; 0x03
    593a:	20 e0       	ldi	r18, 0x00	; 0
    593c:	30 e0       	ldi	r19, 0x00	; 0
    593e:	40 e8       	ldi	r20, 0x80	; 128
    5940:	5f e3       	ldi	r21, 0x3F	; 63
    5942:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5946:	88 23       	and	r24, r24
    5948:	44 f4       	brge	.+16     	; 0x595a <main+0x37fe>
		__ticks = 1;
    594a:	fe 01       	movw	r30, r28
    594c:	eb 51       	subi	r30, 0x1B	; 27
    594e:	ff 4f       	sbci	r31, 0xFF	; 255
    5950:	81 e0       	ldi	r24, 0x01	; 1
    5952:	90 e0       	ldi	r25, 0x00	; 0
    5954:	91 83       	std	Z+1, r25	; 0x01
    5956:	80 83       	st	Z, r24
    5958:	64 c0       	rjmp	.+200    	; 0x5a22 <main+0x38c6>
	else if (__tmp > 65535)
    595a:	fe 01       	movw	r30, r28
    595c:	e9 51       	subi	r30, 0x19	; 25
    595e:	ff 4f       	sbci	r31, 0xFF	; 255
    5960:	60 81       	ld	r22, Z
    5962:	71 81       	ldd	r23, Z+1	; 0x01
    5964:	82 81       	ldd	r24, Z+2	; 0x02
    5966:	93 81       	ldd	r25, Z+3	; 0x03
    5968:	20 e0       	ldi	r18, 0x00	; 0
    596a:	3f ef       	ldi	r19, 0xFF	; 255
    596c:	4f e7       	ldi	r20, 0x7F	; 127
    596e:	57 e4       	ldi	r21, 0x47	; 71
    5970:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5974:	18 16       	cp	r1, r24
    5976:	0c f0       	brlt	.+2      	; 0x597a <main+0x381e>
    5978:	43 c0       	rjmp	.+134    	; 0x5a00 <main+0x38a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    597a:	fe 01       	movw	r30, r28
    597c:	e5 51       	subi	r30, 0x15	; 21
    597e:	ff 4f       	sbci	r31, 0xFF	; 255
    5980:	60 81       	ld	r22, Z
    5982:	71 81       	ldd	r23, Z+1	; 0x01
    5984:	82 81       	ldd	r24, Z+2	; 0x02
    5986:	93 81       	ldd	r25, Z+3	; 0x03
    5988:	20 e0       	ldi	r18, 0x00	; 0
    598a:	30 e0       	ldi	r19, 0x00	; 0
    598c:	40 e2       	ldi	r20, 0x20	; 32
    598e:	51 e4       	ldi	r21, 0x41	; 65
    5990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5994:	dc 01       	movw	r26, r24
    5996:	cb 01       	movw	r24, r22
    5998:	8e 01       	movw	r16, r28
    599a:	0b 51       	subi	r16, 0x1B	; 27
    599c:	1f 4f       	sbci	r17, 0xFF	; 255
    599e:	bc 01       	movw	r22, r24
    59a0:	cd 01       	movw	r24, r26
    59a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59a6:	dc 01       	movw	r26, r24
    59a8:	cb 01       	movw	r24, r22
    59aa:	f8 01       	movw	r30, r16
    59ac:	91 83       	std	Z+1, r25	; 0x01
    59ae:	80 83       	st	Z, r24
    59b0:	1f c0       	rjmp	.+62     	; 0x59f0 <main+0x3894>
    59b2:	fe 01       	movw	r30, r28
    59b4:	ed 51       	subi	r30, 0x1D	; 29
    59b6:	ff 4f       	sbci	r31, 0xFF	; 255
    59b8:	88 ec       	ldi	r24, 0xC8	; 200
    59ba:	90 e0       	ldi	r25, 0x00	; 0
    59bc:	91 83       	std	Z+1, r25	; 0x01
    59be:	80 83       	st	Z, r24
    59c0:	fe 01       	movw	r30, r28
    59c2:	ed 51       	subi	r30, 0x1D	; 29
    59c4:	ff 4f       	sbci	r31, 0xFF	; 255
    59c6:	80 81       	ld	r24, Z
    59c8:	91 81       	ldd	r25, Z+1	; 0x01
    59ca:	01 97       	sbiw	r24, 0x01	; 1
    59cc:	f1 f7       	brne	.-4      	; 0x59ca <main+0x386e>
    59ce:	fe 01       	movw	r30, r28
    59d0:	ed 51       	subi	r30, 0x1D	; 29
    59d2:	ff 4f       	sbci	r31, 0xFF	; 255
    59d4:	91 83       	std	Z+1, r25	; 0x01
    59d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59d8:	de 01       	movw	r26, r28
    59da:	ab 51       	subi	r26, 0x1B	; 27
    59dc:	bf 4f       	sbci	r27, 0xFF	; 255
    59de:	fe 01       	movw	r30, r28
    59e0:	eb 51       	subi	r30, 0x1B	; 27
    59e2:	ff 4f       	sbci	r31, 0xFF	; 255
    59e4:	80 81       	ld	r24, Z
    59e6:	91 81       	ldd	r25, Z+1	; 0x01
    59e8:	01 97       	sbiw	r24, 0x01	; 1
    59ea:	11 96       	adiw	r26, 0x01	; 1
    59ec:	9c 93       	st	X, r25
    59ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59f0:	fe 01       	movw	r30, r28
    59f2:	eb 51       	subi	r30, 0x1B	; 27
    59f4:	ff 4f       	sbci	r31, 0xFF	; 255
    59f6:	80 81       	ld	r24, Z
    59f8:	91 81       	ldd	r25, Z+1	; 0x01
    59fa:	00 97       	sbiw	r24, 0x00	; 0
    59fc:	d1 f6       	brne	.-76     	; 0x59b2 <main+0x3856>
    59fe:	28 c0       	rjmp	.+80     	; 0x5a50 <main+0x38f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a00:	8e 01       	movw	r16, r28
    5a02:	0b 51       	subi	r16, 0x1B	; 27
    5a04:	1f 4f       	sbci	r17, 0xFF	; 255
    5a06:	fe 01       	movw	r30, r28
    5a08:	e9 51       	subi	r30, 0x19	; 25
    5a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a0c:	60 81       	ld	r22, Z
    5a0e:	71 81       	ldd	r23, Z+1	; 0x01
    5a10:	82 81       	ldd	r24, Z+2	; 0x02
    5a12:	93 81       	ldd	r25, Z+3	; 0x03
    5a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a18:	dc 01       	movw	r26, r24
    5a1a:	cb 01       	movw	r24, r22
    5a1c:	f8 01       	movw	r30, r16
    5a1e:	91 83       	std	Z+1, r25	; 0x01
    5a20:	80 83       	st	Z, r24
    5a22:	de 01       	movw	r26, r28
    5a24:	af 51       	subi	r26, 0x1F	; 31
    5a26:	bf 4f       	sbci	r27, 0xFF	; 255
    5a28:	fe 01       	movw	r30, r28
    5a2a:	eb 51       	subi	r30, 0x1B	; 27
    5a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a2e:	80 81       	ld	r24, Z
    5a30:	91 81       	ldd	r25, Z+1	; 0x01
    5a32:	11 96       	adiw	r26, 0x01	; 1
    5a34:	9c 93       	st	X, r25
    5a36:	8e 93       	st	-X, r24
    5a38:	fe 01       	movw	r30, r28
    5a3a:	ef 51       	subi	r30, 0x1F	; 31
    5a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a3e:	80 81       	ld	r24, Z
    5a40:	91 81       	ldd	r25, Z+1	; 0x01
    5a42:	01 97       	sbiw	r24, 0x01	; 1
    5a44:	f1 f7       	brne	.-4      	; 0x5a42 <main+0x38e6>
    5a46:	fe 01       	movw	r30, r28
    5a48:	ef 51       	subi	r30, 0x1F	; 31
    5a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a4c:	91 83       	std	Z+1, r25	; 0x01
    5a4e:	80 83       	st	Z, r24
						_delay_ms(250);//Halt the system for the given time in (ms)
					}
				} while ( ((key_pressed < '1') || (key_pressed > '4') ) && (timeout_flag == FALSE) );//break the loop in case of valid key or time is out
    5a50:	fe 01       	movw	r30, r28
    5a52:	eb 55       	subi	r30, 0x5B	; 91
    5a54:	fd 4f       	sbci	r31, 0xFD	; 253
    5a56:	80 81       	ld	r24, Z
    5a58:	81 33       	cpi	r24, 0x31	; 49
    5a5a:	40 f0       	brcs	.+16     	; 0x5a6c <main+0x3910>
    5a5c:	fe 01       	movw	r30, r28
    5a5e:	eb 55       	subi	r30, 0x5B	; 91
    5a60:	fd 4f       	sbci	r31, 0xFD	; 253
    5a62:	80 81       	ld	r24, Z
    5a64:	85 33       	cpi	r24, 0x35	; 53
    5a66:	10 f4       	brcc	.+4      	; 0x5a6c <main+0x3910>
    5a68:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <main+0x514e>
    5a6c:	80 91 ba 02 	lds	r24, 0x02BA
    5a70:	88 23       	and	r24, r24
    5a72:	09 f4       	brne	.+2      	; 0x5a76 <main+0x391a>
    5a74:	4a cd       	rjmp	.-1388   	; 0x550a <main+0x33ae>
    5a76:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <main+0x514e>

			case MORE_MENU:
				do
				{
					/******************** print more Menu ******************/
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    5a7a:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
					LCD_vSend_string("1:Room4    2:TV   ");
    5a7e:	8e ed       	ldi	r24, 0xDE	; 222
    5a80:	91 e0       	ldi	r25, 0x01	; 1
    5a82:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
					LCD_movecursor(2,1);
    5a86:	82 e0       	ldi	r24, 0x02	; 2
    5a88:	61 e0       	ldi	r22, 0x01	; 1
    5a8a:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
					LCD_vSend_string("3:Air Cond.4:RET");
    5a8e:	81 ef       	ldi	r24, 0xF1	; 241
    5a90:	91 e0       	ldi	r25, 0x01	; 1
    5a92:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
					/*******************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
    5a96:	fe 01       	movw	r30, r28
    5a98:	e9 55       	subi	r30, 0x59	; 89
    5a9a:	fd 4f       	sbci	r31, 0xFD	; 253
    5a9c:	80 81       	ld	r24, Z
    5a9e:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <u8GetKeyPressed>
    5aa2:	fe 01       	movw	r30, r28
    5aa4:	eb 55       	subi	r30, 0x5B	; 91
    5aa6:	fd 4f       	sbci	r31, 0xFD	; 253
    5aa8:	80 83       	st	Z, r24
    5aaa:	fe 01       	movw	r30, r28
    5aac:	e3 52       	subi	r30, 0x23	; 35
    5aae:	ff 4f       	sbci	r31, 0xFF	; 255
    5ab0:	80 e0       	ldi	r24, 0x00	; 0
    5ab2:	90 e0       	ldi	r25, 0x00	; 0
    5ab4:	a8 ec       	ldi	r26, 0xC8	; 200
    5ab6:	b2 e4       	ldi	r27, 0x42	; 66
    5ab8:	80 83       	st	Z, r24
    5aba:	91 83       	std	Z+1, r25	; 0x01
    5abc:	a2 83       	std	Z+2, r26	; 0x02
    5abe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ac0:	8e 01       	movw	r16, r28
    5ac2:	07 52       	subi	r16, 0x27	; 39
    5ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    5ac6:	fe 01       	movw	r30, r28
    5ac8:	e3 52       	subi	r30, 0x23	; 35
    5aca:	ff 4f       	sbci	r31, 0xFF	; 255
    5acc:	60 81       	ld	r22, Z
    5ace:	71 81       	ldd	r23, Z+1	; 0x01
    5ad0:	82 81       	ldd	r24, Z+2	; 0x02
    5ad2:	93 81       	ldd	r25, Z+3	; 0x03
    5ad4:	20 e0       	ldi	r18, 0x00	; 0
    5ad6:	30 e0       	ldi	r19, 0x00	; 0
    5ad8:	4a ef       	ldi	r20, 0xFA	; 250
    5ada:	54 e4       	ldi	r21, 0x44	; 68
    5adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ae0:	dc 01       	movw	r26, r24
    5ae2:	cb 01       	movw	r24, r22
    5ae4:	f8 01       	movw	r30, r16
    5ae6:	80 83       	st	Z, r24
    5ae8:	91 83       	std	Z+1, r25	; 0x01
    5aea:	a2 83       	std	Z+2, r26	; 0x02
    5aec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5aee:	fe 01       	movw	r30, r28
    5af0:	e7 52       	subi	r30, 0x27	; 39
    5af2:	ff 4f       	sbci	r31, 0xFF	; 255
    5af4:	60 81       	ld	r22, Z
    5af6:	71 81       	ldd	r23, Z+1	; 0x01
    5af8:	82 81       	ldd	r24, Z+2	; 0x02
    5afa:	93 81       	ldd	r25, Z+3	; 0x03
    5afc:	20 e0       	ldi	r18, 0x00	; 0
    5afe:	30 e0       	ldi	r19, 0x00	; 0
    5b00:	40 e8       	ldi	r20, 0x80	; 128
    5b02:	5f e3       	ldi	r21, 0x3F	; 63
    5b04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b08:	88 23       	and	r24, r24
    5b0a:	44 f4       	brge	.+16     	; 0x5b1c <main+0x39c0>
		__ticks = 1;
    5b0c:	fe 01       	movw	r30, r28
    5b0e:	e9 52       	subi	r30, 0x29	; 41
    5b10:	ff 4f       	sbci	r31, 0xFF	; 255
    5b12:	81 e0       	ldi	r24, 0x01	; 1
    5b14:	90 e0       	ldi	r25, 0x00	; 0
    5b16:	91 83       	std	Z+1, r25	; 0x01
    5b18:	80 83       	st	Z, r24
    5b1a:	64 c0       	rjmp	.+200    	; 0x5be4 <main+0x3a88>
	else if (__tmp > 65535)
    5b1c:	fe 01       	movw	r30, r28
    5b1e:	e7 52       	subi	r30, 0x27	; 39
    5b20:	ff 4f       	sbci	r31, 0xFF	; 255
    5b22:	60 81       	ld	r22, Z
    5b24:	71 81       	ldd	r23, Z+1	; 0x01
    5b26:	82 81       	ldd	r24, Z+2	; 0x02
    5b28:	93 81       	ldd	r25, Z+3	; 0x03
    5b2a:	20 e0       	ldi	r18, 0x00	; 0
    5b2c:	3f ef       	ldi	r19, 0xFF	; 255
    5b2e:	4f e7       	ldi	r20, 0x7F	; 127
    5b30:	57 e4       	ldi	r21, 0x47	; 71
    5b32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b36:	18 16       	cp	r1, r24
    5b38:	0c f0       	brlt	.+2      	; 0x5b3c <main+0x39e0>
    5b3a:	43 c0       	rjmp	.+134    	; 0x5bc2 <main+0x3a66>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b3c:	fe 01       	movw	r30, r28
    5b3e:	e3 52       	subi	r30, 0x23	; 35
    5b40:	ff 4f       	sbci	r31, 0xFF	; 255
    5b42:	60 81       	ld	r22, Z
    5b44:	71 81       	ldd	r23, Z+1	; 0x01
    5b46:	82 81       	ldd	r24, Z+2	; 0x02
    5b48:	93 81       	ldd	r25, Z+3	; 0x03
    5b4a:	20 e0       	ldi	r18, 0x00	; 0
    5b4c:	30 e0       	ldi	r19, 0x00	; 0
    5b4e:	40 e2       	ldi	r20, 0x20	; 32
    5b50:	51 e4       	ldi	r21, 0x41	; 65
    5b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b56:	dc 01       	movw	r26, r24
    5b58:	cb 01       	movw	r24, r22
    5b5a:	8e 01       	movw	r16, r28
    5b5c:	09 52       	subi	r16, 0x29	; 41
    5b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    5b60:	bc 01       	movw	r22, r24
    5b62:	cd 01       	movw	r24, r26
    5b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b68:	dc 01       	movw	r26, r24
    5b6a:	cb 01       	movw	r24, r22
    5b6c:	f8 01       	movw	r30, r16
    5b6e:	91 83       	std	Z+1, r25	; 0x01
    5b70:	80 83       	st	Z, r24
    5b72:	1f c0       	rjmp	.+62     	; 0x5bb2 <main+0x3a56>
    5b74:	fe 01       	movw	r30, r28
    5b76:	eb 52       	subi	r30, 0x2B	; 43
    5b78:	ff 4f       	sbci	r31, 0xFF	; 255
    5b7a:	88 ec       	ldi	r24, 0xC8	; 200
    5b7c:	90 e0       	ldi	r25, 0x00	; 0
    5b7e:	91 83       	std	Z+1, r25	; 0x01
    5b80:	80 83       	st	Z, r24
    5b82:	fe 01       	movw	r30, r28
    5b84:	eb 52       	subi	r30, 0x2B	; 43
    5b86:	ff 4f       	sbci	r31, 0xFF	; 255
    5b88:	80 81       	ld	r24, Z
    5b8a:	91 81       	ldd	r25, Z+1	; 0x01
    5b8c:	01 97       	sbiw	r24, 0x01	; 1
    5b8e:	f1 f7       	brne	.-4      	; 0x5b8c <main+0x3a30>
    5b90:	fe 01       	movw	r30, r28
    5b92:	eb 52       	subi	r30, 0x2B	; 43
    5b94:	ff 4f       	sbci	r31, 0xFF	; 255
    5b96:	91 83       	std	Z+1, r25	; 0x01
    5b98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b9a:	de 01       	movw	r26, r28
    5b9c:	a9 52       	subi	r26, 0x29	; 41
    5b9e:	bf 4f       	sbci	r27, 0xFF	; 255
    5ba0:	fe 01       	movw	r30, r28
    5ba2:	e9 52       	subi	r30, 0x29	; 41
    5ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ba6:	80 81       	ld	r24, Z
    5ba8:	91 81       	ldd	r25, Z+1	; 0x01
    5baa:	01 97       	sbiw	r24, 0x01	; 1
    5bac:	11 96       	adiw	r26, 0x01	; 1
    5bae:	9c 93       	st	X, r25
    5bb0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bb2:	fe 01       	movw	r30, r28
    5bb4:	e9 52       	subi	r30, 0x29	; 41
    5bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    5bb8:	80 81       	ld	r24, Z
    5bba:	91 81       	ldd	r25, Z+1	; 0x01
    5bbc:	00 97       	sbiw	r24, 0x00	; 0
    5bbe:	d1 f6       	brne	.-76     	; 0x5b74 <main+0x3a18>
    5bc0:	28 c0       	rjmp	.+80     	; 0x5c12 <main+0x3ab6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bc2:	8e 01       	movw	r16, r28
    5bc4:	09 52       	subi	r16, 0x29	; 41
    5bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    5bc8:	fe 01       	movw	r30, r28
    5bca:	e7 52       	subi	r30, 0x27	; 39
    5bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    5bce:	60 81       	ld	r22, Z
    5bd0:	71 81       	ldd	r23, Z+1	; 0x01
    5bd2:	82 81       	ldd	r24, Z+2	; 0x02
    5bd4:	93 81       	ldd	r25, Z+3	; 0x03
    5bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bda:	dc 01       	movw	r26, r24
    5bdc:	cb 01       	movw	r24, r22
    5bde:	f8 01       	movw	r30, r16
    5be0:	91 83       	std	Z+1, r25	; 0x01
    5be2:	80 83       	st	Z, r24
    5be4:	de 01       	movw	r26, r28
    5be6:	ad 52       	subi	r26, 0x2D	; 45
    5be8:	bf 4f       	sbci	r27, 0xFF	; 255
    5bea:	fe 01       	movw	r30, r28
    5bec:	e9 52       	subi	r30, 0x29	; 41
    5bee:	ff 4f       	sbci	r31, 0xFF	; 255
    5bf0:	80 81       	ld	r24, Z
    5bf2:	91 81       	ldd	r25, Z+1	; 0x01
    5bf4:	11 96       	adiw	r26, 0x01	; 1
    5bf6:	9c 93       	st	X, r25
    5bf8:	8e 93       	st	-X, r24
    5bfa:	fe 01       	movw	r30, r28
    5bfc:	ed 52       	subi	r30, 0x2D	; 45
    5bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    5c00:	80 81       	ld	r24, Z
    5c02:	91 81       	ldd	r25, Z+1	; 0x01
    5c04:	01 97       	sbiw	r24, 0x01	; 1
    5c06:	f1 f7       	brne	.-4      	; 0x5c04 <main+0x3aa8>
    5c08:	fe 01       	movw	r30, r28
    5c0a:	ed 52       	subi	r30, 0x2D	; 45
    5c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c0e:	91 83       	std	Z+1, r25	; 0x01
    5c10:	80 83       	st	Z, r24
					_delay_ms(100);//to avoid the duplication of the pressed key

					if (key_pressed == SELECT_ROOM4_ADMIN)//If key pressed is 1
    5c12:	fe 01       	movw	r30, r28
    5c14:	eb 55       	subi	r30, 0x5B	; 91
    5c16:	fd 4f       	sbci	r31, 0xFD	; 253
    5c18:	80 81       	ld	r24, Z
    5c1a:	81 33       	cpi	r24, 0x31	; 49
    5c1c:	31 f4       	brne	.+12     	; 0x5c2a <main+0x3ace>
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
    5c1e:	fe 01       	movw	r30, r28
    5c20:	ee 55       	subi	r30, 0x5E	; 94
    5c22:	fd 4f       	sbci	r31, 0xFD	; 253
    5c24:	86 e0       	ldi	r24, 0x06	; 6
    5c26:	80 83       	st	Z, r24
    5c28:	a2 c1       	rjmp	.+836    	; 0x5f6e <main+0x3e12>
					}
					else if (key_pressed == SELECT_TV)//If key pressed is 2
    5c2a:	fe 01       	movw	r30, r28
    5c2c:	eb 55       	subi	r30, 0x5B	; 91
    5c2e:	fd 4f       	sbci	r31, 0xFD	; 253
    5c30:	80 81       	ld	r24, Z
    5c32:	82 33       	cpi	r24, 0x32	; 50
    5c34:	31 f4       	brne	.+12     	; 0x5c42 <main+0x3ae6>
					{
						show_menu = TV_MENU;//Set the next menu to be shown to TV menu
    5c36:	fe 01       	movw	r30, r28
    5c38:	ee 55       	subi	r30, 0x5E	; 94
    5c3a:	fd 4f       	sbci	r31, 0xFD	; 253
    5c3c:	87 e0       	ldi	r24, 0x07	; 7
    5c3e:	80 83       	st	Z, r24
    5c40:	96 c1       	rjmp	.+812    	; 0x5f6e <main+0x3e12>
					}
					else if (key_pressed == SELECT_AIR_CONDITIONING)//If key pressed is 3
    5c42:	fe 01       	movw	r30, r28
    5c44:	eb 55       	subi	r30, 0x5B	; 91
    5c46:	fd 4f       	sbci	r31, 0xFD	; 253
    5c48:	80 81       	ld	r24, Z
    5c4a:	83 33       	cpi	r24, 0x33	; 51
    5c4c:	31 f4       	brne	.+12     	; 0x5c5a <main+0x3afe>
					{ 
						show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to Air conditioning menu
    5c4e:	fe 01       	movw	r30, r28
    5c50:	ee 55       	subi	r30, 0x5E	; 94
    5c52:	fd 4f       	sbci	r31, 0xFD	; 253
    5c54:	88 e0       	ldi	r24, 0x08	; 8
    5c56:	80 83       	st	Z, r24
    5c58:	8a c1       	rjmp	.+788    	; 0x5f6e <main+0x3e12>
					}
					else if (key_pressed == ADMIN_RET_OPTION)//If key pressed is 4 (RET)
    5c5a:	fe 01       	movw	r30, r28
    5c5c:	eb 55       	subi	r30, 0x5B	; 91
    5c5e:	fd 4f       	sbci	r31, 0xFD	; 253
    5c60:	80 81       	ld	r24, Z
    5c62:	84 33       	cpi	r24, 0x34	; 52
    5c64:	31 f4       	brne	.+12     	; 0x5c72 <main+0x3b16>
					{
						show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
    5c66:	fe 01       	movw	r30, r28
    5c68:	ee 55       	subi	r30, 0x5E	; 94
    5c6a:	fd 4f       	sbci	r31, 0xFD	; 253
    5c6c:	81 e0       	ldi	r24, 0x01	; 1
    5c6e:	80 83       	st	Z, r24
    5c70:	7e c1       	rjmp	.+764    	; 0x5f6e <main+0x3e12>
					}
					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
    5c72:	fe 01       	movw	r30, r28
    5c74:	eb 55       	subi	r30, 0x5B	; 91
    5c76:	fd 4f       	sbci	r31, 0xFD	; 253
    5c78:	80 81       	ld	r24, Z
    5c7a:	8f 3f       	cpi	r24, 0xFF	; 255
    5c7c:	09 f4       	brne	.+2      	; 0x5c80 <main+0x3b24>
    5c7e:	77 c1       	rjmp	.+750    	; 0x5f6e <main+0x3e12>
					{
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    5c80:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						LCD_vSend_string("Wrong input");//print error message
    5c84:	82 ed       	ldi	r24, 0xD2	; 210
    5c86:	91 e0       	ldi	r25, 0x01	; 1
    5c88:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
						DIO_write(BUZZER_PORT,BUZZER_PIN,1);
    5c8c:	84 e4       	ldi	r24, 0x44	; 68
    5c8e:	66 e0       	ldi	r22, 0x06	; 6
    5c90:	41 e0       	ldi	r20, 0x01	; 1
    5c92:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    5c96:	fe 01       	movw	r30, r28
    5c98:	e1 53       	subi	r30, 0x31	; 49
    5c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c9c:	80 e0       	ldi	r24, 0x00	; 0
    5c9e:	90 e0       	ldi	r25, 0x00	; 0
    5ca0:	aa e7       	ldi	r26, 0x7A	; 122
    5ca2:	b3 e4       	ldi	r27, 0x43	; 67
    5ca4:	80 83       	st	Z, r24
    5ca6:	91 83       	std	Z+1, r25	; 0x01
    5ca8:	a2 83       	std	Z+2, r26	; 0x02
    5caa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cac:	8e 01       	movw	r16, r28
    5cae:	05 53       	subi	r16, 0x35	; 53
    5cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    5cb2:	fe 01       	movw	r30, r28
    5cb4:	e1 53       	subi	r30, 0x31	; 49
    5cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    5cb8:	60 81       	ld	r22, Z
    5cba:	71 81       	ldd	r23, Z+1	; 0x01
    5cbc:	82 81       	ldd	r24, Z+2	; 0x02
    5cbe:	93 81       	ldd	r25, Z+3	; 0x03
    5cc0:	20 e0       	ldi	r18, 0x00	; 0
    5cc2:	30 e0       	ldi	r19, 0x00	; 0
    5cc4:	4a ef       	ldi	r20, 0xFA	; 250
    5cc6:	54 e4       	ldi	r21, 0x44	; 68
    5cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ccc:	dc 01       	movw	r26, r24
    5cce:	cb 01       	movw	r24, r22
    5cd0:	f8 01       	movw	r30, r16
    5cd2:	80 83       	st	Z, r24
    5cd4:	91 83       	std	Z+1, r25	; 0x01
    5cd6:	a2 83       	std	Z+2, r26	; 0x02
    5cd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5cda:	fe 01       	movw	r30, r28
    5cdc:	e5 53       	subi	r30, 0x35	; 53
    5cde:	ff 4f       	sbci	r31, 0xFF	; 255
    5ce0:	60 81       	ld	r22, Z
    5ce2:	71 81       	ldd	r23, Z+1	; 0x01
    5ce4:	82 81       	ldd	r24, Z+2	; 0x02
    5ce6:	93 81       	ldd	r25, Z+3	; 0x03
    5ce8:	20 e0       	ldi	r18, 0x00	; 0
    5cea:	30 e0       	ldi	r19, 0x00	; 0
    5cec:	40 e8       	ldi	r20, 0x80	; 128
    5cee:	5f e3       	ldi	r21, 0x3F	; 63
    5cf0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5cf4:	88 23       	and	r24, r24
    5cf6:	44 f4       	brge	.+16     	; 0x5d08 <main+0x3bac>
		__ticks = 1;
    5cf8:	fe 01       	movw	r30, r28
    5cfa:	e7 53       	subi	r30, 0x37	; 55
    5cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    5cfe:	81 e0       	ldi	r24, 0x01	; 1
    5d00:	90 e0       	ldi	r25, 0x00	; 0
    5d02:	91 83       	std	Z+1, r25	; 0x01
    5d04:	80 83       	st	Z, r24
    5d06:	64 c0       	rjmp	.+200    	; 0x5dd0 <main+0x3c74>
	else if (__tmp > 65535)
    5d08:	fe 01       	movw	r30, r28
    5d0a:	e5 53       	subi	r30, 0x35	; 53
    5d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d0e:	60 81       	ld	r22, Z
    5d10:	71 81       	ldd	r23, Z+1	; 0x01
    5d12:	82 81       	ldd	r24, Z+2	; 0x02
    5d14:	93 81       	ldd	r25, Z+3	; 0x03
    5d16:	20 e0       	ldi	r18, 0x00	; 0
    5d18:	3f ef       	ldi	r19, 0xFF	; 255
    5d1a:	4f e7       	ldi	r20, 0x7F	; 127
    5d1c:	57 e4       	ldi	r21, 0x47	; 71
    5d1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5d22:	18 16       	cp	r1, r24
    5d24:	0c f0       	brlt	.+2      	; 0x5d28 <main+0x3bcc>
    5d26:	43 c0       	rjmp	.+134    	; 0x5dae <main+0x3c52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d28:	fe 01       	movw	r30, r28
    5d2a:	e1 53       	subi	r30, 0x31	; 49
    5d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d2e:	60 81       	ld	r22, Z
    5d30:	71 81       	ldd	r23, Z+1	; 0x01
    5d32:	82 81       	ldd	r24, Z+2	; 0x02
    5d34:	93 81       	ldd	r25, Z+3	; 0x03
    5d36:	20 e0       	ldi	r18, 0x00	; 0
    5d38:	30 e0       	ldi	r19, 0x00	; 0
    5d3a:	40 e2       	ldi	r20, 0x20	; 32
    5d3c:	51 e4       	ldi	r21, 0x41	; 65
    5d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d42:	dc 01       	movw	r26, r24
    5d44:	cb 01       	movw	r24, r22
    5d46:	8e 01       	movw	r16, r28
    5d48:	07 53       	subi	r16, 0x37	; 55
    5d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    5d4c:	bc 01       	movw	r22, r24
    5d4e:	cd 01       	movw	r24, r26
    5d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d54:	dc 01       	movw	r26, r24
    5d56:	cb 01       	movw	r24, r22
    5d58:	f8 01       	movw	r30, r16
    5d5a:	91 83       	std	Z+1, r25	; 0x01
    5d5c:	80 83       	st	Z, r24
    5d5e:	1f c0       	rjmp	.+62     	; 0x5d9e <main+0x3c42>
    5d60:	fe 01       	movw	r30, r28
    5d62:	e9 53       	subi	r30, 0x39	; 57
    5d64:	ff 4f       	sbci	r31, 0xFF	; 255
    5d66:	88 ec       	ldi	r24, 0xC8	; 200
    5d68:	90 e0       	ldi	r25, 0x00	; 0
    5d6a:	91 83       	std	Z+1, r25	; 0x01
    5d6c:	80 83       	st	Z, r24
    5d6e:	fe 01       	movw	r30, r28
    5d70:	e9 53       	subi	r30, 0x39	; 57
    5d72:	ff 4f       	sbci	r31, 0xFF	; 255
    5d74:	80 81       	ld	r24, Z
    5d76:	91 81       	ldd	r25, Z+1	; 0x01
    5d78:	01 97       	sbiw	r24, 0x01	; 1
    5d7a:	f1 f7       	brne	.-4      	; 0x5d78 <main+0x3c1c>
    5d7c:	fe 01       	movw	r30, r28
    5d7e:	e9 53       	subi	r30, 0x39	; 57
    5d80:	ff 4f       	sbci	r31, 0xFF	; 255
    5d82:	91 83       	std	Z+1, r25	; 0x01
    5d84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d86:	de 01       	movw	r26, r28
    5d88:	a7 53       	subi	r26, 0x37	; 55
    5d8a:	bf 4f       	sbci	r27, 0xFF	; 255
    5d8c:	fe 01       	movw	r30, r28
    5d8e:	e7 53       	subi	r30, 0x37	; 55
    5d90:	ff 4f       	sbci	r31, 0xFF	; 255
    5d92:	80 81       	ld	r24, Z
    5d94:	91 81       	ldd	r25, Z+1	; 0x01
    5d96:	01 97       	sbiw	r24, 0x01	; 1
    5d98:	11 96       	adiw	r26, 0x01	; 1
    5d9a:	9c 93       	st	X, r25
    5d9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d9e:	fe 01       	movw	r30, r28
    5da0:	e7 53       	subi	r30, 0x37	; 55
    5da2:	ff 4f       	sbci	r31, 0xFF	; 255
    5da4:	80 81       	ld	r24, Z
    5da6:	91 81       	ldd	r25, Z+1	; 0x01
    5da8:	00 97       	sbiw	r24, 0x00	; 0
    5daa:	d1 f6       	brne	.-76     	; 0x5d60 <main+0x3c04>
    5dac:	27 c0       	rjmp	.+78     	; 0x5dfc <main+0x3ca0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5dae:	8e 01       	movw	r16, r28
    5db0:	07 53       	subi	r16, 0x37	; 55
    5db2:	1f 4f       	sbci	r17, 0xFF	; 255
    5db4:	fe 01       	movw	r30, r28
    5db6:	e5 53       	subi	r30, 0x35	; 53
    5db8:	ff 4f       	sbci	r31, 0xFF	; 255
    5dba:	60 81       	ld	r22, Z
    5dbc:	71 81       	ldd	r23, Z+1	; 0x01
    5dbe:	82 81       	ldd	r24, Z+2	; 0x02
    5dc0:	93 81       	ldd	r25, Z+3	; 0x03
    5dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dc6:	dc 01       	movw	r26, r24
    5dc8:	cb 01       	movw	r24, r22
    5dca:	f8 01       	movw	r30, r16
    5dcc:	91 83       	std	Z+1, r25	; 0x01
    5dce:	80 83       	st	Z, r24
    5dd0:	de 01       	movw	r26, r28
    5dd2:	ab 53       	subi	r26, 0x3B	; 59
    5dd4:	bf 4f       	sbci	r27, 0xFF	; 255
    5dd6:	fe 01       	movw	r30, r28
    5dd8:	e7 53       	subi	r30, 0x37	; 55
    5dda:	ff 4f       	sbci	r31, 0xFF	; 255
    5ddc:	80 81       	ld	r24, Z
    5dde:	91 81       	ldd	r25, Z+1	; 0x01
    5de0:	8d 93       	st	X+, r24
    5de2:	9c 93       	st	X, r25
    5de4:	fe 01       	movw	r30, r28
    5de6:	eb 53       	subi	r30, 0x3B	; 59
    5de8:	ff 4f       	sbci	r31, 0xFF	; 255
    5dea:	80 81       	ld	r24, Z
    5dec:	91 81       	ldd	r25, Z+1	; 0x01
    5dee:	01 97       	sbiw	r24, 0x01	; 1
    5df0:	f1 f7       	brne	.-4      	; 0x5dee <main+0x3c92>
    5df2:	fe 01       	movw	r30, r28
    5df4:	eb 53       	subi	r30, 0x3B	; 59
    5df6:	ff 4f       	sbci	r31, 0xFF	; 255
    5df8:	91 83       	std	Z+1, r25	; 0x01
    5dfa:	80 83       	st	Z, r24
						_delay_ms(250);
						DIO_write(BUZZER_PORT,BUZZER_PIN,0);
    5dfc:	84 e4       	ldi	r24, 0x44	; 68
    5dfe:	66 e0       	ldi	r22, 0x06	; 6
    5e00:	40 e0       	ldi	r20, 0x00	; 0
    5e02:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    5e06:	fe 01       	movw	r30, r28
    5e08:	ef 53       	subi	r30, 0x3F	; 63
    5e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5e0c:	80 e0       	ldi	r24, 0x00	; 0
    5e0e:	90 e0       	ldi	r25, 0x00	; 0
    5e10:	aa e7       	ldi	r26, 0x7A	; 122
    5e12:	b3 e4       	ldi	r27, 0x43	; 67
    5e14:	80 83       	st	Z, r24
    5e16:	91 83       	std	Z+1, r25	; 0x01
    5e18:	a2 83       	std	Z+2, r26	; 0x02
    5e1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e1c:	8e 01       	movw	r16, r28
    5e1e:	03 54       	subi	r16, 0x43	; 67
    5e20:	1f 4f       	sbci	r17, 0xFF	; 255
    5e22:	fe 01       	movw	r30, r28
    5e24:	ef 53       	subi	r30, 0x3F	; 63
    5e26:	ff 4f       	sbci	r31, 0xFF	; 255
    5e28:	60 81       	ld	r22, Z
    5e2a:	71 81       	ldd	r23, Z+1	; 0x01
    5e2c:	82 81       	ldd	r24, Z+2	; 0x02
    5e2e:	93 81       	ldd	r25, Z+3	; 0x03
    5e30:	20 e0       	ldi	r18, 0x00	; 0
    5e32:	30 e0       	ldi	r19, 0x00	; 0
    5e34:	4a ef       	ldi	r20, 0xFA	; 250
    5e36:	54 e4       	ldi	r21, 0x44	; 68
    5e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e3c:	dc 01       	movw	r26, r24
    5e3e:	cb 01       	movw	r24, r22
    5e40:	f8 01       	movw	r30, r16
    5e42:	80 83       	st	Z, r24
    5e44:	91 83       	std	Z+1, r25	; 0x01
    5e46:	a2 83       	std	Z+2, r26	; 0x02
    5e48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5e4a:	fe 01       	movw	r30, r28
    5e4c:	e3 54       	subi	r30, 0x43	; 67
    5e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e50:	60 81       	ld	r22, Z
    5e52:	71 81       	ldd	r23, Z+1	; 0x01
    5e54:	82 81       	ldd	r24, Z+2	; 0x02
    5e56:	93 81       	ldd	r25, Z+3	; 0x03
    5e58:	20 e0       	ldi	r18, 0x00	; 0
    5e5a:	30 e0       	ldi	r19, 0x00	; 0
    5e5c:	40 e8       	ldi	r20, 0x80	; 128
    5e5e:	5f e3       	ldi	r21, 0x3F	; 63
    5e60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5e64:	88 23       	and	r24, r24
    5e66:	44 f4       	brge	.+16     	; 0x5e78 <main+0x3d1c>
		__ticks = 1;
    5e68:	fe 01       	movw	r30, r28
    5e6a:	e5 54       	subi	r30, 0x45	; 69
    5e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e6e:	81 e0       	ldi	r24, 0x01	; 1
    5e70:	90 e0       	ldi	r25, 0x00	; 0
    5e72:	91 83       	std	Z+1, r25	; 0x01
    5e74:	80 83       	st	Z, r24
    5e76:	64 c0       	rjmp	.+200    	; 0x5f40 <main+0x3de4>
	else if (__tmp > 65535)
    5e78:	fe 01       	movw	r30, r28
    5e7a:	e3 54       	subi	r30, 0x43	; 67
    5e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e7e:	60 81       	ld	r22, Z
    5e80:	71 81       	ldd	r23, Z+1	; 0x01
    5e82:	82 81       	ldd	r24, Z+2	; 0x02
    5e84:	93 81       	ldd	r25, Z+3	; 0x03
    5e86:	20 e0       	ldi	r18, 0x00	; 0
    5e88:	3f ef       	ldi	r19, 0xFF	; 255
    5e8a:	4f e7       	ldi	r20, 0x7F	; 127
    5e8c:	57 e4       	ldi	r21, 0x47	; 71
    5e8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5e92:	18 16       	cp	r1, r24
    5e94:	0c f0       	brlt	.+2      	; 0x5e98 <main+0x3d3c>
    5e96:	43 c0       	rjmp	.+134    	; 0x5f1e <main+0x3dc2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e98:	fe 01       	movw	r30, r28
    5e9a:	ef 53       	subi	r30, 0x3F	; 63
    5e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e9e:	60 81       	ld	r22, Z
    5ea0:	71 81       	ldd	r23, Z+1	; 0x01
    5ea2:	82 81       	ldd	r24, Z+2	; 0x02
    5ea4:	93 81       	ldd	r25, Z+3	; 0x03
    5ea6:	20 e0       	ldi	r18, 0x00	; 0
    5ea8:	30 e0       	ldi	r19, 0x00	; 0
    5eaa:	40 e2       	ldi	r20, 0x20	; 32
    5eac:	51 e4       	ldi	r21, 0x41	; 65
    5eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5eb2:	dc 01       	movw	r26, r24
    5eb4:	cb 01       	movw	r24, r22
    5eb6:	8e 01       	movw	r16, r28
    5eb8:	05 54       	subi	r16, 0x45	; 69
    5eba:	1f 4f       	sbci	r17, 0xFF	; 255
    5ebc:	bc 01       	movw	r22, r24
    5ebe:	cd 01       	movw	r24, r26
    5ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ec4:	dc 01       	movw	r26, r24
    5ec6:	cb 01       	movw	r24, r22
    5ec8:	f8 01       	movw	r30, r16
    5eca:	91 83       	std	Z+1, r25	; 0x01
    5ecc:	80 83       	st	Z, r24
    5ece:	1f c0       	rjmp	.+62     	; 0x5f0e <main+0x3db2>
    5ed0:	fe 01       	movw	r30, r28
    5ed2:	e7 54       	subi	r30, 0x47	; 71
    5ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ed6:	88 ec       	ldi	r24, 0xC8	; 200
    5ed8:	90 e0       	ldi	r25, 0x00	; 0
    5eda:	91 83       	std	Z+1, r25	; 0x01
    5edc:	80 83       	st	Z, r24
    5ede:	fe 01       	movw	r30, r28
    5ee0:	e7 54       	subi	r30, 0x47	; 71
    5ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ee4:	80 81       	ld	r24, Z
    5ee6:	91 81       	ldd	r25, Z+1	; 0x01
    5ee8:	01 97       	sbiw	r24, 0x01	; 1
    5eea:	f1 f7       	brne	.-4      	; 0x5ee8 <main+0x3d8c>
    5eec:	fe 01       	movw	r30, r28
    5eee:	e7 54       	subi	r30, 0x47	; 71
    5ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ef2:	91 83       	std	Z+1, r25	; 0x01
    5ef4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ef6:	de 01       	movw	r26, r28
    5ef8:	a5 54       	subi	r26, 0x45	; 69
    5efa:	bf 4f       	sbci	r27, 0xFF	; 255
    5efc:	fe 01       	movw	r30, r28
    5efe:	e5 54       	subi	r30, 0x45	; 69
    5f00:	ff 4f       	sbci	r31, 0xFF	; 255
    5f02:	80 81       	ld	r24, Z
    5f04:	91 81       	ldd	r25, Z+1	; 0x01
    5f06:	01 97       	sbiw	r24, 0x01	; 1
    5f08:	11 96       	adiw	r26, 0x01	; 1
    5f0a:	9c 93       	st	X, r25
    5f0c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f0e:	fe 01       	movw	r30, r28
    5f10:	e5 54       	subi	r30, 0x45	; 69
    5f12:	ff 4f       	sbci	r31, 0xFF	; 255
    5f14:	80 81       	ld	r24, Z
    5f16:	91 81       	ldd	r25, Z+1	; 0x01
    5f18:	00 97       	sbiw	r24, 0x00	; 0
    5f1a:	d1 f6       	brne	.-76     	; 0x5ed0 <main+0x3d74>
    5f1c:	28 c0       	rjmp	.+80     	; 0x5f6e <main+0x3e12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f1e:	8e 01       	movw	r16, r28
    5f20:	05 54       	subi	r16, 0x45	; 69
    5f22:	1f 4f       	sbci	r17, 0xFF	; 255
    5f24:	fe 01       	movw	r30, r28
    5f26:	e3 54       	subi	r30, 0x43	; 67
    5f28:	ff 4f       	sbci	r31, 0xFF	; 255
    5f2a:	60 81       	ld	r22, Z
    5f2c:	71 81       	ldd	r23, Z+1	; 0x01
    5f2e:	82 81       	ldd	r24, Z+2	; 0x02
    5f30:	93 81       	ldd	r25, Z+3	; 0x03
    5f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f36:	dc 01       	movw	r26, r24
    5f38:	cb 01       	movw	r24, r22
    5f3a:	f8 01       	movw	r30, r16
    5f3c:	91 83       	std	Z+1, r25	; 0x01
    5f3e:	80 83       	st	Z, r24
    5f40:	de 01       	movw	r26, r28
    5f42:	a9 54       	subi	r26, 0x49	; 73
    5f44:	bf 4f       	sbci	r27, 0xFF	; 255
    5f46:	fe 01       	movw	r30, r28
    5f48:	e5 54       	subi	r30, 0x45	; 69
    5f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f4c:	80 81       	ld	r24, Z
    5f4e:	91 81       	ldd	r25, Z+1	; 0x01
    5f50:	11 96       	adiw	r26, 0x01	; 1
    5f52:	9c 93       	st	X, r25
    5f54:	8e 93       	st	-X, r24
    5f56:	fe 01       	movw	r30, r28
    5f58:	e9 54       	subi	r30, 0x49	; 73
    5f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f5c:	80 81       	ld	r24, Z
    5f5e:	91 81       	ldd	r25, Z+1	; 0x01
    5f60:	01 97       	sbiw	r24, 0x01	; 1
    5f62:	f1 f7       	brne	.-4      	; 0x5f60 <main+0x3e04>
    5f64:	fe 01       	movw	r30, r28
    5f66:	e9 54       	subi	r30, 0x49	; 73
    5f68:	ff 4f       	sbci	r31, 0xFF	; 255
    5f6a:	91 83       	std	Z+1, r25	; 0x01
    5f6c:	80 83       	st	Z, r24
						_delay_ms(250);//Halt the system for the given time in (ms)
					}
				} while (( (key_pressed < '1') || (key_pressed > '4') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
    5f6e:	fe 01       	movw	r30, r28
    5f70:	eb 55       	subi	r30, 0x5B	; 91
    5f72:	fd 4f       	sbci	r31, 0xFD	; 253
    5f74:	80 81       	ld	r24, Z
    5f76:	81 33       	cpi	r24, 0x31	; 49
    5f78:	40 f0       	brcs	.+16     	; 0x5f8a <main+0x3e2e>
    5f7a:	fe 01       	movw	r30, r28
    5f7c:	eb 55       	subi	r30, 0x5B	; 91
    5f7e:	fd 4f       	sbci	r31, 0xFD	; 253
    5f80:	80 81       	ld	r24, Z
    5f82:	85 33       	cpi	r24, 0x35	; 53
    5f84:	10 f4       	brcc	.+4      	; 0x5f8a <main+0x3e2e>
    5f86:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <main+0x514e>
    5f8a:	80 91 ba 02 	lds	r24, 0x02BA
    5f8e:	88 23       	and	r24, r24
    5f90:	09 f4       	brne	.+2      	; 0x5f94 <main+0x3e38>
    5f92:	73 cd       	rjmp	.-1306   	; 0x5a7a <main+0x391e>
    5f94:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <main+0x514e>

			case AIRCONDITIONING_MENU:
				do
				{
					/******************** print more Menu ******************/
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    5f98:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
					LCD_vSend_string("1:Set temperature ");
    5f9c:	82 e0       	ldi	r24, 0x02	; 2
    5f9e:	92 e0       	ldi	r25, 0x02	; 2
    5fa0:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
					LCD_movecursor(2,1);
    5fa4:	82 e0       	ldi	r24, 0x02	; 2
    5fa6:	61 e0       	ldi	r22, 0x01	; 1
    5fa8:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
					LCD_vSend_string("2:Control  0:RET");
    5fac:	85 e1       	ldi	r24, 0x15	; 21
    5fae:	92 e0       	ldi	r25, 0x02	; 2
    5fb0:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
					/*******************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
    5fb4:	fe 01       	movw	r30, r28
    5fb6:	e9 55       	subi	r30, 0x59	; 89
    5fb8:	fd 4f       	sbci	r31, 0xFD	; 253
    5fba:	80 81       	ld	r24, Z
    5fbc:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <u8GetKeyPressed>
    5fc0:	fe 01       	movw	r30, r28
    5fc2:	eb 55       	subi	r30, 0x5B	; 91
    5fc4:	fd 4f       	sbci	r31, 0xFD	; 253
    5fc6:	80 83       	st	Z, r24
    5fc8:	fe 01       	movw	r30, r28
    5fca:	ed 54       	subi	r30, 0x4D	; 77
    5fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    5fce:	80 e0       	ldi	r24, 0x00	; 0
    5fd0:	90 e0       	ldi	r25, 0x00	; 0
    5fd2:	a8 ec       	ldi	r26, 0xC8	; 200
    5fd4:	b2 e4       	ldi	r27, 0x42	; 66
    5fd6:	80 83       	st	Z, r24
    5fd8:	91 83       	std	Z+1, r25	; 0x01
    5fda:	a2 83       	std	Z+2, r26	; 0x02
    5fdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5fde:	8e 01       	movw	r16, r28
    5fe0:	01 55       	subi	r16, 0x51	; 81
    5fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    5fe4:	fe 01       	movw	r30, r28
    5fe6:	ed 54       	subi	r30, 0x4D	; 77
    5fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    5fea:	60 81       	ld	r22, Z
    5fec:	71 81       	ldd	r23, Z+1	; 0x01
    5fee:	82 81       	ldd	r24, Z+2	; 0x02
    5ff0:	93 81       	ldd	r25, Z+3	; 0x03
    5ff2:	20 e0       	ldi	r18, 0x00	; 0
    5ff4:	30 e0       	ldi	r19, 0x00	; 0
    5ff6:	4a ef       	ldi	r20, 0xFA	; 250
    5ff8:	54 e4       	ldi	r21, 0x44	; 68
    5ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ffe:	dc 01       	movw	r26, r24
    6000:	cb 01       	movw	r24, r22
    6002:	f8 01       	movw	r30, r16
    6004:	80 83       	st	Z, r24
    6006:	91 83       	std	Z+1, r25	; 0x01
    6008:	a2 83       	std	Z+2, r26	; 0x02
    600a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    600c:	fe 01       	movw	r30, r28
    600e:	e1 55       	subi	r30, 0x51	; 81
    6010:	ff 4f       	sbci	r31, 0xFF	; 255
    6012:	60 81       	ld	r22, Z
    6014:	71 81       	ldd	r23, Z+1	; 0x01
    6016:	82 81       	ldd	r24, Z+2	; 0x02
    6018:	93 81       	ldd	r25, Z+3	; 0x03
    601a:	20 e0       	ldi	r18, 0x00	; 0
    601c:	30 e0       	ldi	r19, 0x00	; 0
    601e:	40 e8       	ldi	r20, 0x80	; 128
    6020:	5f e3       	ldi	r21, 0x3F	; 63
    6022:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6026:	88 23       	and	r24, r24
    6028:	44 f4       	brge	.+16     	; 0x603a <main+0x3ede>
		__ticks = 1;
    602a:	fe 01       	movw	r30, r28
    602c:	e3 55       	subi	r30, 0x53	; 83
    602e:	ff 4f       	sbci	r31, 0xFF	; 255
    6030:	81 e0       	ldi	r24, 0x01	; 1
    6032:	90 e0       	ldi	r25, 0x00	; 0
    6034:	91 83       	std	Z+1, r25	; 0x01
    6036:	80 83       	st	Z, r24
    6038:	64 c0       	rjmp	.+200    	; 0x6102 <main+0x3fa6>
	else if (__tmp > 65535)
    603a:	fe 01       	movw	r30, r28
    603c:	e1 55       	subi	r30, 0x51	; 81
    603e:	ff 4f       	sbci	r31, 0xFF	; 255
    6040:	60 81       	ld	r22, Z
    6042:	71 81       	ldd	r23, Z+1	; 0x01
    6044:	82 81       	ldd	r24, Z+2	; 0x02
    6046:	93 81       	ldd	r25, Z+3	; 0x03
    6048:	20 e0       	ldi	r18, 0x00	; 0
    604a:	3f ef       	ldi	r19, 0xFF	; 255
    604c:	4f e7       	ldi	r20, 0x7F	; 127
    604e:	57 e4       	ldi	r21, 0x47	; 71
    6050:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6054:	18 16       	cp	r1, r24
    6056:	0c f0       	brlt	.+2      	; 0x605a <main+0x3efe>
    6058:	43 c0       	rjmp	.+134    	; 0x60e0 <main+0x3f84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    605a:	fe 01       	movw	r30, r28
    605c:	ed 54       	subi	r30, 0x4D	; 77
    605e:	ff 4f       	sbci	r31, 0xFF	; 255
    6060:	60 81       	ld	r22, Z
    6062:	71 81       	ldd	r23, Z+1	; 0x01
    6064:	82 81       	ldd	r24, Z+2	; 0x02
    6066:	93 81       	ldd	r25, Z+3	; 0x03
    6068:	20 e0       	ldi	r18, 0x00	; 0
    606a:	30 e0       	ldi	r19, 0x00	; 0
    606c:	40 e2       	ldi	r20, 0x20	; 32
    606e:	51 e4       	ldi	r21, 0x41	; 65
    6070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6074:	dc 01       	movw	r26, r24
    6076:	cb 01       	movw	r24, r22
    6078:	8e 01       	movw	r16, r28
    607a:	03 55       	subi	r16, 0x53	; 83
    607c:	1f 4f       	sbci	r17, 0xFF	; 255
    607e:	bc 01       	movw	r22, r24
    6080:	cd 01       	movw	r24, r26
    6082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6086:	dc 01       	movw	r26, r24
    6088:	cb 01       	movw	r24, r22
    608a:	f8 01       	movw	r30, r16
    608c:	91 83       	std	Z+1, r25	; 0x01
    608e:	80 83       	st	Z, r24
    6090:	1f c0       	rjmp	.+62     	; 0x60d0 <main+0x3f74>
    6092:	fe 01       	movw	r30, r28
    6094:	e5 55       	subi	r30, 0x55	; 85
    6096:	ff 4f       	sbci	r31, 0xFF	; 255
    6098:	88 ec       	ldi	r24, 0xC8	; 200
    609a:	90 e0       	ldi	r25, 0x00	; 0
    609c:	91 83       	std	Z+1, r25	; 0x01
    609e:	80 83       	st	Z, r24
    60a0:	fe 01       	movw	r30, r28
    60a2:	e5 55       	subi	r30, 0x55	; 85
    60a4:	ff 4f       	sbci	r31, 0xFF	; 255
    60a6:	80 81       	ld	r24, Z
    60a8:	91 81       	ldd	r25, Z+1	; 0x01
    60aa:	01 97       	sbiw	r24, 0x01	; 1
    60ac:	f1 f7       	brne	.-4      	; 0x60aa <main+0x3f4e>
    60ae:	fe 01       	movw	r30, r28
    60b0:	e5 55       	subi	r30, 0x55	; 85
    60b2:	ff 4f       	sbci	r31, 0xFF	; 255
    60b4:	91 83       	std	Z+1, r25	; 0x01
    60b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60b8:	de 01       	movw	r26, r28
    60ba:	a3 55       	subi	r26, 0x53	; 83
    60bc:	bf 4f       	sbci	r27, 0xFF	; 255
    60be:	fe 01       	movw	r30, r28
    60c0:	e3 55       	subi	r30, 0x53	; 83
    60c2:	ff 4f       	sbci	r31, 0xFF	; 255
    60c4:	80 81       	ld	r24, Z
    60c6:	91 81       	ldd	r25, Z+1	; 0x01
    60c8:	01 97       	sbiw	r24, 0x01	; 1
    60ca:	11 96       	adiw	r26, 0x01	; 1
    60cc:	9c 93       	st	X, r25
    60ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60d0:	fe 01       	movw	r30, r28
    60d2:	e3 55       	subi	r30, 0x53	; 83
    60d4:	ff 4f       	sbci	r31, 0xFF	; 255
    60d6:	80 81       	ld	r24, Z
    60d8:	91 81       	ldd	r25, Z+1	; 0x01
    60da:	00 97       	sbiw	r24, 0x00	; 0
    60dc:	d1 f6       	brne	.-76     	; 0x6092 <main+0x3f36>
    60de:	28 c0       	rjmp	.+80     	; 0x6130 <main+0x3fd4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60e0:	8e 01       	movw	r16, r28
    60e2:	03 55       	subi	r16, 0x53	; 83
    60e4:	1f 4f       	sbci	r17, 0xFF	; 255
    60e6:	fe 01       	movw	r30, r28
    60e8:	e1 55       	subi	r30, 0x51	; 81
    60ea:	ff 4f       	sbci	r31, 0xFF	; 255
    60ec:	60 81       	ld	r22, Z
    60ee:	71 81       	ldd	r23, Z+1	; 0x01
    60f0:	82 81       	ldd	r24, Z+2	; 0x02
    60f2:	93 81       	ldd	r25, Z+3	; 0x03
    60f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60f8:	dc 01       	movw	r26, r24
    60fa:	cb 01       	movw	r24, r22
    60fc:	f8 01       	movw	r30, r16
    60fe:	91 83       	std	Z+1, r25	; 0x01
    6100:	80 83       	st	Z, r24
    6102:	de 01       	movw	r26, r28
    6104:	a7 55       	subi	r26, 0x57	; 87
    6106:	bf 4f       	sbci	r27, 0xFF	; 255
    6108:	fe 01       	movw	r30, r28
    610a:	e3 55       	subi	r30, 0x53	; 83
    610c:	ff 4f       	sbci	r31, 0xFF	; 255
    610e:	80 81       	ld	r24, Z
    6110:	91 81       	ldd	r25, Z+1	; 0x01
    6112:	11 96       	adiw	r26, 0x01	; 1
    6114:	9c 93       	st	X, r25
    6116:	8e 93       	st	-X, r24
    6118:	fe 01       	movw	r30, r28
    611a:	e7 55       	subi	r30, 0x57	; 87
    611c:	ff 4f       	sbci	r31, 0xFF	; 255
    611e:	80 81       	ld	r24, Z
    6120:	91 81       	ldd	r25, Z+1	; 0x01
    6122:	01 97       	sbiw	r24, 0x01	; 1
    6124:	f1 f7       	brne	.-4      	; 0x6122 <main+0x3fc6>
    6126:	fe 01       	movw	r30, r28
    6128:	e7 55       	subi	r30, 0x57	; 87
    612a:	ff 4f       	sbci	r31, 0xFF	; 255
    612c:	91 83       	std	Z+1, r25	; 0x01
    612e:	80 83       	st	Z, r24
					_delay_ms(100);//to avoid the duplication of the pressed key

					if (key_pressed == SELECT_SET_TEMPERATURE)//If key pressed is 1
    6130:	fe 01       	movw	r30, r28
    6132:	eb 55       	subi	r30, 0x5B	; 91
    6134:	fd 4f       	sbci	r31, 0xFD	; 253
    6136:	80 81       	ld	r24, Z
    6138:	81 33       	cpi	r24, 0x31	; 49
    613a:	31 f4       	brne	.+12     	; 0x6148 <main+0x3fec>
					{
						show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
    613c:	fe 01       	movw	r30, r28
    613e:	ee 55       	subi	r30, 0x5E	; 94
    6140:	fd 4f       	sbci	r31, 0xFD	; 253
    6142:	8a e0       	ldi	r24, 0x0A	; 10
    6144:	80 83       	st	Z, r24
    6146:	96 c1       	rjmp	.+812    	; 0x6474 <main+0x4318>
					}
					else if (key_pressed == SELECT_AIR_COND_CTRL)//If key pressed is 2
    6148:	fe 01       	movw	r30, r28
    614a:	eb 55       	subi	r30, 0x5B	; 91
    614c:	fd 4f       	sbci	r31, 0xFD	; 253
    614e:	80 81       	ld	r24, Z
    6150:	82 33       	cpi	r24, 0x32	; 50
    6152:	31 f4       	brne	.+12     	; 0x6160 <main+0x4004>
					{
						show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
    6154:	fe 01       	movw	r30, r28
    6156:	ee 55       	subi	r30, 0x5E	; 94
    6158:	fd 4f       	sbci	r31, 0xFD	; 253
    615a:	89 e0       	ldi	r24, 0x09	; 9
    615c:	80 83       	st	Z, r24
    615e:	8a c1       	rjmp	.+788    	; 0x6474 <main+0x4318>
					}
					else if (key_pressed == SELECT_AIR_COND_RET)//If key pressed is 0
    6160:	fe 01       	movw	r30, r28
    6162:	eb 55       	subi	r30, 0x5B	; 91
    6164:	fd 4f       	sbci	r31, 0xFD	; 253
    6166:	80 81       	ld	r24, Z
    6168:	80 33       	cpi	r24, 0x30	; 48
    616a:	31 f4       	brne	.+12     	; 0x6178 <main+0x401c>
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
    616c:	fe 01       	movw	r30, r28
    616e:	ee 55       	subi	r30, 0x5E	; 94
    6170:	fd 4f       	sbci	r31, 0xFD	; 253
    6172:	82 e0       	ldi	r24, 0x02	; 2
    6174:	80 83       	st	Z, r24
    6176:	7e c1       	rjmp	.+764    	; 0x6474 <main+0x4318>
					}
					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
    6178:	fe 01       	movw	r30, r28
    617a:	eb 55       	subi	r30, 0x5B	; 91
    617c:	fd 4f       	sbci	r31, 0xFD	; 253
    617e:	80 81       	ld	r24, Z
    6180:	8f 3f       	cpi	r24, 0xFF	; 255
    6182:	09 f4       	brne	.+2      	; 0x6186 <main+0x402a>
    6184:	77 c1       	rjmp	.+750    	; 0x6474 <main+0x4318>
					{
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    6186:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						LCD_vSend_string("Wrong input");//print error message
    618a:	82 ed       	ldi	r24, 0xD2	; 210
    618c:	91 e0       	ldi	r25, 0x01	; 1
    618e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
						DIO_write(BUZZER_PORT,BUZZER_PIN,1);
    6192:	84 e4       	ldi	r24, 0x44	; 68
    6194:	66 e0       	ldi	r22, 0x06	; 6
    6196:	41 e0       	ldi	r20, 0x01	; 1
    6198:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    619c:	fe 01       	movw	r30, r28
    619e:	eb 55       	subi	r30, 0x5B	; 91
    61a0:	ff 4f       	sbci	r31, 0xFF	; 255
    61a2:	80 e0       	ldi	r24, 0x00	; 0
    61a4:	90 e0       	ldi	r25, 0x00	; 0
    61a6:	aa e7       	ldi	r26, 0x7A	; 122
    61a8:	b3 e4       	ldi	r27, 0x43	; 67
    61aa:	80 83       	st	Z, r24
    61ac:	91 83       	std	Z+1, r25	; 0x01
    61ae:	a2 83       	std	Z+2, r26	; 0x02
    61b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    61b2:	8e 01       	movw	r16, r28
    61b4:	0f 55       	subi	r16, 0x5F	; 95
    61b6:	1f 4f       	sbci	r17, 0xFF	; 255
    61b8:	fe 01       	movw	r30, r28
    61ba:	eb 55       	subi	r30, 0x5B	; 91
    61bc:	ff 4f       	sbci	r31, 0xFF	; 255
    61be:	60 81       	ld	r22, Z
    61c0:	71 81       	ldd	r23, Z+1	; 0x01
    61c2:	82 81       	ldd	r24, Z+2	; 0x02
    61c4:	93 81       	ldd	r25, Z+3	; 0x03
    61c6:	20 e0       	ldi	r18, 0x00	; 0
    61c8:	30 e0       	ldi	r19, 0x00	; 0
    61ca:	4a ef       	ldi	r20, 0xFA	; 250
    61cc:	54 e4       	ldi	r21, 0x44	; 68
    61ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61d2:	dc 01       	movw	r26, r24
    61d4:	cb 01       	movw	r24, r22
    61d6:	f8 01       	movw	r30, r16
    61d8:	80 83       	st	Z, r24
    61da:	91 83       	std	Z+1, r25	; 0x01
    61dc:	a2 83       	std	Z+2, r26	; 0x02
    61de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    61e0:	fe 01       	movw	r30, r28
    61e2:	ef 55       	subi	r30, 0x5F	; 95
    61e4:	ff 4f       	sbci	r31, 0xFF	; 255
    61e6:	60 81       	ld	r22, Z
    61e8:	71 81       	ldd	r23, Z+1	; 0x01
    61ea:	82 81       	ldd	r24, Z+2	; 0x02
    61ec:	93 81       	ldd	r25, Z+3	; 0x03
    61ee:	20 e0       	ldi	r18, 0x00	; 0
    61f0:	30 e0       	ldi	r19, 0x00	; 0
    61f2:	40 e8       	ldi	r20, 0x80	; 128
    61f4:	5f e3       	ldi	r21, 0x3F	; 63
    61f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    61fa:	88 23       	and	r24, r24
    61fc:	44 f4       	brge	.+16     	; 0x620e <main+0x40b2>
		__ticks = 1;
    61fe:	fe 01       	movw	r30, r28
    6200:	e1 56       	subi	r30, 0x61	; 97
    6202:	ff 4f       	sbci	r31, 0xFF	; 255
    6204:	81 e0       	ldi	r24, 0x01	; 1
    6206:	90 e0       	ldi	r25, 0x00	; 0
    6208:	91 83       	std	Z+1, r25	; 0x01
    620a:	80 83       	st	Z, r24
    620c:	64 c0       	rjmp	.+200    	; 0x62d6 <main+0x417a>
	else if (__tmp > 65535)
    620e:	fe 01       	movw	r30, r28
    6210:	ef 55       	subi	r30, 0x5F	; 95
    6212:	ff 4f       	sbci	r31, 0xFF	; 255
    6214:	60 81       	ld	r22, Z
    6216:	71 81       	ldd	r23, Z+1	; 0x01
    6218:	82 81       	ldd	r24, Z+2	; 0x02
    621a:	93 81       	ldd	r25, Z+3	; 0x03
    621c:	20 e0       	ldi	r18, 0x00	; 0
    621e:	3f ef       	ldi	r19, 0xFF	; 255
    6220:	4f e7       	ldi	r20, 0x7F	; 127
    6222:	57 e4       	ldi	r21, 0x47	; 71
    6224:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6228:	18 16       	cp	r1, r24
    622a:	0c f0       	brlt	.+2      	; 0x622e <main+0x40d2>
    622c:	43 c0       	rjmp	.+134    	; 0x62b4 <main+0x4158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    622e:	fe 01       	movw	r30, r28
    6230:	eb 55       	subi	r30, 0x5B	; 91
    6232:	ff 4f       	sbci	r31, 0xFF	; 255
    6234:	60 81       	ld	r22, Z
    6236:	71 81       	ldd	r23, Z+1	; 0x01
    6238:	82 81       	ldd	r24, Z+2	; 0x02
    623a:	93 81       	ldd	r25, Z+3	; 0x03
    623c:	20 e0       	ldi	r18, 0x00	; 0
    623e:	30 e0       	ldi	r19, 0x00	; 0
    6240:	40 e2       	ldi	r20, 0x20	; 32
    6242:	51 e4       	ldi	r21, 0x41	; 65
    6244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6248:	dc 01       	movw	r26, r24
    624a:	cb 01       	movw	r24, r22
    624c:	8e 01       	movw	r16, r28
    624e:	01 56       	subi	r16, 0x61	; 97
    6250:	1f 4f       	sbci	r17, 0xFF	; 255
    6252:	bc 01       	movw	r22, r24
    6254:	cd 01       	movw	r24, r26
    6256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    625a:	dc 01       	movw	r26, r24
    625c:	cb 01       	movw	r24, r22
    625e:	f8 01       	movw	r30, r16
    6260:	91 83       	std	Z+1, r25	; 0x01
    6262:	80 83       	st	Z, r24
    6264:	1f c0       	rjmp	.+62     	; 0x62a4 <main+0x4148>
    6266:	fe 01       	movw	r30, r28
    6268:	e3 56       	subi	r30, 0x63	; 99
    626a:	ff 4f       	sbci	r31, 0xFF	; 255
    626c:	88 ec       	ldi	r24, 0xC8	; 200
    626e:	90 e0       	ldi	r25, 0x00	; 0
    6270:	91 83       	std	Z+1, r25	; 0x01
    6272:	80 83       	st	Z, r24
    6274:	fe 01       	movw	r30, r28
    6276:	e3 56       	subi	r30, 0x63	; 99
    6278:	ff 4f       	sbci	r31, 0xFF	; 255
    627a:	80 81       	ld	r24, Z
    627c:	91 81       	ldd	r25, Z+1	; 0x01
    627e:	01 97       	sbiw	r24, 0x01	; 1
    6280:	f1 f7       	brne	.-4      	; 0x627e <main+0x4122>
    6282:	fe 01       	movw	r30, r28
    6284:	e3 56       	subi	r30, 0x63	; 99
    6286:	ff 4f       	sbci	r31, 0xFF	; 255
    6288:	91 83       	std	Z+1, r25	; 0x01
    628a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    628c:	de 01       	movw	r26, r28
    628e:	a1 56       	subi	r26, 0x61	; 97
    6290:	bf 4f       	sbci	r27, 0xFF	; 255
    6292:	fe 01       	movw	r30, r28
    6294:	e1 56       	subi	r30, 0x61	; 97
    6296:	ff 4f       	sbci	r31, 0xFF	; 255
    6298:	80 81       	ld	r24, Z
    629a:	91 81       	ldd	r25, Z+1	; 0x01
    629c:	01 97       	sbiw	r24, 0x01	; 1
    629e:	11 96       	adiw	r26, 0x01	; 1
    62a0:	9c 93       	st	X, r25
    62a2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62a4:	fe 01       	movw	r30, r28
    62a6:	e1 56       	subi	r30, 0x61	; 97
    62a8:	ff 4f       	sbci	r31, 0xFF	; 255
    62aa:	80 81       	ld	r24, Z
    62ac:	91 81       	ldd	r25, Z+1	; 0x01
    62ae:	00 97       	sbiw	r24, 0x00	; 0
    62b0:	d1 f6       	brne	.-76     	; 0x6266 <main+0x410a>
    62b2:	27 c0       	rjmp	.+78     	; 0x6302 <main+0x41a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62b4:	8e 01       	movw	r16, r28
    62b6:	01 56       	subi	r16, 0x61	; 97
    62b8:	1f 4f       	sbci	r17, 0xFF	; 255
    62ba:	fe 01       	movw	r30, r28
    62bc:	ef 55       	subi	r30, 0x5F	; 95
    62be:	ff 4f       	sbci	r31, 0xFF	; 255
    62c0:	60 81       	ld	r22, Z
    62c2:	71 81       	ldd	r23, Z+1	; 0x01
    62c4:	82 81       	ldd	r24, Z+2	; 0x02
    62c6:	93 81       	ldd	r25, Z+3	; 0x03
    62c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62cc:	dc 01       	movw	r26, r24
    62ce:	cb 01       	movw	r24, r22
    62d0:	f8 01       	movw	r30, r16
    62d2:	91 83       	std	Z+1, r25	; 0x01
    62d4:	80 83       	st	Z, r24
    62d6:	de 01       	movw	r26, r28
    62d8:	a5 56       	subi	r26, 0x65	; 101
    62da:	bf 4f       	sbci	r27, 0xFF	; 255
    62dc:	fe 01       	movw	r30, r28
    62de:	e1 56       	subi	r30, 0x61	; 97
    62e0:	ff 4f       	sbci	r31, 0xFF	; 255
    62e2:	80 81       	ld	r24, Z
    62e4:	91 81       	ldd	r25, Z+1	; 0x01
    62e6:	8d 93       	st	X+, r24
    62e8:	9c 93       	st	X, r25
    62ea:	fe 01       	movw	r30, r28
    62ec:	e5 56       	subi	r30, 0x65	; 101
    62ee:	ff 4f       	sbci	r31, 0xFF	; 255
    62f0:	80 81       	ld	r24, Z
    62f2:	91 81       	ldd	r25, Z+1	; 0x01
    62f4:	01 97       	sbiw	r24, 0x01	; 1
    62f6:	f1 f7       	brne	.-4      	; 0x62f4 <main+0x4198>
    62f8:	fe 01       	movw	r30, r28
    62fa:	e5 56       	subi	r30, 0x65	; 101
    62fc:	ff 4f       	sbci	r31, 0xFF	; 255
    62fe:	91 83       	std	Z+1, r25	; 0x01
    6300:	80 83       	st	Z, r24
						_delay_ms(250);
						DIO_write(BUZZER_PORT,BUZZER_PIN,0);
    6302:	84 e4       	ldi	r24, 0x44	; 68
    6304:	66 e0       	ldi	r22, 0x06	; 6
    6306:	40 e0       	ldi	r20, 0x00	; 0
    6308:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    630c:	fe 01       	movw	r30, r28
    630e:	e9 56       	subi	r30, 0x69	; 105
    6310:	ff 4f       	sbci	r31, 0xFF	; 255
    6312:	80 e0       	ldi	r24, 0x00	; 0
    6314:	90 e0       	ldi	r25, 0x00	; 0
    6316:	aa e7       	ldi	r26, 0x7A	; 122
    6318:	b3 e4       	ldi	r27, 0x43	; 67
    631a:	80 83       	st	Z, r24
    631c:	91 83       	std	Z+1, r25	; 0x01
    631e:	a2 83       	std	Z+2, r26	; 0x02
    6320:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6322:	8e 01       	movw	r16, r28
    6324:	0d 56       	subi	r16, 0x6D	; 109
    6326:	1f 4f       	sbci	r17, 0xFF	; 255
    6328:	fe 01       	movw	r30, r28
    632a:	e9 56       	subi	r30, 0x69	; 105
    632c:	ff 4f       	sbci	r31, 0xFF	; 255
    632e:	60 81       	ld	r22, Z
    6330:	71 81       	ldd	r23, Z+1	; 0x01
    6332:	82 81       	ldd	r24, Z+2	; 0x02
    6334:	93 81       	ldd	r25, Z+3	; 0x03
    6336:	20 e0       	ldi	r18, 0x00	; 0
    6338:	30 e0       	ldi	r19, 0x00	; 0
    633a:	4a ef       	ldi	r20, 0xFA	; 250
    633c:	54 e4       	ldi	r21, 0x44	; 68
    633e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6342:	dc 01       	movw	r26, r24
    6344:	cb 01       	movw	r24, r22
    6346:	f8 01       	movw	r30, r16
    6348:	80 83       	st	Z, r24
    634a:	91 83       	std	Z+1, r25	; 0x01
    634c:	a2 83       	std	Z+2, r26	; 0x02
    634e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6350:	fe 01       	movw	r30, r28
    6352:	ed 56       	subi	r30, 0x6D	; 109
    6354:	ff 4f       	sbci	r31, 0xFF	; 255
    6356:	60 81       	ld	r22, Z
    6358:	71 81       	ldd	r23, Z+1	; 0x01
    635a:	82 81       	ldd	r24, Z+2	; 0x02
    635c:	93 81       	ldd	r25, Z+3	; 0x03
    635e:	20 e0       	ldi	r18, 0x00	; 0
    6360:	30 e0       	ldi	r19, 0x00	; 0
    6362:	40 e8       	ldi	r20, 0x80	; 128
    6364:	5f e3       	ldi	r21, 0x3F	; 63
    6366:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    636a:	88 23       	and	r24, r24
    636c:	44 f4       	brge	.+16     	; 0x637e <main+0x4222>
		__ticks = 1;
    636e:	fe 01       	movw	r30, r28
    6370:	ef 56       	subi	r30, 0x6F	; 111
    6372:	ff 4f       	sbci	r31, 0xFF	; 255
    6374:	81 e0       	ldi	r24, 0x01	; 1
    6376:	90 e0       	ldi	r25, 0x00	; 0
    6378:	91 83       	std	Z+1, r25	; 0x01
    637a:	80 83       	st	Z, r24
    637c:	64 c0       	rjmp	.+200    	; 0x6446 <main+0x42ea>
	else if (__tmp > 65535)
    637e:	fe 01       	movw	r30, r28
    6380:	ed 56       	subi	r30, 0x6D	; 109
    6382:	ff 4f       	sbci	r31, 0xFF	; 255
    6384:	60 81       	ld	r22, Z
    6386:	71 81       	ldd	r23, Z+1	; 0x01
    6388:	82 81       	ldd	r24, Z+2	; 0x02
    638a:	93 81       	ldd	r25, Z+3	; 0x03
    638c:	20 e0       	ldi	r18, 0x00	; 0
    638e:	3f ef       	ldi	r19, 0xFF	; 255
    6390:	4f e7       	ldi	r20, 0x7F	; 127
    6392:	57 e4       	ldi	r21, 0x47	; 71
    6394:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6398:	18 16       	cp	r1, r24
    639a:	0c f0       	brlt	.+2      	; 0x639e <main+0x4242>
    639c:	43 c0       	rjmp	.+134    	; 0x6424 <main+0x42c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    639e:	fe 01       	movw	r30, r28
    63a0:	e9 56       	subi	r30, 0x69	; 105
    63a2:	ff 4f       	sbci	r31, 0xFF	; 255
    63a4:	60 81       	ld	r22, Z
    63a6:	71 81       	ldd	r23, Z+1	; 0x01
    63a8:	82 81       	ldd	r24, Z+2	; 0x02
    63aa:	93 81       	ldd	r25, Z+3	; 0x03
    63ac:	20 e0       	ldi	r18, 0x00	; 0
    63ae:	30 e0       	ldi	r19, 0x00	; 0
    63b0:	40 e2       	ldi	r20, 0x20	; 32
    63b2:	51 e4       	ldi	r21, 0x41	; 65
    63b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    63b8:	dc 01       	movw	r26, r24
    63ba:	cb 01       	movw	r24, r22
    63bc:	8e 01       	movw	r16, r28
    63be:	0f 56       	subi	r16, 0x6F	; 111
    63c0:	1f 4f       	sbci	r17, 0xFF	; 255
    63c2:	bc 01       	movw	r22, r24
    63c4:	cd 01       	movw	r24, r26
    63c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63ca:	dc 01       	movw	r26, r24
    63cc:	cb 01       	movw	r24, r22
    63ce:	f8 01       	movw	r30, r16
    63d0:	91 83       	std	Z+1, r25	; 0x01
    63d2:	80 83       	st	Z, r24
    63d4:	1f c0       	rjmp	.+62     	; 0x6414 <main+0x42b8>
    63d6:	fe 01       	movw	r30, r28
    63d8:	e1 57       	subi	r30, 0x71	; 113
    63da:	ff 4f       	sbci	r31, 0xFF	; 255
    63dc:	88 ec       	ldi	r24, 0xC8	; 200
    63de:	90 e0       	ldi	r25, 0x00	; 0
    63e0:	91 83       	std	Z+1, r25	; 0x01
    63e2:	80 83       	st	Z, r24
    63e4:	fe 01       	movw	r30, r28
    63e6:	e1 57       	subi	r30, 0x71	; 113
    63e8:	ff 4f       	sbci	r31, 0xFF	; 255
    63ea:	80 81       	ld	r24, Z
    63ec:	91 81       	ldd	r25, Z+1	; 0x01
    63ee:	01 97       	sbiw	r24, 0x01	; 1
    63f0:	f1 f7       	brne	.-4      	; 0x63ee <main+0x4292>
    63f2:	fe 01       	movw	r30, r28
    63f4:	e1 57       	subi	r30, 0x71	; 113
    63f6:	ff 4f       	sbci	r31, 0xFF	; 255
    63f8:	91 83       	std	Z+1, r25	; 0x01
    63fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63fc:	de 01       	movw	r26, r28
    63fe:	af 56       	subi	r26, 0x6F	; 111
    6400:	bf 4f       	sbci	r27, 0xFF	; 255
    6402:	fe 01       	movw	r30, r28
    6404:	ef 56       	subi	r30, 0x6F	; 111
    6406:	ff 4f       	sbci	r31, 0xFF	; 255
    6408:	80 81       	ld	r24, Z
    640a:	91 81       	ldd	r25, Z+1	; 0x01
    640c:	01 97       	sbiw	r24, 0x01	; 1
    640e:	11 96       	adiw	r26, 0x01	; 1
    6410:	9c 93       	st	X, r25
    6412:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6414:	fe 01       	movw	r30, r28
    6416:	ef 56       	subi	r30, 0x6F	; 111
    6418:	ff 4f       	sbci	r31, 0xFF	; 255
    641a:	80 81       	ld	r24, Z
    641c:	91 81       	ldd	r25, Z+1	; 0x01
    641e:	00 97       	sbiw	r24, 0x00	; 0
    6420:	d1 f6       	brne	.-76     	; 0x63d6 <main+0x427a>
    6422:	28 c0       	rjmp	.+80     	; 0x6474 <main+0x4318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6424:	8e 01       	movw	r16, r28
    6426:	0f 56       	subi	r16, 0x6F	; 111
    6428:	1f 4f       	sbci	r17, 0xFF	; 255
    642a:	fe 01       	movw	r30, r28
    642c:	ed 56       	subi	r30, 0x6D	; 109
    642e:	ff 4f       	sbci	r31, 0xFF	; 255
    6430:	60 81       	ld	r22, Z
    6432:	71 81       	ldd	r23, Z+1	; 0x01
    6434:	82 81       	ldd	r24, Z+2	; 0x02
    6436:	93 81       	ldd	r25, Z+3	; 0x03
    6438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    643c:	dc 01       	movw	r26, r24
    643e:	cb 01       	movw	r24, r22
    6440:	f8 01       	movw	r30, r16
    6442:	91 83       	std	Z+1, r25	; 0x01
    6444:	80 83       	st	Z, r24
    6446:	de 01       	movw	r26, r28
    6448:	a3 57       	subi	r26, 0x73	; 115
    644a:	bf 4f       	sbci	r27, 0xFF	; 255
    644c:	fe 01       	movw	r30, r28
    644e:	ef 56       	subi	r30, 0x6F	; 111
    6450:	ff 4f       	sbci	r31, 0xFF	; 255
    6452:	80 81       	ld	r24, Z
    6454:	91 81       	ldd	r25, Z+1	; 0x01
    6456:	11 96       	adiw	r26, 0x01	; 1
    6458:	9c 93       	st	X, r25
    645a:	8e 93       	st	-X, r24
    645c:	fe 01       	movw	r30, r28
    645e:	e3 57       	subi	r30, 0x73	; 115
    6460:	ff 4f       	sbci	r31, 0xFF	; 255
    6462:	80 81       	ld	r24, Z
    6464:	91 81       	ldd	r25, Z+1	; 0x01
    6466:	01 97       	sbiw	r24, 0x01	; 1
    6468:	f1 f7       	brne	.-4      	; 0x6466 <main+0x430a>
    646a:	fe 01       	movw	r30, r28
    646c:	e3 57       	subi	r30, 0x73	; 115
    646e:	ff 4f       	sbci	r31, 0xFF	; 255
    6470:	91 83       	std	Z+1, r25	; 0x01
    6472:	80 83       	st	Z, r24
						_delay_ms(250);//Halt the system for the given time in (ms)
					}
				} while (( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
    6474:	fe 01       	movw	r30, r28
    6476:	eb 55       	subi	r30, 0x5B	; 91
    6478:	fd 4f       	sbci	r31, 0xFD	; 253
    647a:	80 81       	ld	r24, Z
    647c:	80 33       	cpi	r24, 0x30	; 48
    647e:	38 f0       	brcs	.+14     	; 0x648e <main+0x4332>
    6480:	fe 01       	movw	r30, r28
    6482:	eb 55       	subi	r30, 0x5B	; 91
    6484:	fd 4f       	sbci	r31, 0xFD	; 253
    6486:	80 81       	ld	r24, Z
    6488:	83 33       	cpi	r24, 0x33	; 51
    648a:	08 f4       	brcc	.+2      	; 0x648e <main+0x4332>
    648c:	0e c7       	rjmp	.+3612   	; 0x72aa <main+0x514e>
    648e:	80 91 ba 02 	lds	r24, 0x02BA
    6492:	88 23       	and	r24, r24
    6494:	09 f4       	brne	.+2      	; 0x6498 <main+0x433c>
    6496:	80 cd       	rjmp	.-1280   	; 0x5f98 <main+0x3e3c>
    6498:	08 c7       	rjmp	.+3600   	; 0x72aa <main+0x514e>
				break;//End of air conditioning menu case

			case ROOM1_MENU:
				vMenuOption(ROOM1_MENU,login_mode);//call the function that show the menu of room 1
    649a:	fe 01       	movw	r30, r28
    649c:	e9 55       	subi	r30, 0x59	; 89
    649e:	fd 4f       	sbci	r31, 0xFD	; 253
    64a0:	83 e0       	ldi	r24, 0x03	; 3
    64a2:	60 81       	ld	r22, Z
    64a4:	0e 94 b4 39 	call	0x7368	; 0x7368 <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
    64a8:	fe 01       	movw	r30, r28
    64aa:	ee 55       	subi	r30, 0x5E	; 94
    64ac:	fd 4f       	sbci	r31, 0xFD	; 253
    64ae:	81 e0       	ldi	r24, 0x01	; 1
    64b0:	80 83       	st	Z, r24
    64b2:	fb c6       	rjmp	.+3574   	; 0x72aa <main+0x514e>
				break;//End of room1 menu case

			case ROOM2_MENU:
				vMenuOption(ROOM2_MENU,login_mode);//call the function that show the menu of room 2
    64b4:	fe 01       	movw	r30, r28
    64b6:	e9 55       	subi	r30, 0x59	; 89
    64b8:	fd 4f       	sbci	r31, 0xFD	; 253
    64ba:	84 e0       	ldi	r24, 0x04	; 4
    64bc:	60 81       	ld	r22, Z
    64be:	0e 94 b4 39 	call	0x7368	; 0x7368 <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
    64c2:	fe 01       	movw	r30, r28
    64c4:	ee 55       	subi	r30, 0x5E	; 94
    64c6:	fd 4f       	sbci	r31, 0xFD	; 253
    64c8:	81 e0       	ldi	r24, 0x01	; 1
    64ca:	80 83       	st	Z, r24
    64cc:	ee c6       	rjmp	.+3548   	; 0x72aa <main+0x514e>
				break;//End of room2 menu case

			case ROOM3_MENU:
				vMenuOption(ROOM3_MENU,login_mode);//call the function that show the menu of room 3
    64ce:	fe 01       	movw	r30, r28
    64d0:	e9 55       	subi	r30, 0x59	; 89
    64d2:	fd 4f       	sbci	r31, 0xFD	; 253
    64d4:	85 e0       	ldi	r24, 0x05	; 5
    64d6:	60 81       	ld	r22, Z
    64d8:	0e 94 b4 39 	call	0x7368	; 0x7368 <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
    64dc:	fe 01       	movw	r30, r28
    64de:	ee 55       	subi	r30, 0x5E	; 94
    64e0:	fd 4f       	sbci	r31, 0xFD	; 253
    64e2:	81 e0       	ldi	r24, 0x01	; 1
    64e4:	80 83       	st	Z, r24
    64e6:	e1 c6       	rjmp	.+3522   	; 0x72aa <main+0x514e>
				break;//End of room3 menu case

			case ROOM4_MENU:
				vMenuOption(ROOM4_MENU,login_mode);//call the function that show the menu of room 4
    64e8:	fe 01       	movw	r30, r28
    64ea:	e9 55       	subi	r30, 0x59	; 89
    64ec:	fd 4f       	sbci	r31, 0xFD	; 253
    64ee:	86 e0       	ldi	r24, 0x06	; 6
    64f0:	60 81       	ld	r22, Z
    64f2:	0e 94 b4 39 	call	0x7368	; 0x7368 <vMenuOption>
				if (login_mode == GUEST)//in case of guest is logged in
    64f6:	fe 01       	movw	r30, r28
    64f8:	e9 55       	subi	r30, 0x59	; 89
    64fa:	fd 4f       	sbci	r31, 0xFD	; 253
    64fc:	80 81       	ld	r24, Z
    64fe:	82 30       	cpi	r24, 0x02	; 2
    6500:	31 f4       	brne	.+12     	; 0x650e <main+0x43b2>
				{
					show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
    6502:	fe 01       	movw	r30, r28
    6504:	ee 55       	subi	r30, 0x5E	; 94
    6506:	fd 4f       	sbci	r31, 0xFD	; 253
    6508:	81 e0       	ldi	r24, 0x01	; 1
    650a:	80 83       	st	Z, r24
    650c:	ce c6       	rjmp	.+3484   	; 0x72aa <main+0x514e>
				}
				else//in case of admin is logged in
				{
					show_menu = MORE_MENU;//Set the next menu to be shown to more menu
    650e:	fe 01       	movw	r30, r28
    6510:	ee 55       	subi	r30, 0x5E	; 94
    6512:	fd 4f       	sbci	r31, 0xFD	; 253
    6514:	82 e0       	ldi	r24, 0x02	; 2
    6516:	80 83       	st	Z, r24
    6518:	c8 c6       	rjmp	.+3472   	; 0x72aa <main+0x514e>
				}
				break;//End of room4 menu case

			case TV_MENU:
				vMenuOption(TV_MENU,login_mode);//call the function that show the menu of tv
    651a:	fe 01       	movw	r30, r28
    651c:	e9 55       	subi	r30, 0x59	; 89
    651e:	fd 4f       	sbci	r31, 0xFD	; 253
    6520:	87 e0       	ldi	r24, 0x07	; 7
    6522:	60 81       	ld	r22, Z
    6524:	0e 94 b4 39 	call	0x7368	; 0x7368 <vMenuOption>
				show_menu = MORE_MENU;//Set the next menu to be shown to more menu
    6528:	fe 01       	movw	r30, r28
    652a:	ee 55       	subi	r30, 0x5E	; 94
    652c:	fd 4f       	sbci	r31, 0xFD	; 253
    652e:	82 e0       	ldi	r24, 0x02	; 2
    6530:	80 83       	st	Z, r24
    6532:	bb c6       	rjmp	.+3446   	; 0x72aa <main+0x514e>
				break;//End of TV menu case

			case AIRCOND_CTRL_MENU:
				vMenuOption(AIRCOND_CTRL_MENU,login_mode);//call the function that show the menu of Air conditioning control
    6534:	fe 01       	movw	r30, r28
    6536:	e9 55       	subi	r30, 0x59	; 89
    6538:	fd 4f       	sbci	r31, 0xFD	; 253
    653a:	89 e0       	ldi	r24, 0x09	; 9
    653c:	60 81       	ld	r22, Z
    653e:	0e 94 b4 39 	call	0x7368	; 0x7368 <vMenuOption>
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
    6542:	fe 01       	movw	r30, r28
    6544:	ee 55       	subi	r30, 0x5E	; 94
    6546:	fd 4f       	sbci	r31, 0xFD	; 253
    6548:	88 e0       	ldi	r24, 0x08	; 8
    654a:	80 83       	st	Z, r24
    654c:	ae c6       	rjmp	.+3420   	; 0x72aa <main+0x514e>
				break;//End of air conditioning control menu case

			case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
    654e:	fe 01       	movw	r30, r28
    6550:	e5 55       	subi	r30, 0x55	; 85
    6552:	fd 4f       	sbci	r31, 0xFD	; 253
    6554:	10 82       	st	Z, r1
    6556:	99 c6       	rjmp	.+3378   	; 0x728a <main+0x512e>
				while (temperature==0 && timeout_flag == FALSE)//start the loop that asks for the temperature from the user in case of the time is not out
				{
					key_pressed = NOT_PRESSED;//set the key pressed to the default value
    6558:	fe 01       	movw	r30, r28
    655a:	eb 55       	subi	r30, 0x5B	; 91
    655c:	fd 4f       	sbci	r31, 0xFD	; 253
    655e:	8f ef       	ldi	r24, 0xFF	; 255
    6560:	80 83       	st	Z, r24
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    6562:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
					LCD_vSend_string("Set temp.:__ ");//print the format of inserting temperature
    6566:	86 e2       	ldi	r24, 0x26	; 38
    6568:	92 e0       	ldi	r25, 0x02	; 2
    656a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
					LCD_vSend_char(DEGREES_SYMBOL); // print the symbol of degree
    656e:	8f ed       	ldi	r24, 0xDF	; 223
    6570:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
					LCD_vSend_char('C'); // print the C character
    6574:	83 e4       	ldi	r24, 0x43	; 67
    6576:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
					LCD_movecursor(1,11);//move the cursor to the place to write the entered temperature
    657a:	81 e0       	ldi	r24, 0x01	; 1
    657c:	6b e0       	ldi	r22, 0x0B	; 11
    657e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
    6582:	fe 01       	movw	r30, r28
    6584:	e7 57       	subi	r30, 0x77	; 119
    6586:	ff 4f       	sbci	r31, 0xFF	; 255
    6588:	80 e0       	ldi	r24, 0x00	; 0
    658a:	90 e0       	ldi	r25, 0x00	; 0
    658c:	a8 e4       	ldi	r26, 0x48	; 72
    658e:	b3 e4       	ldi	r27, 0x43	; 67
    6590:	80 83       	st	Z, r24
    6592:	91 83       	std	Z+1, r25	; 0x01
    6594:	a2 83       	std	Z+2, r26	; 0x02
    6596:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6598:	8e 01       	movw	r16, r28
    659a:	0b 57       	subi	r16, 0x7B	; 123
    659c:	1f 4f       	sbci	r17, 0xFF	; 255
    659e:	fe 01       	movw	r30, r28
    65a0:	e7 57       	subi	r30, 0x77	; 119
    65a2:	ff 4f       	sbci	r31, 0xFF	; 255
    65a4:	60 81       	ld	r22, Z
    65a6:	71 81       	ldd	r23, Z+1	; 0x01
    65a8:	82 81       	ldd	r24, Z+2	; 0x02
    65aa:	93 81       	ldd	r25, Z+3	; 0x03
    65ac:	20 e0       	ldi	r18, 0x00	; 0
    65ae:	30 e0       	ldi	r19, 0x00	; 0
    65b0:	4a ef       	ldi	r20, 0xFA	; 250
    65b2:	54 e4       	ldi	r21, 0x44	; 68
    65b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    65b8:	dc 01       	movw	r26, r24
    65ba:	cb 01       	movw	r24, r22
    65bc:	f8 01       	movw	r30, r16
    65be:	80 83       	st	Z, r24
    65c0:	91 83       	std	Z+1, r25	; 0x01
    65c2:	a2 83       	std	Z+2, r26	; 0x02
    65c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    65c6:	fe 01       	movw	r30, r28
    65c8:	eb 57       	subi	r30, 0x7B	; 123
    65ca:	ff 4f       	sbci	r31, 0xFF	; 255
    65cc:	60 81       	ld	r22, Z
    65ce:	71 81       	ldd	r23, Z+1	; 0x01
    65d0:	82 81       	ldd	r24, Z+2	; 0x02
    65d2:	93 81       	ldd	r25, Z+3	; 0x03
    65d4:	20 e0       	ldi	r18, 0x00	; 0
    65d6:	30 e0       	ldi	r19, 0x00	; 0
    65d8:	40 e8       	ldi	r20, 0x80	; 128
    65da:	5f e3       	ldi	r21, 0x3F	; 63
    65dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    65e0:	88 23       	and	r24, r24
    65e2:	44 f4       	brge	.+16     	; 0x65f4 <main+0x4498>
		__ticks = 1;
    65e4:	fe 01       	movw	r30, r28
    65e6:	ed 57       	subi	r30, 0x7D	; 125
    65e8:	ff 4f       	sbci	r31, 0xFF	; 255
    65ea:	81 e0       	ldi	r24, 0x01	; 1
    65ec:	90 e0       	ldi	r25, 0x00	; 0
    65ee:	91 83       	std	Z+1, r25	; 0x01
    65f0:	80 83       	st	Z, r24
    65f2:	64 c0       	rjmp	.+200    	; 0x66bc <main+0x4560>
	else if (__tmp > 65535)
    65f4:	fe 01       	movw	r30, r28
    65f6:	eb 57       	subi	r30, 0x7B	; 123
    65f8:	ff 4f       	sbci	r31, 0xFF	; 255
    65fa:	60 81       	ld	r22, Z
    65fc:	71 81       	ldd	r23, Z+1	; 0x01
    65fe:	82 81       	ldd	r24, Z+2	; 0x02
    6600:	93 81       	ldd	r25, Z+3	; 0x03
    6602:	20 e0       	ldi	r18, 0x00	; 0
    6604:	3f ef       	ldi	r19, 0xFF	; 255
    6606:	4f e7       	ldi	r20, 0x7F	; 127
    6608:	57 e4       	ldi	r21, 0x47	; 71
    660a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    660e:	18 16       	cp	r1, r24
    6610:	0c f0       	brlt	.+2      	; 0x6614 <main+0x44b8>
    6612:	43 c0       	rjmp	.+134    	; 0x669a <main+0x453e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6614:	fe 01       	movw	r30, r28
    6616:	e7 57       	subi	r30, 0x77	; 119
    6618:	ff 4f       	sbci	r31, 0xFF	; 255
    661a:	60 81       	ld	r22, Z
    661c:	71 81       	ldd	r23, Z+1	; 0x01
    661e:	82 81       	ldd	r24, Z+2	; 0x02
    6620:	93 81       	ldd	r25, Z+3	; 0x03
    6622:	20 e0       	ldi	r18, 0x00	; 0
    6624:	30 e0       	ldi	r19, 0x00	; 0
    6626:	40 e2       	ldi	r20, 0x20	; 32
    6628:	51 e4       	ldi	r21, 0x41	; 65
    662a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    662e:	dc 01       	movw	r26, r24
    6630:	cb 01       	movw	r24, r22
    6632:	8e 01       	movw	r16, r28
    6634:	0d 57       	subi	r16, 0x7D	; 125
    6636:	1f 4f       	sbci	r17, 0xFF	; 255
    6638:	bc 01       	movw	r22, r24
    663a:	cd 01       	movw	r24, r26
    663c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6640:	dc 01       	movw	r26, r24
    6642:	cb 01       	movw	r24, r22
    6644:	f8 01       	movw	r30, r16
    6646:	91 83       	std	Z+1, r25	; 0x01
    6648:	80 83       	st	Z, r24
    664a:	1f c0       	rjmp	.+62     	; 0x668a <main+0x452e>
    664c:	fe 01       	movw	r30, r28
    664e:	ef 57       	subi	r30, 0x7F	; 127
    6650:	ff 4f       	sbci	r31, 0xFF	; 255
    6652:	88 ec       	ldi	r24, 0xC8	; 200
    6654:	90 e0       	ldi	r25, 0x00	; 0
    6656:	91 83       	std	Z+1, r25	; 0x01
    6658:	80 83       	st	Z, r24
    665a:	fe 01       	movw	r30, r28
    665c:	ef 57       	subi	r30, 0x7F	; 127
    665e:	ff 4f       	sbci	r31, 0xFF	; 255
    6660:	80 81       	ld	r24, Z
    6662:	91 81       	ldd	r25, Z+1	; 0x01
    6664:	01 97       	sbiw	r24, 0x01	; 1
    6666:	f1 f7       	brne	.-4      	; 0x6664 <main+0x4508>
    6668:	fe 01       	movw	r30, r28
    666a:	ef 57       	subi	r30, 0x7F	; 127
    666c:	ff 4f       	sbci	r31, 0xFF	; 255
    666e:	91 83       	std	Z+1, r25	; 0x01
    6670:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6672:	de 01       	movw	r26, r28
    6674:	ad 57       	subi	r26, 0x7D	; 125
    6676:	bf 4f       	sbci	r27, 0xFF	; 255
    6678:	fe 01       	movw	r30, r28
    667a:	ed 57       	subi	r30, 0x7D	; 125
    667c:	ff 4f       	sbci	r31, 0xFF	; 255
    667e:	80 81       	ld	r24, Z
    6680:	91 81       	ldd	r25, Z+1	; 0x01
    6682:	01 97       	sbiw	r24, 0x01	; 1
    6684:	11 96       	adiw	r26, 0x01	; 1
    6686:	9c 93       	st	X, r25
    6688:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    668a:	fe 01       	movw	r30, r28
    668c:	ed 57       	subi	r30, 0x7D	; 125
    668e:	ff 4f       	sbci	r31, 0xFF	; 255
    6690:	80 81       	ld	r24, Z
    6692:	91 81       	ldd	r25, Z+1	; 0x01
    6694:	00 97       	sbiw	r24, 0x00	; 0
    6696:	d1 f6       	brne	.-76     	; 0x664c <main+0x44f0>
    6698:	27 c0       	rjmp	.+78     	; 0x66e8 <main+0x458c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    669a:	8e 01       	movw	r16, r28
    669c:	0d 57       	subi	r16, 0x7D	; 125
    669e:	1f 4f       	sbci	r17, 0xFF	; 255
    66a0:	fe 01       	movw	r30, r28
    66a2:	eb 57       	subi	r30, 0x7B	; 123
    66a4:	ff 4f       	sbci	r31, 0xFF	; 255
    66a6:	60 81       	ld	r22, Z
    66a8:	71 81       	ldd	r23, Z+1	; 0x01
    66aa:	82 81       	ldd	r24, Z+2	; 0x02
    66ac:	93 81       	ldd	r25, Z+3	; 0x03
    66ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    66b2:	dc 01       	movw	r26, r24
    66b4:	cb 01       	movw	r24, r22
    66b6:	f8 01       	movw	r30, r16
    66b8:	91 83       	std	Z+1, r25	; 0x01
    66ba:	80 83       	st	Z, r24
    66bc:	de 01       	movw	r26, r28
    66be:	a1 58       	subi	r26, 0x81	; 129
    66c0:	bf 4f       	sbci	r27, 0xFF	; 255
    66c2:	fe 01       	movw	r30, r28
    66c4:	ed 57       	subi	r30, 0x7D	; 125
    66c6:	ff 4f       	sbci	r31, 0xFF	; 255
    66c8:	80 81       	ld	r24, Z
    66ca:	91 81       	ldd	r25, Z+1	; 0x01
    66cc:	8d 93       	st	X+, r24
    66ce:	9c 93       	st	X, r25
    66d0:	fe 01       	movw	r30, r28
    66d2:	e1 58       	subi	r30, 0x81	; 129
    66d4:	ff 4f       	sbci	r31, 0xFF	; 255
    66d6:	80 81       	ld	r24, Z
    66d8:	91 81       	ldd	r25, Z+1	; 0x01
    66da:	01 97       	sbiw	r24, 0x01	; 1
    66dc:	f1 f7       	brne	.-4      	; 0x66da <main+0x457e>
    66de:	fe 01       	movw	r30, r28
    66e0:	e1 58       	subi	r30, 0x81	; 129
    66e2:	ff 4f       	sbci	r31, 0xFF	; 255
    66e4:	91 83       	std	Z+1, r25	; 0x01
    66e6:	80 83       	st	Z, r24
					_delay_ms(200);//Halt the system for the given time in (ms)
					/*******************************************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
    66e8:	fe 01       	movw	r30, r28
    66ea:	e9 55       	subi	r30, 0x59	; 89
    66ec:	fd 4f       	sbci	r31, 0xFD	; 253
    66ee:	80 81       	ld	r24, Z
    66f0:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <u8GetKeyPressed>
    66f4:	fe 01       	movw	r30, r28
    66f6:	eb 55       	subi	r30, 0x5B	; 91
    66f8:	fd 4f       	sbci	r31, 0xFD	; 253
    66fa:	80 83       	st	Z, r24
    66fc:	fe 01       	movw	r30, r28
    66fe:	e5 58       	subi	r30, 0x85	; 133
    6700:	ff 4f       	sbci	r31, 0xFF	; 255
    6702:	80 e0       	ldi	r24, 0x00	; 0
    6704:	90 e0       	ldi	r25, 0x00	; 0
    6706:	aa e7       	ldi	r26, 0x7A	; 122
    6708:	b3 e4       	ldi	r27, 0x43	; 67
    670a:	80 83       	st	Z, r24
    670c:	91 83       	std	Z+1, r25	; 0x01
    670e:	a2 83       	std	Z+2, r26	; 0x02
    6710:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6712:	8e 01       	movw	r16, r28
    6714:	09 58       	subi	r16, 0x89	; 137
    6716:	1f 4f       	sbci	r17, 0xFF	; 255
    6718:	fe 01       	movw	r30, r28
    671a:	e5 58       	subi	r30, 0x85	; 133
    671c:	ff 4f       	sbci	r31, 0xFF	; 255
    671e:	60 81       	ld	r22, Z
    6720:	71 81       	ldd	r23, Z+1	; 0x01
    6722:	82 81       	ldd	r24, Z+2	; 0x02
    6724:	93 81       	ldd	r25, Z+3	; 0x03
    6726:	20 e0       	ldi	r18, 0x00	; 0
    6728:	30 e0       	ldi	r19, 0x00	; 0
    672a:	4a ef       	ldi	r20, 0xFA	; 250
    672c:	54 e4       	ldi	r21, 0x44	; 68
    672e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6732:	dc 01       	movw	r26, r24
    6734:	cb 01       	movw	r24, r22
    6736:	f8 01       	movw	r30, r16
    6738:	80 83       	st	Z, r24
    673a:	91 83       	std	Z+1, r25	; 0x01
    673c:	a2 83       	std	Z+2, r26	; 0x02
    673e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6740:	fe 01       	movw	r30, r28
    6742:	e9 58       	subi	r30, 0x89	; 137
    6744:	ff 4f       	sbci	r31, 0xFF	; 255
    6746:	60 81       	ld	r22, Z
    6748:	71 81       	ldd	r23, Z+1	; 0x01
    674a:	82 81       	ldd	r24, Z+2	; 0x02
    674c:	93 81       	ldd	r25, Z+3	; 0x03
    674e:	20 e0       	ldi	r18, 0x00	; 0
    6750:	30 e0       	ldi	r19, 0x00	; 0
    6752:	40 e8       	ldi	r20, 0x80	; 128
    6754:	5f e3       	ldi	r21, 0x3F	; 63
    6756:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    675a:	88 23       	and	r24, r24
    675c:	44 f4       	brge	.+16     	; 0x676e <main+0x4612>
		__ticks = 1;
    675e:	fe 01       	movw	r30, r28
    6760:	eb 58       	subi	r30, 0x8B	; 139
    6762:	ff 4f       	sbci	r31, 0xFF	; 255
    6764:	81 e0       	ldi	r24, 0x01	; 1
    6766:	90 e0       	ldi	r25, 0x00	; 0
    6768:	91 83       	std	Z+1, r25	; 0x01
    676a:	80 83       	st	Z, r24
    676c:	64 c0       	rjmp	.+200    	; 0x6836 <main+0x46da>
	else if (__tmp > 65535)
    676e:	fe 01       	movw	r30, r28
    6770:	e9 58       	subi	r30, 0x89	; 137
    6772:	ff 4f       	sbci	r31, 0xFF	; 255
    6774:	60 81       	ld	r22, Z
    6776:	71 81       	ldd	r23, Z+1	; 0x01
    6778:	82 81       	ldd	r24, Z+2	; 0x02
    677a:	93 81       	ldd	r25, Z+3	; 0x03
    677c:	20 e0       	ldi	r18, 0x00	; 0
    677e:	3f ef       	ldi	r19, 0xFF	; 255
    6780:	4f e7       	ldi	r20, 0x7F	; 127
    6782:	57 e4       	ldi	r21, 0x47	; 71
    6784:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6788:	18 16       	cp	r1, r24
    678a:	0c f0       	brlt	.+2      	; 0x678e <main+0x4632>
    678c:	43 c0       	rjmp	.+134    	; 0x6814 <main+0x46b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    678e:	fe 01       	movw	r30, r28
    6790:	e5 58       	subi	r30, 0x85	; 133
    6792:	ff 4f       	sbci	r31, 0xFF	; 255
    6794:	60 81       	ld	r22, Z
    6796:	71 81       	ldd	r23, Z+1	; 0x01
    6798:	82 81       	ldd	r24, Z+2	; 0x02
    679a:	93 81       	ldd	r25, Z+3	; 0x03
    679c:	20 e0       	ldi	r18, 0x00	; 0
    679e:	30 e0       	ldi	r19, 0x00	; 0
    67a0:	40 e2       	ldi	r20, 0x20	; 32
    67a2:	51 e4       	ldi	r21, 0x41	; 65
    67a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    67a8:	dc 01       	movw	r26, r24
    67aa:	cb 01       	movw	r24, r22
    67ac:	8e 01       	movw	r16, r28
    67ae:	0b 58       	subi	r16, 0x8B	; 139
    67b0:	1f 4f       	sbci	r17, 0xFF	; 255
    67b2:	bc 01       	movw	r22, r24
    67b4:	cd 01       	movw	r24, r26
    67b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67ba:	dc 01       	movw	r26, r24
    67bc:	cb 01       	movw	r24, r22
    67be:	f8 01       	movw	r30, r16
    67c0:	91 83       	std	Z+1, r25	; 0x01
    67c2:	80 83       	st	Z, r24
    67c4:	1f c0       	rjmp	.+62     	; 0x6804 <main+0x46a8>
    67c6:	fe 01       	movw	r30, r28
    67c8:	ed 58       	subi	r30, 0x8D	; 141
    67ca:	ff 4f       	sbci	r31, 0xFF	; 255
    67cc:	88 ec       	ldi	r24, 0xC8	; 200
    67ce:	90 e0       	ldi	r25, 0x00	; 0
    67d0:	91 83       	std	Z+1, r25	; 0x01
    67d2:	80 83       	st	Z, r24
    67d4:	fe 01       	movw	r30, r28
    67d6:	ed 58       	subi	r30, 0x8D	; 141
    67d8:	ff 4f       	sbci	r31, 0xFF	; 255
    67da:	80 81       	ld	r24, Z
    67dc:	91 81       	ldd	r25, Z+1	; 0x01
    67de:	01 97       	sbiw	r24, 0x01	; 1
    67e0:	f1 f7       	brne	.-4      	; 0x67de <main+0x4682>
    67e2:	fe 01       	movw	r30, r28
    67e4:	ed 58       	subi	r30, 0x8D	; 141
    67e6:	ff 4f       	sbci	r31, 0xFF	; 255
    67e8:	91 83       	std	Z+1, r25	; 0x01
    67ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    67ec:	de 01       	movw	r26, r28
    67ee:	ab 58       	subi	r26, 0x8B	; 139
    67f0:	bf 4f       	sbci	r27, 0xFF	; 255
    67f2:	fe 01       	movw	r30, r28
    67f4:	eb 58       	subi	r30, 0x8B	; 139
    67f6:	ff 4f       	sbci	r31, 0xFF	; 255
    67f8:	80 81       	ld	r24, Z
    67fa:	91 81       	ldd	r25, Z+1	; 0x01
    67fc:	01 97       	sbiw	r24, 0x01	; 1
    67fe:	11 96       	adiw	r26, 0x01	; 1
    6800:	9c 93       	st	X, r25
    6802:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6804:	fe 01       	movw	r30, r28
    6806:	eb 58       	subi	r30, 0x8B	; 139
    6808:	ff 4f       	sbci	r31, 0xFF	; 255
    680a:	80 81       	ld	r24, Z
    680c:	91 81       	ldd	r25, Z+1	; 0x01
    680e:	00 97       	sbiw	r24, 0x00	; 0
    6810:	d1 f6       	brne	.-76     	; 0x67c6 <main+0x466a>
    6812:	28 c0       	rjmp	.+80     	; 0x6864 <main+0x4708>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6814:	8e 01       	movw	r16, r28
    6816:	0b 58       	subi	r16, 0x8B	; 139
    6818:	1f 4f       	sbci	r17, 0xFF	; 255
    681a:	fe 01       	movw	r30, r28
    681c:	e9 58       	subi	r30, 0x89	; 137
    681e:	ff 4f       	sbci	r31, 0xFF	; 255
    6820:	60 81       	ld	r22, Z
    6822:	71 81       	ldd	r23, Z+1	; 0x01
    6824:	82 81       	ldd	r24, Z+2	; 0x02
    6826:	93 81       	ldd	r25, Z+3	; 0x03
    6828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    682c:	dc 01       	movw	r26, r24
    682e:	cb 01       	movw	r24, r22
    6830:	f8 01       	movw	r30, r16
    6832:	91 83       	std	Z+1, r25	; 0x01
    6834:	80 83       	st	Z, r24
    6836:	de 01       	movw	r26, r28
    6838:	af 58       	subi	r26, 0x8F	; 143
    683a:	bf 4f       	sbci	r27, 0xFF	; 255
    683c:	fe 01       	movw	r30, r28
    683e:	eb 58       	subi	r30, 0x8B	; 139
    6840:	ff 4f       	sbci	r31, 0xFF	; 255
    6842:	80 81       	ld	r24, Z
    6844:	91 81       	ldd	r25, Z+1	; 0x01
    6846:	11 96       	adiw	r26, 0x01	; 1
    6848:	9c 93       	st	X, r25
    684a:	8e 93       	st	-X, r24
    684c:	fe 01       	movw	r30, r28
    684e:	ef 58       	subi	r30, 0x8F	; 143
    6850:	ff 4f       	sbci	r31, 0xFF	; 255
    6852:	80 81       	ld	r24, Z
    6854:	91 81       	ldd	r25, Z+1	; 0x01
    6856:	01 97       	sbiw	r24, 0x01	; 1
    6858:	f1 f7       	brne	.-4      	; 0x6856 <main+0x46fa>
    685a:	fe 01       	movw	r30, r28
    685c:	ef 58       	subi	r30, 0x8F	; 143
    685e:	ff 4f       	sbci	r31, 0xFF	; 255
    6860:	91 83       	std	Z+1, r25	; 0x01
    6862:	80 83       	st	Z, r24
					_delay_ms(250);//to avoid the duplication of the pressed key

					if (timeout_flag == TRUE) //in case of the time is out before the user press a key
    6864:	80 91 ba 02 	lds	r24, 0x02BA
    6868:	81 30       	cpi	r24, 0x01	; 1
    686a:	09 f4       	brne	.+2      	; 0x686e <main+0x4712>
    686c:	19 c5       	rjmp	.+2610   	; 0x72a0 <main+0x5144>
					{
						break;//break the loop that ask for temperature
					}
					if (key_pressed <'0' || key_pressed >'9')//show wrong input message if the user entered non numeric value
    686e:	fe 01       	movw	r30, r28
    6870:	eb 55       	subi	r30, 0x5B	; 91
    6872:	fd 4f       	sbci	r31, 0xFD	; 253
    6874:	80 81       	ld	r24, Z
    6876:	80 33       	cpi	r24, 0x30	; 48
    6878:	38 f0       	brcs	.+14     	; 0x6888 <main+0x472c>
    687a:	fe 01       	movw	r30, r28
    687c:	eb 55       	subi	r30, 0x5B	; 91
    687e:	fd 4f       	sbci	r31, 0xFD	; 253
    6880:	80 81       	ld	r24, Z
    6882:	8a 33       	cpi	r24, 0x3A	; 58
    6884:	08 f4       	brcc	.+2      	; 0x6888 <main+0x472c>
    6886:	78 c1       	rjmp	.+752    	; 0x6b78 <main+0x4a1c>
					{
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    6888:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						LCD_vSend_string("Wrong input");//print error message
    688c:	82 ed       	ldi	r24, 0xD2	; 210
    688e:	91 e0       	ldi	r25, 0x01	; 1
    6890:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
						DIO_write(BUZZER_PORT,BUZZER_PIN,1);
    6894:	84 e4       	ldi	r24, 0x44	; 68
    6896:	66 e0       	ldi	r22, 0x06	; 6
    6898:	41 e0       	ldi	r20, 0x01	; 1
    689a:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    689e:	fe 01       	movw	r30, r28
    68a0:	e3 59       	subi	r30, 0x93	; 147
    68a2:	ff 4f       	sbci	r31, 0xFF	; 255
    68a4:	80 e0       	ldi	r24, 0x00	; 0
    68a6:	90 e0       	ldi	r25, 0x00	; 0
    68a8:	aa e7       	ldi	r26, 0x7A	; 122
    68aa:	b3 e4       	ldi	r27, 0x43	; 67
    68ac:	80 83       	st	Z, r24
    68ae:	91 83       	std	Z+1, r25	; 0x01
    68b0:	a2 83       	std	Z+2, r26	; 0x02
    68b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    68b4:	8e 01       	movw	r16, r28
    68b6:	07 59       	subi	r16, 0x97	; 151
    68b8:	1f 4f       	sbci	r17, 0xFF	; 255
    68ba:	fe 01       	movw	r30, r28
    68bc:	e3 59       	subi	r30, 0x93	; 147
    68be:	ff 4f       	sbci	r31, 0xFF	; 255
    68c0:	60 81       	ld	r22, Z
    68c2:	71 81       	ldd	r23, Z+1	; 0x01
    68c4:	82 81       	ldd	r24, Z+2	; 0x02
    68c6:	93 81       	ldd	r25, Z+3	; 0x03
    68c8:	20 e0       	ldi	r18, 0x00	; 0
    68ca:	30 e0       	ldi	r19, 0x00	; 0
    68cc:	4a ef       	ldi	r20, 0xFA	; 250
    68ce:	54 e4       	ldi	r21, 0x44	; 68
    68d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    68d4:	dc 01       	movw	r26, r24
    68d6:	cb 01       	movw	r24, r22
    68d8:	f8 01       	movw	r30, r16
    68da:	80 83       	st	Z, r24
    68dc:	91 83       	std	Z+1, r25	; 0x01
    68de:	a2 83       	std	Z+2, r26	; 0x02
    68e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    68e2:	fe 01       	movw	r30, r28
    68e4:	e7 59       	subi	r30, 0x97	; 151
    68e6:	ff 4f       	sbci	r31, 0xFF	; 255
    68e8:	60 81       	ld	r22, Z
    68ea:	71 81       	ldd	r23, Z+1	; 0x01
    68ec:	82 81       	ldd	r24, Z+2	; 0x02
    68ee:	93 81       	ldd	r25, Z+3	; 0x03
    68f0:	20 e0       	ldi	r18, 0x00	; 0
    68f2:	30 e0       	ldi	r19, 0x00	; 0
    68f4:	40 e8       	ldi	r20, 0x80	; 128
    68f6:	5f e3       	ldi	r21, 0x3F	; 63
    68f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    68fc:	88 23       	and	r24, r24
    68fe:	44 f4       	brge	.+16     	; 0x6910 <main+0x47b4>
		__ticks = 1;
    6900:	fe 01       	movw	r30, r28
    6902:	e9 59       	subi	r30, 0x99	; 153
    6904:	ff 4f       	sbci	r31, 0xFF	; 255
    6906:	81 e0       	ldi	r24, 0x01	; 1
    6908:	90 e0       	ldi	r25, 0x00	; 0
    690a:	91 83       	std	Z+1, r25	; 0x01
    690c:	80 83       	st	Z, r24
    690e:	64 c0       	rjmp	.+200    	; 0x69d8 <main+0x487c>
	else if (__tmp > 65535)
    6910:	fe 01       	movw	r30, r28
    6912:	e7 59       	subi	r30, 0x97	; 151
    6914:	ff 4f       	sbci	r31, 0xFF	; 255
    6916:	60 81       	ld	r22, Z
    6918:	71 81       	ldd	r23, Z+1	; 0x01
    691a:	82 81       	ldd	r24, Z+2	; 0x02
    691c:	93 81       	ldd	r25, Z+3	; 0x03
    691e:	20 e0       	ldi	r18, 0x00	; 0
    6920:	3f ef       	ldi	r19, 0xFF	; 255
    6922:	4f e7       	ldi	r20, 0x7F	; 127
    6924:	57 e4       	ldi	r21, 0x47	; 71
    6926:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    692a:	18 16       	cp	r1, r24
    692c:	0c f0       	brlt	.+2      	; 0x6930 <main+0x47d4>
    692e:	43 c0       	rjmp	.+134    	; 0x69b6 <main+0x485a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6930:	fe 01       	movw	r30, r28
    6932:	e3 59       	subi	r30, 0x93	; 147
    6934:	ff 4f       	sbci	r31, 0xFF	; 255
    6936:	60 81       	ld	r22, Z
    6938:	71 81       	ldd	r23, Z+1	; 0x01
    693a:	82 81       	ldd	r24, Z+2	; 0x02
    693c:	93 81       	ldd	r25, Z+3	; 0x03
    693e:	20 e0       	ldi	r18, 0x00	; 0
    6940:	30 e0       	ldi	r19, 0x00	; 0
    6942:	40 e2       	ldi	r20, 0x20	; 32
    6944:	51 e4       	ldi	r21, 0x41	; 65
    6946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    694a:	dc 01       	movw	r26, r24
    694c:	cb 01       	movw	r24, r22
    694e:	8e 01       	movw	r16, r28
    6950:	09 59       	subi	r16, 0x99	; 153
    6952:	1f 4f       	sbci	r17, 0xFF	; 255
    6954:	bc 01       	movw	r22, r24
    6956:	cd 01       	movw	r24, r26
    6958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    695c:	dc 01       	movw	r26, r24
    695e:	cb 01       	movw	r24, r22
    6960:	f8 01       	movw	r30, r16
    6962:	91 83       	std	Z+1, r25	; 0x01
    6964:	80 83       	st	Z, r24
    6966:	1f c0       	rjmp	.+62     	; 0x69a6 <main+0x484a>
    6968:	fe 01       	movw	r30, r28
    696a:	eb 59       	subi	r30, 0x9B	; 155
    696c:	ff 4f       	sbci	r31, 0xFF	; 255
    696e:	88 ec       	ldi	r24, 0xC8	; 200
    6970:	90 e0       	ldi	r25, 0x00	; 0
    6972:	91 83       	std	Z+1, r25	; 0x01
    6974:	80 83       	st	Z, r24
    6976:	fe 01       	movw	r30, r28
    6978:	eb 59       	subi	r30, 0x9B	; 155
    697a:	ff 4f       	sbci	r31, 0xFF	; 255
    697c:	80 81       	ld	r24, Z
    697e:	91 81       	ldd	r25, Z+1	; 0x01
    6980:	01 97       	sbiw	r24, 0x01	; 1
    6982:	f1 f7       	brne	.-4      	; 0x6980 <main+0x4824>
    6984:	fe 01       	movw	r30, r28
    6986:	eb 59       	subi	r30, 0x9B	; 155
    6988:	ff 4f       	sbci	r31, 0xFF	; 255
    698a:	91 83       	std	Z+1, r25	; 0x01
    698c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    698e:	de 01       	movw	r26, r28
    6990:	a9 59       	subi	r26, 0x99	; 153
    6992:	bf 4f       	sbci	r27, 0xFF	; 255
    6994:	fe 01       	movw	r30, r28
    6996:	e9 59       	subi	r30, 0x99	; 153
    6998:	ff 4f       	sbci	r31, 0xFF	; 255
    699a:	80 81       	ld	r24, Z
    699c:	91 81       	ldd	r25, Z+1	; 0x01
    699e:	01 97       	sbiw	r24, 0x01	; 1
    69a0:	11 96       	adiw	r26, 0x01	; 1
    69a2:	9c 93       	st	X, r25
    69a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    69a6:	fe 01       	movw	r30, r28
    69a8:	e9 59       	subi	r30, 0x99	; 153
    69aa:	ff 4f       	sbci	r31, 0xFF	; 255
    69ac:	80 81       	ld	r24, Z
    69ae:	91 81       	ldd	r25, Z+1	; 0x01
    69b0:	00 97       	sbiw	r24, 0x00	; 0
    69b2:	d1 f6       	brne	.-76     	; 0x6968 <main+0x480c>
    69b4:	27 c0       	rjmp	.+78     	; 0x6a04 <main+0x48a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    69b6:	8e 01       	movw	r16, r28
    69b8:	09 59       	subi	r16, 0x99	; 153
    69ba:	1f 4f       	sbci	r17, 0xFF	; 255
    69bc:	fe 01       	movw	r30, r28
    69be:	e7 59       	subi	r30, 0x97	; 151
    69c0:	ff 4f       	sbci	r31, 0xFF	; 255
    69c2:	60 81       	ld	r22, Z
    69c4:	71 81       	ldd	r23, Z+1	; 0x01
    69c6:	82 81       	ldd	r24, Z+2	; 0x02
    69c8:	93 81       	ldd	r25, Z+3	; 0x03
    69ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    69ce:	dc 01       	movw	r26, r24
    69d0:	cb 01       	movw	r24, r22
    69d2:	f8 01       	movw	r30, r16
    69d4:	91 83       	std	Z+1, r25	; 0x01
    69d6:	80 83       	st	Z, r24
    69d8:	de 01       	movw	r26, r28
    69da:	ad 59       	subi	r26, 0x9D	; 157
    69dc:	bf 4f       	sbci	r27, 0xFF	; 255
    69de:	fe 01       	movw	r30, r28
    69e0:	e9 59       	subi	r30, 0x99	; 153
    69e2:	ff 4f       	sbci	r31, 0xFF	; 255
    69e4:	80 81       	ld	r24, Z
    69e6:	91 81       	ldd	r25, Z+1	; 0x01
    69e8:	8d 93       	st	X+, r24
    69ea:	9c 93       	st	X, r25
    69ec:	fe 01       	movw	r30, r28
    69ee:	ed 59       	subi	r30, 0x9D	; 157
    69f0:	ff 4f       	sbci	r31, 0xFF	; 255
    69f2:	80 81       	ld	r24, Z
    69f4:	91 81       	ldd	r25, Z+1	; 0x01
    69f6:	01 97       	sbiw	r24, 0x01	; 1
    69f8:	f1 f7       	brne	.-4      	; 0x69f6 <main+0x489a>
    69fa:	fe 01       	movw	r30, r28
    69fc:	ed 59       	subi	r30, 0x9D	; 157
    69fe:	ff 4f       	sbci	r31, 0xFF	; 255
    6a00:	91 83       	std	Z+1, r25	; 0x01
    6a02:	80 83       	st	Z, r24
						_delay_ms(250);
						DIO_write(BUZZER_PORT,BUZZER_PIN,0);
    6a04:	84 e4       	ldi	r24, 0x44	; 68
    6a06:	66 e0       	ldi	r22, 0x06	; 6
    6a08:	40 e0       	ldi	r20, 0x00	; 0
    6a0a:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    6a0e:	fe 01       	movw	r30, r28
    6a10:	e1 5a       	subi	r30, 0xA1	; 161
    6a12:	ff 4f       	sbci	r31, 0xFF	; 255
    6a14:	80 e0       	ldi	r24, 0x00	; 0
    6a16:	90 e0       	ldi	r25, 0x00	; 0
    6a18:	aa e7       	ldi	r26, 0x7A	; 122
    6a1a:	b3 e4       	ldi	r27, 0x43	; 67
    6a1c:	80 83       	st	Z, r24
    6a1e:	91 83       	std	Z+1, r25	; 0x01
    6a20:	a2 83       	std	Z+2, r26	; 0x02
    6a22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a24:	8e 01       	movw	r16, r28
    6a26:	05 5a       	subi	r16, 0xA5	; 165
    6a28:	1f 4f       	sbci	r17, 0xFF	; 255
    6a2a:	fe 01       	movw	r30, r28
    6a2c:	e1 5a       	subi	r30, 0xA1	; 161
    6a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    6a30:	60 81       	ld	r22, Z
    6a32:	71 81       	ldd	r23, Z+1	; 0x01
    6a34:	82 81       	ldd	r24, Z+2	; 0x02
    6a36:	93 81       	ldd	r25, Z+3	; 0x03
    6a38:	20 e0       	ldi	r18, 0x00	; 0
    6a3a:	30 e0       	ldi	r19, 0x00	; 0
    6a3c:	4a ef       	ldi	r20, 0xFA	; 250
    6a3e:	54 e4       	ldi	r21, 0x44	; 68
    6a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a44:	dc 01       	movw	r26, r24
    6a46:	cb 01       	movw	r24, r22
    6a48:	f8 01       	movw	r30, r16
    6a4a:	80 83       	st	Z, r24
    6a4c:	91 83       	std	Z+1, r25	; 0x01
    6a4e:	a2 83       	std	Z+2, r26	; 0x02
    6a50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6a52:	fe 01       	movw	r30, r28
    6a54:	e5 5a       	subi	r30, 0xA5	; 165
    6a56:	ff 4f       	sbci	r31, 0xFF	; 255
    6a58:	60 81       	ld	r22, Z
    6a5a:	71 81       	ldd	r23, Z+1	; 0x01
    6a5c:	82 81       	ldd	r24, Z+2	; 0x02
    6a5e:	93 81       	ldd	r25, Z+3	; 0x03
    6a60:	20 e0       	ldi	r18, 0x00	; 0
    6a62:	30 e0       	ldi	r19, 0x00	; 0
    6a64:	40 e8       	ldi	r20, 0x80	; 128
    6a66:	5f e3       	ldi	r21, 0x3F	; 63
    6a68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6a6c:	88 23       	and	r24, r24
    6a6e:	44 f4       	brge	.+16     	; 0x6a80 <main+0x4924>
		__ticks = 1;
    6a70:	fe 01       	movw	r30, r28
    6a72:	e7 5a       	subi	r30, 0xA7	; 167
    6a74:	ff 4f       	sbci	r31, 0xFF	; 255
    6a76:	81 e0       	ldi	r24, 0x01	; 1
    6a78:	90 e0       	ldi	r25, 0x00	; 0
    6a7a:	91 83       	std	Z+1, r25	; 0x01
    6a7c:	80 83       	st	Z, r24
    6a7e:	64 c0       	rjmp	.+200    	; 0x6b48 <main+0x49ec>
	else if (__tmp > 65535)
    6a80:	fe 01       	movw	r30, r28
    6a82:	e5 5a       	subi	r30, 0xA5	; 165
    6a84:	ff 4f       	sbci	r31, 0xFF	; 255
    6a86:	60 81       	ld	r22, Z
    6a88:	71 81       	ldd	r23, Z+1	; 0x01
    6a8a:	82 81       	ldd	r24, Z+2	; 0x02
    6a8c:	93 81       	ldd	r25, Z+3	; 0x03
    6a8e:	20 e0       	ldi	r18, 0x00	; 0
    6a90:	3f ef       	ldi	r19, 0xFF	; 255
    6a92:	4f e7       	ldi	r20, 0x7F	; 127
    6a94:	57 e4       	ldi	r21, 0x47	; 71
    6a96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6a9a:	18 16       	cp	r1, r24
    6a9c:	0c f0       	brlt	.+2      	; 0x6aa0 <main+0x4944>
    6a9e:	43 c0       	rjmp	.+134    	; 0x6b26 <main+0x49ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6aa0:	fe 01       	movw	r30, r28
    6aa2:	e1 5a       	subi	r30, 0xA1	; 161
    6aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    6aa6:	60 81       	ld	r22, Z
    6aa8:	71 81       	ldd	r23, Z+1	; 0x01
    6aaa:	82 81       	ldd	r24, Z+2	; 0x02
    6aac:	93 81       	ldd	r25, Z+3	; 0x03
    6aae:	20 e0       	ldi	r18, 0x00	; 0
    6ab0:	30 e0       	ldi	r19, 0x00	; 0
    6ab2:	40 e2       	ldi	r20, 0x20	; 32
    6ab4:	51 e4       	ldi	r21, 0x41	; 65
    6ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6aba:	dc 01       	movw	r26, r24
    6abc:	cb 01       	movw	r24, r22
    6abe:	8e 01       	movw	r16, r28
    6ac0:	07 5a       	subi	r16, 0xA7	; 167
    6ac2:	1f 4f       	sbci	r17, 0xFF	; 255
    6ac4:	bc 01       	movw	r22, r24
    6ac6:	cd 01       	movw	r24, r26
    6ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6acc:	dc 01       	movw	r26, r24
    6ace:	cb 01       	movw	r24, r22
    6ad0:	f8 01       	movw	r30, r16
    6ad2:	91 83       	std	Z+1, r25	; 0x01
    6ad4:	80 83       	st	Z, r24
    6ad6:	1f c0       	rjmp	.+62     	; 0x6b16 <main+0x49ba>
    6ad8:	fe 01       	movw	r30, r28
    6ada:	e9 5a       	subi	r30, 0xA9	; 169
    6adc:	ff 4f       	sbci	r31, 0xFF	; 255
    6ade:	88 ec       	ldi	r24, 0xC8	; 200
    6ae0:	90 e0       	ldi	r25, 0x00	; 0
    6ae2:	91 83       	std	Z+1, r25	; 0x01
    6ae4:	80 83       	st	Z, r24
    6ae6:	fe 01       	movw	r30, r28
    6ae8:	e9 5a       	subi	r30, 0xA9	; 169
    6aea:	ff 4f       	sbci	r31, 0xFF	; 255
    6aec:	80 81       	ld	r24, Z
    6aee:	91 81       	ldd	r25, Z+1	; 0x01
    6af0:	01 97       	sbiw	r24, 0x01	; 1
    6af2:	f1 f7       	brne	.-4      	; 0x6af0 <main+0x4994>
    6af4:	fe 01       	movw	r30, r28
    6af6:	e9 5a       	subi	r30, 0xA9	; 169
    6af8:	ff 4f       	sbci	r31, 0xFF	; 255
    6afa:	91 83       	std	Z+1, r25	; 0x01
    6afc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6afe:	de 01       	movw	r26, r28
    6b00:	a7 5a       	subi	r26, 0xA7	; 167
    6b02:	bf 4f       	sbci	r27, 0xFF	; 255
    6b04:	fe 01       	movw	r30, r28
    6b06:	e7 5a       	subi	r30, 0xA7	; 167
    6b08:	ff 4f       	sbci	r31, 0xFF	; 255
    6b0a:	80 81       	ld	r24, Z
    6b0c:	91 81       	ldd	r25, Z+1	; 0x01
    6b0e:	01 97       	sbiw	r24, 0x01	; 1
    6b10:	11 96       	adiw	r26, 0x01	; 1
    6b12:	9c 93       	st	X, r25
    6b14:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b16:	fe 01       	movw	r30, r28
    6b18:	e7 5a       	subi	r30, 0xA7	; 167
    6b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    6b1c:	80 81       	ld	r24, Z
    6b1e:	91 81       	ldd	r25, Z+1	; 0x01
    6b20:	00 97       	sbiw	r24, 0x00	; 0
    6b22:	d1 f6       	brne	.-76     	; 0x6ad8 <main+0x497c>
    6b24:	b2 c3       	rjmp	.+1892   	; 0x728a <main+0x512e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b26:	8e 01       	movw	r16, r28
    6b28:	07 5a       	subi	r16, 0xA7	; 167
    6b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    6b2c:	fe 01       	movw	r30, r28
    6b2e:	e5 5a       	subi	r30, 0xA5	; 165
    6b30:	ff 4f       	sbci	r31, 0xFF	; 255
    6b32:	60 81       	ld	r22, Z
    6b34:	71 81       	ldd	r23, Z+1	; 0x01
    6b36:	82 81       	ldd	r24, Z+2	; 0x02
    6b38:	93 81       	ldd	r25, Z+3	; 0x03
    6b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b3e:	dc 01       	movw	r26, r24
    6b40:	cb 01       	movw	r24, r22
    6b42:	f8 01       	movw	r30, r16
    6b44:	91 83       	std	Z+1, r25	; 0x01
    6b46:	80 83       	st	Z, r24
    6b48:	de 01       	movw	r26, r28
    6b4a:	ab 5a       	subi	r26, 0xAB	; 171
    6b4c:	bf 4f       	sbci	r27, 0xFF	; 255
    6b4e:	fe 01       	movw	r30, r28
    6b50:	e7 5a       	subi	r30, 0xA7	; 167
    6b52:	ff 4f       	sbci	r31, 0xFF	; 255
    6b54:	80 81       	ld	r24, Z
    6b56:	91 81       	ldd	r25, Z+1	; 0x01
    6b58:	11 96       	adiw	r26, 0x01	; 1
    6b5a:	9c 93       	st	X, r25
    6b5c:	8e 93       	st	-X, r24
    6b5e:	fe 01       	movw	r30, r28
    6b60:	eb 5a       	subi	r30, 0xAB	; 171
    6b62:	ff 4f       	sbci	r31, 0xFF	; 255
    6b64:	80 81       	ld	r24, Z
    6b66:	91 81       	ldd	r25, Z+1	; 0x01
    6b68:	01 97       	sbiw	r24, 0x01	; 1
    6b6a:	f1 f7       	brne	.-4      	; 0x6b68 <main+0x4a0c>
    6b6c:	fe 01       	movw	r30, r28
    6b6e:	eb 5a       	subi	r30, 0xAB	; 171
    6b70:	ff 4f       	sbci	r31, 0xFF	; 255
    6b72:	91 83       	std	Z+1, r25	; 0x01
    6b74:	80 83       	st	Z, r24
    6b76:	89 c3       	rjmp	.+1810   	; 0x728a <main+0x512e>
						_delay_ms(250);//Halt the system for the given time in (ms)
						continue;//return to #while (temperature==0)# line 672
					}
					else//if the value is valid
					{
						LCD_vSend_char(key_pressed);//print the value on the lcd
    6b78:	fe 01       	movw	r30, r28
    6b7a:	eb 55       	subi	r30, 0x5B	; 91
    6b7c:	fd 4f       	sbci	r31, 0xFD	; 253
    6b7e:	80 81       	ld	r24, Z
    6b80:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
						temp_tens = key_pressed-ASCII_ZERO;//save the entered value
    6b84:	de 01       	movw	r26, r28
    6b86:	a7 55       	subi	r26, 0x57	; 87
    6b88:	bd 4f       	sbci	r27, 0xFD	; 253
    6b8a:	fe 01       	movw	r30, r28
    6b8c:	eb 55       	subi	r30, 0x5B	; 91
    6b8e:	fd 4f       	sbci	r31, 0xFD	; 253
    6b90:	80 81       	ld	r24, Z
    6b92:	80 53       	subi	r24, 0x30	; 48
    6b94:	8c 93       	st	X, r24
						key_pressed = NOT_PRESSED;//set the key pressed to the default value
    6b96:	fe 01       	movw	r30, r28
    6b98:	eb 55       	subi	r30, 0x5B	; 91
    6b9a:	fd 4f       	sbci	r31, 0xFD	; 253
    6b9c:	8f ef       	ldi	r24, 0xFF	; 255
    6b9e:	80 83       	st	Z, r24
					}
					/*******************************************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
    6ba0:	fe 01       	movw	r30, r28
    6ba2:	e9 55       	subi	r30, 0x59	; 89
    6ba4:	fd 4f       	sbci	r31, 0xFD	; 253
    6ba6:	80 81       	ld	r24, Z
    6ba8:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <u8GetKeyPressed>
    6bac:	fe 01       	movw	r30, r28
    6bae:	eb 55       	subi	r30, 0x5B	; 91
    6bb0:	fd 4f       	sbci	r31, 0xFD	; 253
    6bb2:	80 83       	st	Z, r24
    6bb4:	fe 01       	movw	r30, r28
    6bb6:	ef 5a       	subi	r30, 0xAF	; 175
    6bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    6bba:	80 e0       	ldi	r24, 0x00	; 0
    6bbc:	90 e0       	ldi	r25, 0x00	; 0
    6bbe:	aa e7       	ldi	r26, 0x7A	; 122
    6bc0:	b3 e4       	ldi	r27, 0x43	; 67
    6bc2:	80 83       	st	Z, r24
    6bc4:	91 83       	std	Z+1, r25	; 0x01
    6bc6:	a2 83       	std	Z+2, r26	; 0x02
    6bc8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6bca:	8e 01       	movw	r16, r28
    6bcc:	03 5b       	subi	r16, 0xB3	; 179
    6bce:	1f 4f       	sbci	r17, 0xFF	; 255
    6bd0:	fe 01       	movw	r30, r28
    6bd2:	ef 5a       	subi	r30, 0xAF	; 175
    6bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    6bd6:	60 81       	ld	r22, Z
    6bd8:	71 81       	ldd	r23, Z+1	; 0x01
    6bda:	82 81       	ldd	r24, Z+2	; 0x02
    6bdc:	93 81       	ldd	r25, Z+3	; 0x03
    6bde:	20 e0       	ldi	r18, 0x00	; 0
    6be0:	30 e0       	ldi	r19, 0x00	; 0
    6be2:	4a ef       	ldi	r20, 0xFA	; 250
    6be4:	54 e4       	ldi	r21, 0x44	; 68
    6be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6bea:	dc 01       	movw	r26, r24
    6bec:	cb 01       	movw	r24, r22
    6bee:	f8 01       	movw	r30, r16
    6bf0:	80 83       	st	Z, r24
    6bf2:	91 83       	std	Z+1, r25	; 0x01
    6bf4:	a2 83       	std	Z+2, r26	; 0x02
    6bf6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6bf8:	fe 01       	movw	r30, r28
    6bfa:	e3 5b       	subi	r30, 0xB3	; 179
    6bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    6bfe:	60 81       	ld	r22, Z
    6c00:	71 81       	ldd	r23, Z+1	; 0x01
    6c02:	82 81       	ldd	r24, Z+2	; 0x02
    6c04:	93 81       	ldd	r25, Z+3	; 0x03
    6c06:	20 e0       	ldi	r18, 0x00	; 0
    6c08:	30 e0       	ldi	r19, 0x00	; 0
    6c0a:	40 e8       	ldi	r20, 0x80	; 128
    6c0c:	5f e3       	ldi	r21, 0x3F	; 63
    6c0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6c12:	88 23       	and	r24, r24
    6c14:	44 f4       	brge	.+16     	; 0x6c26 <main+0x4aca>
		__ticks = 1;
    6c16:	fe 01       	movw	r30, r28
    6c18:	e5 5b       	subi	r30, 0xB5	; 181
    6c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    6c1c:	81 e0       	ldi	r24, 0x01	; 1
    6c1e:	90 e0       	ldi	r25, 0x00	; 0
    6c20:	91 83       	std	Z+1, r25	; 0x01
    6c22:	80 83       	st	Z, r24
    6c24:	64 c0       	rjmp	.+200    	; 0x6cee <main+0x4b92>
	else if (__tmp > 65535)
    6c26:	fe 01       	movw	r30, r28
    6c28:	e3 5b       	subi	r30, 0xB3	; 179
    6c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    6c2c:	60 81       	ld	r22, Z
    6c2e:	71 81       	ldd	r23, Z+1	; 0x01
    6c30:	82 81       	ldd	r24, Z+2	; 0x02
    6c32:	93 81       	ldd	r25, Z+3	; 0x03
    6c34:	20 e0       	ldi	r18, 0x00	; 0
    6c36:	3f ef       	ldi	r19, 0xFF	; 255
    6c38:	4f e7       	ldi	r20, 0x7F	; 127
    6c3a:	57 e4       	ldi	r21, 0x47	; 71
    6c3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6c40:	18 16       	cp	r1, r24
    6c42:	0c f0       	brlt	.+2      	; 0x6c46 <main+0x4aea>
    6c44:	43 c0       	rjmp	.+134    	; 0x6ccc <main+0x4b70>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c46:	fe 01       	movw	r30, r28
    6c48:	ef 5a       	subi	r30, 0xAF	; 175
    6c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    6c4c:	60 81       	ld	r22, Z
    6c4e:	71 81       	ldd	r23, Z+1	; 0x01
    6c50:	82 81       	ldd	r24, Z+2	; 0x02
    6c52:	93 81       	ldd	r25, Z+3	; 0x03
    6c54:	20 e0       	ldi	r18, 0x00	; 0
    6c56:	30 e0       	ldi	r19, 0x00	; 0
    6c58:	40 e2       	ldi	r20, 0x20	; 32
    6c5a:	51 e4       	ldi	r21, 0x41	; 65
    6c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c60:	dc 01       	movw	r26, r24
    6c62:	cb 01       	movw	r24, r22
    6c64:	8e 01       	movw	r16, r28
    6c66:	05 5b       	subi	r16, 0xB5	; 181
    6c68:	1f 4f       	sbci	r17, 0xFF	; 255
    6c6a:	bc 01       	movw	r22, r24
    6c6c:	cd 01       	movw	r24, r26
    6c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c72:	dc 01       	movw	r26, r24
    6c74:	cb 01       	movw	r24, r22
    6c76:	f8 01       	movw	r30, r16
    6c78:	91 83       	std	Z+1, r25	; 0x01
    6c7a:	80 83       	st	Z, r24
    6c7c:	1f c0       	rjmp	.+62     	; 0x6cbc <main+0x4b60>
    6c7e:	fe 01       	movw	r30, r28
    6c80:	e7 5b       	subi	r30, 0xB7	; 183
    6c82:	ff 4f       	sbci	r31, 0xFF	; 255
    6c84:	88 ec       	ldi	r24, 0xC8	; 200
    6c86:	90 e0       	ldi	r25, 0x00	; 0
    6c88:	91 83       	std	Z+1, r25	; 0x01
    6c8a:	80 83       	st	Z, r24
    6c8c:	fe 01       	movw	r30, r28
    6c8e:	e7 5b       	subi	r30, 0xB7	; 183
    6c90:	ff 4f       	sbci	r31, 0xFF	; 255
    6c92:	80 81       	ld	r24, Z
    6c94:	91 81       	ldd	r25, Z+1	; 0x01
    6c96:	01 97       	sbiw	r24, 0x01	; 1
    6c98:	f1 f7       	brne	.-4      	; 0x6c96 <main+0x4b3a>
    6c9a:	fe 01       	movw	r30, r28
    6c9c:	e7 5b       	subi	r30, 0xB7	; 183
    6c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    6ca0:	91 83       	std	Z+1, r25	; 0x01
    6ca2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ca4:	de 01       	movw	r26, r28
    6ca6:	a5 5b       	subi	r26, 0xB5	; 181
    6ca8:	bf 4f       	sbci	r27, 0xFF	; 255
    6caa:	fe 01       	movw	r30, r28
    6cac:	e5 5b       	subi	r30, 0xB5	; 181
    6cae:	ff 4f       	sbci	r31, 0xFF	; 255
    6cb0:	80 81       	ld	r24, Z
    6cb2:	91 81       	ldd	r25, Z+1	; 0x01
    6cb4:	01 97       	sbiw	r24, 0x01	; 1
    6cb6:	11 96       	adiw	r26, 0x01	; 1
    6cb8:	9c 93       	st	X, r25
    6cba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6cbc:	fe 01       	movw	r30, r28
    6cbe:	e5 5b       	subi	r30, 0xB5	; 181
    6cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    6cc2:	80 81       	ld	r24, Z
    6cc4:	91 81       	ldd	r25, Z+1	; 0x01
    6cc6:	00 97       	sbiw	r24, 0x00	; 0
    6cc8:	d1 f6       	brne	.-76     	; 0x6c7e <main+0x4b22>
    6cca:	28 c0       	rjmp	.+80     	; 0x6d1c <main+0x4bc0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6ccc:	8e 01       	movw	r16, r28
    6cce:	05 5b       	subi	r16, 0xB5	; 181
    6cd0:	1f 4f       	sbci	r17, 0xFF	; 255
    6cd2:	fe 01       	movw	r30, r28
    6cd4:	e3 5b       	subi	r30, 0xB3	; 179
    6cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    6cd8:	60 81       	ld	r22, Z
    6cda:	71 81       	ldd	r23, Z+1	; 0x01
    6cdc:	82 81       	ldd	r24, Z+2	; 0x02
    6cde:	93 81       	ldd	r25, Z+3	; 0x03
    6ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ce4:	dc 01       	movw	r26, r24
    6ce6:	cb 01       	movw	r24, r22
    6ce8:	f8 01       	movw	r30, r16
    6cea:	91 83       	std	Z+1, r25	; 0x01
    6cec:	80 83       	st	Z, r24
    6cee:	de 01       	movw	r26, r28
    6cf0:	a9 5b       	subi	r26, 0xB9	; 185
    6cf2:	bf 4f       	sbci	r27, 0xFF	; 255
    6cf4:	fe 01       	movw	r30, r28
    6cf6:	e5 5b       	subi	r30, 0xB5	; 181
    6cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    6cfa:	80 81       	ld	r24, Z
    6cfc:	91 81       	ldd	r25, Z+1	; 0x01
    6cfe:	11 96       	adiw	r26, 0x01	; 1
    6d00:	9c 93       	st	X, r25
    6d02:	8e 93       	st	-X, r24
    6d04:	fe 01       	movw	r30, r28
    6d06:	e9 5b       	subi	r30, 0xB9	; 185
    6d08:	ff 4f       	sbci	r31, 0xFF	; 255
    6d0a:	80 81       	ld	r24, Z
    6d0c:	91 81       	ldd	r25, Z+1	; 0x01
    6d0e:	01 97       	sbiw	r24, 0x01	; 1
    6d10:	f1 f7       	brne	.-4      	; 0x6d0e <main+0x4bb2>
    6d12:	fe 01       	movw	r30, r28
    6d14:	e9 5b       	subi	r30, 0xB9	; 185
    6d16:	ff 4f       	sbci	r31, 0xFF	; 255
    6d18:	91 83       	std	Z+1, r25	; 0x01
    6d1a:	80 83       	st	Z, r24
					_delay_ms(250);//to avoid the duplication of the pressed key

					if (timeout_flag == TRUE)//if the user session is timeout
    6d1c:	80 91 ba 02 	lds	r24, 0x02BA
    6d20:	81 30       	cpi	r24, 0x01	; 1
    6d22:	09 f4       	brne	.+2      	; 0x6d26 <main+0x4bca>
    6d24:	bd c2       	rjmp	.+1402   	; 0x72a0 <main+0x5144>
					{
						break;//break the loop that ask for temperature
					}
					if ((key_pressed <'0' || key_pressed >'9'))//show wrong input message if the user entered non numeric value
    6d26:	fe 01       	movw	r30, r28
    6d28:	eb 55       	subi	r30, 0x5B	; 91
    6d2a:	fd 4f       	sbci	r31, 0xFD	; 253
    6d2c:	80 81       	ld	r24, Z
    6d2e:	80 33       	cpi	r24, 0x30	; 48
    6d30:	38 f0       	brcs	.+14     	; 0x6d40 <main+0x4be4>
    6d32:	fe 01       	movw	r30, r28
    6d34:	eb 55       	subi	r30, 0x5B	; 91
    6d36:	fd 4f       	sbci	r31, 0xFD	; 253
    6d38:	80 81       	ld	r24, Z
    6d3a:	8a 33       	cpi	r24, 0x3A	; 58
    6d3c:	08 f4       	brcc	.+2      	; 0x6d40 <main+0x4be4>
    6d3e:	08 c1       	rjmp	.+528    	; 0x6f50 <main+0x4df4>
					{
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    6d40:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						LCD_vSend_string("Wrong input");//print error message
    6d44:	82 ed       	ldi	r24, 0xD2	; 210
    6d46:	91 e0       	ldi	r25, 0x01	; 1
    6d48:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
						DIO_write(BUZZER_PORT,BUZZER_PIN,1);
    6d4c:	84 e4       	ldi	r24, 0x44	; 68
    6d4e:	66 e0       	ldi	r22, 0x06	; 6
    6d50:	41 e0       	ldi	r20, 0x01	; 1
    6d52:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    6d56:	fe 01       	movw	r30, r28
    6d58:	ed 5b       	subi	r30, 0xBD	; 189
    6d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    6d5c:	80 e0       	ldi	r24, 0x00	; 0
    6d5e:	90 e0       	ldi	r25, 0x00	; 0
    6d60:	aa e7       	ldi	r26, 0x7A	; 122
    6d62:	b3 e4       	ldi	r27, 0x43	; 67
    6d64:	80 83       	st	Z, r24
    6d66:	91 83       	std	Z+1, r25	; 0x01
    6d68:	a2 83       	std	Z+2, r26	; 0x02
    6d6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6d6c:	8e 01       	movw	r16, r28
    6d6e:	01 5c       	subi	r16, 0xC1	; 193
    6d70:	1f 4f       	sbci	r17, 0xFF	; 255
    6d72:	fe 01       	movw	r30, r28
    6d74:	ed 5b       	subi	r30, 0xBD	; 189
    6d76:	ff 4f       	sbci	r31, 0xFF	; 255
    6d78:	60 81       	ld	r22, Z
    6d7a:	71 81       	ldd	r23, Z+1	; 0x01
    6d7c:	82 81       	ldd	r24, Z+2	; 0x02
    6d7e:	93 81       	ldd	r25, Z+3	; 0x03
    6d80:	20 e0       	ldi	r18, 0x00	; 0
    6d82:	30 e0       	ldi	r19, 0x00	; 0
    6d84:	4a ef       	ldi	r20, 0xFA	; 250
    6d86:	54 e4       	ldi	r21, 0x44	; 68
    6d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d8c:	dc 01       	movw	r26, r24
    6d8e:	cb 01       	movw	r24, r22
    6d90:	f8 01       	movw	r30, r16
    6d92:	80 83       	st	Z, r24
    6d94:	91 83       	std	Z+1, r25	; 0x01
    6d96:	a2 83       	std	Z+2, r26	; 0x02
    6d98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6d9a:	fe 01       	movw	r30, r28
    6d9c:	ff 96       	adiw	r30, 0x3f	; 63
    6d9e:	60 81       	ld	r22, Z
    6da0:	71 81       	ldd	r23, Z+1	; 0x01
    6da2:	82 81       	ldd	r24, Z+2	; 0x02
    6da4:	93 81       	ldd	r25, Z+3	; 0x03
    6da6:	20 e0       	ldi	r18, 0x00	; 0
    6da8:	30 e0       	ldi	r19, 0x00	; 0
    6daa:	40 e8       	ldi	r20, 0x80	; 128
    6dac:	5f e3       	ldi	r21, 0x3F	; 63
    6dae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6db2:	88 23       	and	r24, r24
    6db4:	2c f4       	brge	.+10     	; 0x6dc0 <main+0x4c64>
		__ticks = 1;
    6db6:	81 e0       	ldi	r24, 0x01	; 1
    6db8:	90 e0       	ldi	r25, 0x00	; 0
    6dba:	9e af       	std	Y+62, r25	; 0x3e
    6dbc:	8d af       	std	Y+61, r24	; 0x3d
    6dbe:	46 c0       	rjmp	.+140    	; 0x6e4c <main+0x4cf0>
	else if (__tmp > 65535)
    6dc0:	fe 01       	movw	r30, r28
    6dc2:	ff 96       	adiw	r30, 0x3f	; 63
    6dc4:	60 81       	ld	r22, Z
    6dc6:	71 81       	ldd	r23, Z+1	; 0x01
    6dc8:	82 81       	ldd	r24, Z+2	; 0x02
    6dca:	93 81       	ldd	r25, Z+3	; 0x03
    6dcc:	20 e0       	ldi	r18, 0x00	; 0
    6dce:	3f ef       	ldi	r19, 0xFF	; 255
    6dd0:	4f e7       	ldi	r20, 0x7F	; 127
    6dd2:	57 e4       	ldi	r21, 0x47	; 71
    6dd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6dd8:	18 16       	cp	r1, r24
    6dda:	64 f5       	brge	.+88     	; 0x6e34 <main+0x4cd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ddc:	fe 01       	movw	r30, r28
    6dde:	ed 5b       	subi	r30, 0xBD	; 189
    6de0:	ff 4f       	sbci	r31, 0xFF	; 255
    6de2:	60 81       	ld	r22, Z
    6de4:	71 81       	ldd	r23, Z+1	; 0x01
    6de6:	82 81       	ldd	r24, Z+2	; 0x02
    6de8:	93 81       	ldd	r25, Z+3	; 0x03
    6dea:	20 e0       	ldi	r18, 0x00	; 0
    6dec:	30 e0       	ldi	r19, 0x00	; 0
    6dee:	40 e2       	ldi	r20, 0x20	; 32
    6df0:	51 e4       	ldi	r21, 0x41	; 65
    6df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6df6:	dc 01       	movw	r26, r24
    6df8:	cb 01       	movw	r24, r22
    6dfa:	bc 01       	movw	r22, r24
    6dfc:	cd 01       	movw	r24, r26
    6dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e02:	dc 01       	movw	r26, r24
    6e04:	cb 01       	movw	r24, r22
    6e06:	9e af       	std	Y+62, r25	; 0x3e
    6e08:	8d af       	std	Y+61, r24	; 0x3d
    6e0a:	0f c0       	rjmp	.+30     	; 0x6e2a <main+0x4cce>
    6e0c:	88 ec       	ldi	r24, 0xC8	; 200
    6e0e:	90 e0       	ldi	r25, 0x00	; 0
    6e10:	9c af       	std	Y+60, r25	; 0x3c
    6e12:	8b af       	std	Y+59, r24	; 0x3b
    6e14:	8b ad       	ldd	r24, Y+59	; 0x3b
    6e16:	9c ad       	ldd	r25, Y+60	; 0x3c
    6e18:	01 97       	sbiw	r24, 0x01	; 1
    6e1a:	f1 f7       	brne	.-4      	; 0x6e18 <main+0x4cbc>
    6e1c:	9c af       	std	Y+60, r25	; 0x3c
    6e1e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6e20:	8d ad       	ldd	r24, Y+61	; 0x3d
    6e22:	9e ad       	ldd	r25, Y+62	; 0x3e
    6e24:	01 97       	sbiw	r24, 0x01	; 1
    6e26:	9e af       	std	Y+62, r25	; 0x3e
    6e28:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6e2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    6e2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    6e2e:	00 97       	sbiw	r24, 0x00	; 0
    6e30:	69 f7       	brne	.-38     	; 0x6e0c <main+0x4cb0>
    6e32:	16 c0       	rjmp	.+44     	; 0x6e60 <main+0x4d04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6e34:	fe 01       	movw	r30, r28
    6e36:	ff 96       	adiw	r30, 0x3f	; 63
    6e38:	60 81       	ld	r22, Z
    6e3a:	71 81       	ldd	r23, Z+1	; 0x01
    6e3c:	82 81       	ldd	r24, Z+2	; 0x02
    6e3e:	93 81       	ldd	r25, Z+3	; 0x03
    6e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e44:	dc 01       	movw	r26, r24
    6e46:	cb 01       	movw	r24, r22
    6e48:	9e af       	std	Y+62, r25	; 0x3e
    6e4a:	8d af       	std	Y+61, r24	; 0x3d
    6e4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    6e4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    6e50:	9a af       	std	Y+58, r25	; 0x3a
    6e52:	89 af       	std	Y+57, r24	; 0x39
    6e54:	89 ad       	ldd	r24, Y+57	; 0x39
    6e56:	9a ad       	ldd	r25, Y+58	; 0x3a
    6e58:	01 97       	sbiw	r24, 0x01	; 1
    6e5a:	f1 f7       	brne	.-4      	; 0x6e58 <main+0x4cfc>
    6e5c:	9a af       	std	Y+58, r25	; 0x3a
    6e5e:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(250);
						DIO_write(BUZZER_PORT,BUZZER_PIN,0);
    6e60:	84 e4       	ldi	r24, 0x44	; 68
    6e62:	66 e0       	ldi	r22, 0x06	; 6
    6e64:	40 e0       	ldi	r20, 0x00	; 0
    6e66:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    6e6a:	80 e0       	ldi	r24, 0x00	; 0
    6e6c:	90 e0       	ldi	r25, 0x00	; 0
    6e6e:	aa e7       	ldi	r26, 0x7A	; 122
    6e70:	b3 e4       	ldi	r27, 0x43	; 67
    6e72:	8d ab       	std	Y+53, r24	; 0x35
    6e74:	9e ab       	std	Y+54, r25	; 0x36
    6e76:	af ab       	std	Y+55, r26	; 0x37
    6e78:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6e7a:	6d a9       	ldd	r22, Y+53	; 0x35
    6e7c:	7e a9       	ldd	r23, Y+54	; 0x36
    6e7e:	8f a9       	ldd	r24, Y+55	; 0x37
    6e80:	98 ad       	ldd	r25, Y+56	; 0x38
    6e82:	20 e0       	ldi	r18, 0x00	; 0
    6e84:	30 e0       	ldi	r19, 0x00	; 0
    6e86:	4a ef       	ldi	r20, 0xFA	; 250
    6e88:	54 e4       	ldi	r21, 0x44	; 68
    6e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6e8e:	dc 01       	movw	r26, r24
    6e90:	cb 01       	movw	r24, r22
    6e92:	89 ab       	std	Y+49, r24	; 0x31
    6e94:	9a ab       	std	Y+50, r25	; 0x32
    6e96:	ab ab       	std	Y+51, r26	; 0x33
    6e98:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6e9a:	69 a9       	ldd	r22, Y+49	; 0x31
    6e9c:	7a a9       	ldd	r23, Y+50	; 0x32
    6e9e:	8b a9       	ldd	r24, Y+51	; 0x33
    6ea0:	9c a9       	ldd	r25, Y+52	; 0x34
    6ea2:	20 e0       	ldi	r18, 0x00	; 0
    6ea4:	30 e0       	ldi	r19, 0x00	; 0
    6ea6:	40 e8       	ldi	r20, 0x80	; 128
    6ea8:	5f e3       	ldi	r21, 0x3F	; 63
    6eaa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6eae:	88 23       	and	r24, r24
    6eb0:	2c f4       	brge	.+10     	; 0x6ebc <main+0x4d60>
		__ticks = 1;
    6eb2:	81 e0       	ldi	r24, 0x01	; 1
    6eb4:	90 e0       	ldi	r25, 0x00	; 0
    6eb6:	98 ab       	std	Y+48, r25	; 0x30
    6eb8:	8f a7       	std	Y+47, r24	; 0x2f
    6eba:	3f c0       	rjmp	.+126    	; 0x6f3a <main+0x4dde>
	else if (__tmp > 65535)
    6ebc:	69 a9       	ldd	r22, Y+49	; 0x31
    6ebe:	7a a9       	ldd	r23, Y+50	; 0x32
    6ec0:	8b a9       	ldd	r24, Y+51	; 0x33
    6ec2:	9c a9       	ldd	r25, Y+52	; 0x34
    6ec4:	20 e0       	ldi	r18, 0x00	; 0
    6ec6:	3f ef       	ldi	r19, 0xFF	; 255
    6ec8:	4f e7       	ldi	r20, 0x7F	; 127
    6eca:	57 e4       	ldi	r21, 0x47	; 71
    6ecc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6ed0:	18 16       	cp	r1, r24
    6ed2:	4c f5       	brge	.+82     	; 0x6f26 <main+0x4dca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ed4:	6d a9       	ldd	r22, Y+53	; 0x35
    6ed6:	7e a9       	ldd	r23, Y+54	; 0x36
    6ed8:	8f a9       	ldd	r24, Y+55	; 0x37
    6eda:	98 ad       	ldd	r25, Y+56	; 0x38
    6edc:	20 e0       	ldi	r18, 0x00	; 0
    6ede:	30 e0       	ldi	r19, 0x00	; 0
    6ee0:	40 e2       	ldi	r20, 0x20	; 32
    6ee2:	51 e4       	ldi	r21, 0x41	; 65
    6ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ee8:	dc 01       	movw	r26, r24
    6eea:	cb 01       	movw	r24, r22
    6eec:	bc 01       	movw	r22, r24
    6eee:	cd 01       	movw	r24, r26
    6ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ef4:	dc 01       	movw	r26, r24
    6ef6:	cb 01       	movw	r24, r22
    6ef8:	98 ab       	std	Y+48, r25	; 0x30
    6efa:	8f a7       	std	Y+47, r24	; 0x2f
    6efc:	0f c0       	rjmp	.+30     	; 0x6f1c <main+0x4dc0>
    6efe:	88 ec       	ldi	r24, 0xC8	; 200
    6f00:	90 e0       	ldi	r25, 0x00	; 0
    6f02:	9e a7       	std	Y+46, r25	; 0x2e
    6f04:	8d a7       	std	Y+45, r24	; 0x2d
    6f06:	8d a5       	ldd	r24, Y+45	; 0x2d
    6f08:	9e a5       	ldd	r25, Y+46	; 0x2e
    6f0a:	01 97       	sbiw	r24, 0x01	; 1
    6f0c:	f1 f7       	brne	.-4      	; 0x6f0a <main+0x4dae>
    6f0e:	9e a7       	std	Y+46, r25	; 0x2e
    6f10:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6f12:	8f a5       	ldd	r24, Y+47	; 0x2f
    6f14:	98 a9       	ldd	r25, Y+48	; 0x30
    6f16:	01 97       	sbiw	r24, 0x01	; 1
    6f18:	98 ab       	std	Y+48, r25	; 0x30
    6f1a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6f1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    6f1e:	98 a9       	ldd	r25, Y+48	; 0x30
    6f20:	00 97       	sbiw	r24, 0x00	; 0
    6f22:	69 f7       	brne	.-38     	; 0x6efe <main+0x4da2>
    6f24:	b2 c1       	rjmp	.+868    	; 0x728a <main+0x512e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6f26:	69 a9       	ldd	r22, Y+49	; 0x31
    6f28:	7a a9       	ldd	r23, Y+50	; 0x32
    6f2a:	8b a9       	ldd	r24, Y+51	; 0x33
    6f2c:	9c a9       	ldd	r25, Y+52	; 0x34
    6f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6f32:	dc 01       	movw	r26, r24
    6f34:	cb 01       	movw	r24, r22
    6f36:	98 ab       	std	Y+48, r25	; 0x30
    6f38:	8f a7       	std	Y+47, r24	; 0x2f
    6f3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    6f3c:	98 a9       	ldd	r25, Y+48	; 0x30
    6f3e:	9c a7       	std	Y+44, r25	; 0x2c
    6f40:	8b a7       	std	Y+43, r24	; 0x2b
    6f42:	8b a5       	ldd	r24, Y+43	; 0x2b
    6f44:	9c a5       	ldd	r25, Y+44	; 0x2c
    6f46:	01 97       	sbiw	r24, 0x01	; 1
    6f48:	f1 f7       	brne	.-4      	; 0x6f46 <main+0x4dea>
    6f4a:	9c a7       	std	Y+44, r25	; 0x2c
    6f4c:	8b a7       	std	Y+43, r24	; 0x2b
    6f4e:	9d c1       	rjmp	.+826    	; 0x728a <main+0x512e>
						_delay_ms(250);//Halt the system for the given time in (ms)
						continue;//repeat the loop that ask for the temperature
					}
					else//if the value is valid
					{
						LCD_vSend_char(key_pressed);//print the value on the lcd
    6f50:	fe 01       	movw	r30, r28
    6f52:	eb 55       	subi	r30, 0x5B	; 91
    6f54:	fd 4f       	sbci	r31, 0xFD	; 253
    6f56:	80 81       	ld	r24, Z
    6f58:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
						temp_ones = key_pressed-ASCII_ZERO;//save the entered value
    6f5c:	de 01       	movw	r26, r28
    6f5e:	a6 55       	subi	r26, 0x56	; 86
    6f60:	bd 4f       	sbci	r27, 0xFD	; 253
    6f62:	fe 01       	movw	r30, r28
    6f64:	eb 55       	subi	r30, 0x5B	; 91
    6f66:	fd 4f       	sbci	r31, 0xFD	; 253
    6f68:	80 81       	ld	r24, Z
    6f6a:	80 53       	subi	r24, 0x30	; 48
    6f6c:	8c 93       	st	X, r24
						key_pressed = NOT_PRESSED;//set the key pressed to the default value
    6f6e:	fe 01       	movw	r30, r28
    6f70:	eb 55       	subi	r30, 0x5B	; 91
    6f72:	fd 4f       	sbci	r31, 0xFD	; 253
    6f74:	8f ef       	ldi	r24, 0xFF	; 255
    6f76:	80 83       	st	Z, r24
					}
					temperature = temp_tens*10 + temp_ones;//set the value of the temperature from the given separated values
    6f78:	fe 01       	movw	r30, r28
    6f7a:	e7 55       	subi	r30, 0x57	; 87
    6f7c:	fd 4f       	sbci	r31, 0xFD	; 253
    6f7e:	80 81       	ld	r24, Z
    6f80:	88 2f       	mov	r24, r24
    6f82:	90 e0       	ldi	r25, 0x00	; 0
    6f84:	9c 01       	movw	r18, r24
    6f86:	22 0f       	add	r18, r18
    6f88:	33 1f       	adc	r19, r19
    6f8a:	c9 01       	movw	r24, r18
    6f8c:	88 0f       	add	r24, r24
    6f8e:	99 1f       	adc	r25, r25
    6f90:	88 0f       	add	r24, r24
    6f92:	99 1f       	adc	r25, r25
    6f94:	82 0f       	add	r24, r18
    6f96:	93 1f       	adc	r25, r19
    6f98:	98 2f       	mov	r25, r24
    6f9a:	de 01       	movw	r26, r28
    6f9c:	a5 55       	subi	r26, 0x55	; 85
    6f9e:	bd 4f       	sbci	r27, 0xFD	; 253
    6fa0:	fe 01       	movw	r30, r28
    6fa2:	e6 55       	subi	r30, 0x56	; 86
    6fa4:	fd 4f       	sbci	r31, 0xFD	; 253
    6fa6:	80 81       	ld	r24, Z
    6fa8:	89 0f       	add	r24, r25
    6faa:	8c 93       	st	X, r24
					SPI_ui8TransmitRecive(SET_TEMPERATURE);//Send the code of set temperature
    6fac:	80 e4       	ldi	r24, 0x40	; 64
    6fae:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <SPI_ui8TransmitRecive>
    6fb2:	80 e0       	ldi	r24, 0x00	; 0
    6fb4:	90 e0       	ldi	r25, 0x00	; 0
    6fb6:	a8 e4       	ldi	r26, 0x48	; 72
    6fb8:	b3 e4       	ldi	r27, 0x43	; 67
    6fba:	8f a3       	std	Y+39, r24	; 0x27
    6fbc:	98 a7       	std	Y+40, r25	; 0x28
    6fbe:	a9 a7       	std	Y+41, r26	; 0x29
    6fc0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6fc2:	6f a1       	ldd	r22, Y+39	; 0x27
    6fc4:	78 a5       	ldd	r23, Y+40	; 0x28
    6fc6:	89 a5       	ldd	r24, Y+41	; 0x29
    6fc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    6fca:	20 e0       	ldi	r18, 0x00	; 0
    6fcc:	30 e0       	ldi	r19, 0x00	; 0
    6fce:	4a ef       	ldi	r20, 0xFA	; 250
    6fd0:	54 e4       	ldi	r21, 0x44	; 68
    6fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6fd6:	dc 01       	movw	r26, r24
    6fd8:	cb 01       	movw	r24, r22
    6fda:	8b a3       	std	Y+35, r24	; 0x23
    6fdc:	9c a3       	std	Y+36, r25	; 0x24
    6fde:	ad a3       	std	Y+37, r26	; 0x25
    6fe0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6fe2:	6b a1       	ldd	r22, Y+35	; 0x23
    6fe4:	7c a1       	ldd	r23, Y+36	; 0x24
    6fe6:	8d a1       	ldd	r24, Y+37	; 0x25
    6fe8:	9e a1       	ldd	r25, Y+38	; 0x26
    6fea:	20 e0       	ldi	r18, 0x00	; 0
    6fec:	30 e0       	ldi	r19, 0x00	; 0
    6fee:	40 e8       	ldi	r20, 0x80	; 128
    6ff0:	5f e3       	ldi	r21, 0x3F	; 63
    6ff2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6ff6:	88 23       	and	r24, r24
    6ff8:	2c f4       	brge	.+10     	; 0x7004 <main+0x4ea8>
		__ticks = 1;
    6ffa:	81 e0       	ldi	r24, 0x01	; 1
    6ffc:	90 e0       	ldi	r25, 0x00	; 0
    6ffe:	9a a3       	std	Y+34, r25	; 0x22
    7000:	89 a3       	std	Y+33, r24	; 0x21
    7002:	3f c0       	rjmp	.+126    	; 0x7082 <main+0x4f26>
	else if (__tmp > 65535)
    7004:	6b a1       	ldd	r22, Y+35	; 0x23
    7006:	7c a1       	ldd	r23, Y+36	; 0x24
    7008:	8d a1       	ldd	r24, Y+37	; 0x25
    700a:	9e a1       	ldd	r25, Y+38	; 0x26
    700c:	20 e0       	ldi	r18, 0x00	; 0
    700e:	3f ef       	ldi	r19, 0xFF	; 255
    7010:	4f e7       	ldi	r20, 0x7F	; 127
    7012:	57 e4       	ldi	r21, 0x47	; 71
    7014:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7018:	18 16       	cp	r1, r24
    701a:	4c f5       	brge	.+82     	; 0x706e <main+0x4f12>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    701c:	6f a1       	ldd	r22, Y+39	; 0x27
    701e:	78 a5       	ldd	r23, Y+40	; 0x28
    7020:	89 a5       	ldd	r24, Y+41	; 0x29
    7022:	9a a5       	ldd	r25, Y+42	; 0x2a
    7024:	20 e0       	ldi	r18, 0x00	; 0
    7026:	30 e0       	ldi	r19, 0x00	; 0
    7028:	40 e2       	ldi	r20, 0x20	; 32
    702a:	51 e4       	ldi	r21, 0x41	; 65
    702c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7030:	dc 01       	movw	r26, r24
    7032:	cb 01       	movw	r24, r22
    7034:	bc 01       	movw	r22, r24
    7036:	cd 01       	movw	r24, r26
    7038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    703c:	dc 01       	movw	r26, r24
    703e:	cb 01       	movw	r24, r22
    7040:	9a a3       	std	Y+34, r25	; 0x22
    7042:	89 a3       	std	Y+33, r24	; 0x21
    7044:	0f c0       	rjmp	.+30     	; 0x7064 <main+0x4f08>
    7046:	88 ec       	ldi	r24, 0xC8	; 200
    7048:	90 e0       	ldi	r25, 0x00	; 0
    704a:	98 a3       	std	Y+32, r25	; 0x20
    704c:	8f 8f       	std	Y+31, r24	; 0x1f
    704e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7050:	98 a1       	ldd	r25, Y+32	; 0x20
    7052:	01 97       	sbiw	r24, 0x01	; 1
    7054:	f1 f7       	brne	.-4      	; 0x7052 <main+0x4ef6>
    7056:	98 a3       	std	Y+32, r25	; 0x20
    7058:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    705a:	89 a1       	ldd	r24, Y+33	; 0x21
    705c:	9a a1       	ldd	r25, Y+34	; 0x22
    705e:	01 97       	sbiw	r24, 0x01	; 1
    7060:	9a a3       	std	Y+34, r25	; 0x22
    7062:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7064:	89 a1       	ldd	r24, Y+33	; 0x21
    7066:	9a a1       	ldd	r25, Y+34	; 0x22
    7068:	00 97       	sbiw	r24, 0x00	; 0
    706a:	69 f7       	brne	.-38     	; 0x7046 <main+0x4eea>
    706c:	14 c0       	rjmp	.+40     	; 0x7096 <main+0x4f3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    706e:	6b a1       	ldd	r22, Y+35	; 0x23
    7070:	7c a1       	ldd	r23, Y+36	; 0x24
    7072:	8d a1       	ldd	r24, Y+37	; 0x25
    7074:	9e a1       	ldd	r25, Y+38	; 0x26
    7076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    707a:	dc 01       	movw	r26, r24
    707c:	cb 01       	movw	r24, r22
    707e:	9a a3       	std	Y+34, r25	; 0x22
    7080:	89 a3       	std	Y+33, r24	; 0x21
    7082:	89 a1       	ldd	r24, Y+33	; 0x21
    7084:	9a a1       	ldd	r25, Y+34	; 0x22
    7086:	9e 8f       	std	Y+30, r25	; 0x1e
    7088:	8d 8f       	std	Y+29, r24	; 0x1d
    708a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    708c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    708e:	01 97       	sbiw	r24, 0x01	; 1
    7090:	f1 f7       	brne	.-4      	; 0x708e <main+0x4f32>
    7092:	9e 8f       	std	Y+30, r25	; 0x1e
    7094:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(200);//Halt the system to prevent write collision
					SPI_ui8TransmitRecive(temperature);//send the entered temperature
    7096:	fe 01       	movw	r30, r28
    7098:	e5 55       	subi	r30, 0x55	; 85
    709a:	fd 4f       	sbci	r31, 0xFD	; 253
    709c:	80 81       	ld	r24, Z
    709e:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <SPI_ui8TransmitRecive>
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    70a2:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
					LCD_vSend_string("Temperature Sent");//show the message
    70a6:	84 e3       	ldi	r24, 0x34	; 52
    70a8:	92 e0       	ldi	r25, 0x02	; 2
    70aa:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
					DIO_write(BUZZER_PORT,BUZZER_PIN,1);
    70ae:	84 e4       	ldi	r24, 0x44	; 68
    70b0:	66 e0       	ldi	r22, 0x06	; 6
    70b2:	41 e0       	ldi	r20, 0x01	; 1
    70b4:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    70b8:	80 e0       	ldi	r24, 0x00	; 0
    70ba:	90 e0       	ldi	r25, 0x00	; 0
    70bc:	aa e7       	ldi	r26, 0x7A	; 122
    70be:	b3 e4       	ldi	r27, 0x43	; 67
    70c0:	89 8f       	std	Y+25, r24	; 0x19
    70c2:	9a 8f       	std	Y+26, r25	; 0x1a
    70c4:	ab 8f       	std	Y+27, r26	; 0x1b
    70c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    70c8:	69 8d       	ldd	r22, Y+25	; 0x19
    70ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    70cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    70ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    70d0:	20 e0       	ldi	r18, 0x00	; 0
    70d2:	30 e0       	ldi	r19, 0x00	; 0
    70d4:	4a ef       	ldi	r20, 0xFA	; 250
    70d6:	54 e4       	ldi	r21, 0x44	; 68
    70d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    70dc:	dc 01       	movw	r26, r24
    70de:	cb 01       	movw	r24, r22
    70e0:	8d 8b       	std	Y+21, r24	; 0x15
    70e2:	9e 8b       	std	Y+22, r25	; 0x16
    70e4:	af 8b       	std	Y+23, r26	; 0x17
    70e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    70e8:	6d 89       	ldd	r22, Y+21	; 0x15
    70ea:	7e 89       	ldd	r23, Y+22	; 0x16
    70ec:	8f 89       	ldd	r24, Y+23	; 0x17
    70ee:	98 8d       	ldd	r25, Y+24	; 0x18
    70f0:	20 e0       	ldi	r18, 0x00	; 0
    70f2:	30 e0       	ldi	r19, 0x00	; 0
    70f4:	40 e8       	ldi	r20, 0x80	; 128
    70f6:	5f e3       	ldi	r21, 0x3F	; 63
    70f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    70fc:	88 23       	and	r24, r24
    70fe:	2c f4       	brge	.+10     	; 0x710a <main+0x4fae>
		__ticks = 1;
    7100:	81 e0       	ldi	r24, 0x01	; 1
    7102:	90 e0       	ldi	r25, 0x00	; 0
    7104:	9c 8b       	std	Y+20, r25	; 0x14
    7106:	8b 8b       	std	Y+19, r24	; 0x13
    7108:	3f c0       	rjmp	.+126    	; 0x7188 <main+0x502c>
	else if (__tmp > 65535)
    710a:	6d 89       	ldd	r22, Y+21	; 0x15
    710c:	7e 89       	ldd	r23, Y+22	; 0x16
    710e:	8f 89       	ldd	r24, Y+23	; 0x17
    7110:	98 8d       	ldd	r25, Y+24	; 0x18
    7112:	20 e0       	ldi	r18, 0x00	; 0
    7114:	3f ef       	ldi	r19, 0xFF	; 255
    7116:	4f e7       	ldi	r20, 0x7F	; 127
    7118:	57 e4       	ldi	r21, 0x47	; 71
    711a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    711e:	18 16       	cp	r1, r24
    7120:	4c f5       	brge	.+82     	; 0x7174 <main+0x5018>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7122:	69 8d       	ldd	r22, Y+25	; 0x19
    7124:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7126:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7128:	9c 8d       	ldd	r25, Y+28	; 0x1c
    712a:	20 e0       	ldi	r18, 0x00	; 0
    712c:	30 e0       	ldi	r19, 0x00	; 0
    712e:	40 e2       	ldi	r20, 0x20	; 32
    7130:	51 e4       	ldi	r21, 0x41	; 65
    7132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7136:	dc 01       	movw	r26, r24
    7138:	cb 01       	movw	r24, r22
    713a:	bc 01       	movw	r22, r24
    713c:	cd 01       	movw	r24, r26
    713e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7142:	dc 01       	movw	r26, r24
    7144:	cb 01       	movw	r24, r22
    7146:	9c 8b       	std	Y+20, r25	; 0x14
    7148:	8b 8b       	std	Y+19, r24	; 0x13
    714a:	0f c0       	rjmp	.+30     	; 0x716a <main+0x500e>
    714c:	88 ec       	ldi	r24, 0xC8	; 200
    714e:	90 e0       	ldi	r25, 0x00	; 0
    7150:	9a 8b       	std	Y+18, r25	; 0x12
    7152:	89 8b       	std	Y+17, r24	; 0x11
    7154:	89 89       	ldd	r24, Y+17	; 0x11
    7156:	9a 89       	ldd	r25, Y+18	; 0x12
    7158:	01 97       	sbiw	r24, 0x01	; 1
    715a:	f1 f7       	brne	.-4      	; 0x7158 <main+0x4ffc>
    715c:	9a 8b       	std	Y+18, r25	; 0x12
    715e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7160:	8b 89       	ldd	r24, Y+19	; 0x13
    7162:	9c 89       	ldd	r25, Y+20	; 0x14
    7164:	01 97       	sbiw	r24, 0x01	; 1
    7166:	9c 8b       	std	Y+20, r25	; 0x14
    7168:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    716a:	8b 89       	ldd	r24, Y+19	; 0x13
    716c:	9c 89       	ldd	r25, Y+20	; 0x14
    716e:	00 97       	sbiw	r24, 0x00	; 0
    7170:	69 f7       	brne	.-38     	; 0x714c <main+0x4ff0>
    7172:	14 c0       	rjmp	.+40     	; 0x719c <main+0x5040>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7174:	6d 89       	ldd	r22, Y+21	; 0x15
    7176:	7e 89       	ldd	r23, Y+22	; 0x16
    7178:	8f 89       	ldd	r24, Y+23	; 0x17
    717a:	98 8d       	ldd	r25, Y+24	; 0x18
    717c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7180:	dc 01       	movw	r26, r24
    7182:	cb 01       	movw	r24, r22
    7184:	9c 8b       	std	Y+20, r25	; 0x14
    7186:	8b 8b       	std	Y+19, r24	; 0x13
    7188:	8b 89       	ldd	r24, Y+19	; 0x13
    718a:	9c 89       	ldd	r25, Y+20	; 0x14
    718c:	98 8b       	std	Y+16, r25	; 0x10
    718e:	8f 87       	std	Y+15, r24	; 0x0f
    7190:	8f 85       	ldd	r24, Y+15	; 0x0f
    7192:	98 89       	ldd	r25, Y+16	; 0x10
    7194:	01 97       	sbiw	r24, 0x01	; 1
    7196:	f1 f7       	brne	.-4      	; 0x7194 <main+0x5038>
    7198:	98 8b       	std	Y+16, r25	; 0x10
    719a:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(250);
					DIO_write(BUZZER_PORT,BUZZER_PIN,0);
    719c:	84 e4       	ldi	r24, 0x44	; 68
    719e:	66 e0       	ldi	r22, 0x06	; 6
    71a0:	40 e0       	ldi	r20, 0x00	; 0
    71a2:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    71a6:	80 e0       	ldi	r24, 0x00	; 0
    71a8:	90 e0       	ldi	r25, 0x00	; 0
    71aa:	aa e7       	ldi	r26, 0x7A	; 122
    71ac:	b3 e4       	ldi	r27, 0x43	; 67
    71ae:	8b 87       	std	Y+11, r24	; 0x0b
    71b0:	9c 87       	std	Y+12, r25	; 0x0c
    71b2:	ad 87       	std	Y+13, r26	; 0x0d
    71b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    71b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    71b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    71ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    71bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    71be:	20 e0       	ldi	r18, 0x00	; 0
    71c0:	30 e0       	ldi	r19, 0x00	; 0
    71c2:	4a ef       	ldi	r20, 0xFA	; 250
    71c4:	54 e4       	ldi	r21, 0x44	; 68
    71c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    71ca:	dc 01       	movw	r26, r24
    71cc:	cb 01       	movw	r24, r22
    71ce:	8f 83       	std	Y+7, r24	; 0x07
    71d0:	98 87       	std	Y+8, r25	; 0x08
    71d2:	a9 87       	std	Y+9, r26	; 0x09
    71d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    71d6:	6f 81       	ldd	r22, Y+7	; 0x07
    71d8:	78 85       	ldd	r23, Y+8	; 0x08
    71da:	89 85       	ldd	r24, Y+9	; 0x09
    71dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    71de:	20 e0       	ldi	r18, 0x00	; 0
    71e0:	30 e0       	ldi	r19, 0x00	; 0
    71e2:	40 e8       	ldi	r20, 0x80	; 128
    71e4:	5f e3       	ldi	r21, 0x3F	; 63
    71e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    71ea:	88 23       	and	r24, r24
    71ec:	2c f4       	brge	.+10     	; 0x71f8 <main+0x509c>
		__ticks = 1;
    71ee:	81 e0       	ldi	r24, 0x01	; 1
    71f0:	90 e0       	ldi	r25, 0x00	; 0
    71f2:	9e 83       	std	Y+6, r25	; 0x06
    71f4:	8d 83       	std	Y+5, r24	; 0x05
    71f6:	3f c0       	rjmp	.+126    	; 0x7276 <main+0x511a>
	else if (__tmp > 65535)
    71f8:	6f 81       	ldd	r22, Y+7	; 0x07
    71fa:	78 85       	ldd	r23, Y+8	; 0x08
    71fc:	89 85       	ldd	r24, Y+9	; 0x09
    71fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    7200:	20 e0       	ldi	r18, 0x00	; 0
    7202:	3f ef       	ldi	r19, 0xFF	; 255
    7204:	4f e7       	ldi	r20, 0x7F	; 127
    7206:	57 e4       	ldi	r21, 0x47	; 71
    7208:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    720c:	18 16       	cp	r1, r24
    720e:	4c f5       	brge	.+82     	; 0x7262 <main+0x5106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7210:	6b 85       	ldd	r22, Y+11	; 0x0b
    7212:	7c 85       	ldd	r23, Y+12	; 0x0c
    7214:	8d 85       	ldd	r24, Y+13	; 0x0d
    7216:	9e 85       	ldd	r25, Y+14	; 0x0e
    7218:	20 e0       	ldi	r18, 0x00	; 0
    721a:	30 e0       	ldi	r19, 0x00	; 0
    721c:	40 e2       	ldi	r20, 0x20	; 32
    721e:	51 e4       	ldi	r21, 0x41	; 65
    7220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7224:	dc 01       	movw	r26, r24
    7226:	cb 01       	movw	r24, r22
    7228:	bc 01       	movw	r22, r24
    722a:	cd 01       	movw	r24, r26
    722c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7230:	dc 01       	movw	r26, r24
    7232:	cb 01       	movw	r24, r22
    7234:	9e 83       	std	Y+6, r25	; 0x06
    7236:	8d 83       	std	Y+5, r24	; 0x05
    7238:	0f c0       	rjmp	.+30     	; 0x7258 <main+0x50fc>
    723a:	88 ec       	ldi	r24, 0xC8	; 200
    723c:	90 e0       	ldi	r25, 0x00	; 0
    723e:	9c 83       	std	Y+4, r25	; 0x04
    7240:	8b 83       	std	Y+3, r24	; 0x03
    7242:	8b 81       	ldd	r24, Y+3	; 0x03
    7244:	9c 81       	ldd	r25, Y+4	; 0x04
    7246:	01 97       	sbiw	r24, 0x01	; 1
    7248:	f1 f7       	brne	.-4      	; 0x7246 <main+0x50ea>
    724a:	9c 83       	std	Y+4, r25	; 0x04
    724c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    724e:	8d 81       	ldd	r24, Y+5	; 0x05
    7250:	9e 81       	ldd	r25, Y+6	; 0x06
    7252:	01 97       	sbiw	r24, 0x01	; 1
    7254:	9e 83       	std	Y+6, r25	; 0x06
    7256:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7258:	8d 81       	ldd	r24, Y+5	; 0x05
    725a:	9e 81       	ldd	r25, Y+6	; 0x06
    725c:	00 97       	sbiw	r24, 0x00	; 0
    725e:	69 f7       	brne	.-38     	; 0x723a <main+0x50de>
    7260:	14 c0       	rjmp	.+40     	; 0x728a <main+0x512e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7262:	6f 81       	ldd	r22, Y+7	; 0x07
    7264:	78 85       	ldd	r23, Y+8	; 0x08
    7266:	89 85       	ldd	r24, Y+9	; 0x09
    7268:	9a 85       	ldd	r25, Y+10	; 0x0a
    726a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    726e:	dc 01       	movw	r26, r24
    7270:	cb 01       	movw	r24, r22
    7272:	9e 83       	std	Y+6, r25	; 0x06
    7274:	8d 83       	std	Y+5, r24	; 0x05
    7276:	8d 81       	ldd	r24, Y+5	; 0x05
    7278:	9e 81       	ldd	r25, Y+6	; 0x06
    727a:	9a 83       	std	Y+2, r25	; 0x02
    727c:	89 83       	std	Y+1, r24	; 0x01
    727e:	89 81       	ldd	r24, Y+1	; 0x01
    7280:	9a 81       	ldd	r25, Y+2	; 0x02
    7282:	01 97       	sbiw	r24, 0x01	; 1
    7284:	f1 f7       	brne	.-4      	; 0x7282 <main+0x5126>
    7286:	9a 83       	std	Y+2, r25	; 0x02
    7288:	89 83       	std	Y+1, r24	; 0x01
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
				break;//End of air conditioning control menu case

			case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
				while (temperature==0 && timeout_flag == FALSE)//start the loop that asks for the temperature from the user in case of the time is not out
    728a:	fe 01       	movw	r30, r28
    728c:	e5 55       	subi	r30, 0x55	; 85
    728e:	fd 4f       	sbci	r31, 0xFD	; 253
    7290:	80 81       	ld	r24, Z
    7292:	88 23       	and	r24, r24
    7294:	29 f4       	brne	.+10     	; 0x72a0 <main+0x5144>
    7296:	80 91 ba 02 	lds	r24, 0x02BA
    729a:	88 23       	and	r24, r24
    729c:	09 f4       	brne	.+2      	; 0x72a0 <main+0x5144>
    729e:	5c c9       	rjmp	.-3400   	; 0x6558 <main+0x43fc>
					DIO_write(BUZZER_PORT,BUZZER_PIN,1);
					_delay_ms(250);
					DIO_write(BUZZER_PORT,BUZZER_PIN,0);
					_delay_ms(250);//Halt the system for the given time in (ms)
				}
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
    72a0:	fe 01       	movw	r30, r28
    72a2:	ee 55       	subi	r30, 0x5E	; 94
    72a4:	fd 4f       	sbci	r31, 0xFD	; 253
    72a6:	88 e0       	ldi	r24, 0x08	; 8
    72a8:	80 83       	st	Z, r24

		/*************************************************************************************************/
		uint8 show_menu = MAIN_MENU;


		while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
    72aa:	80 91 ba 02 	lds	r24, 0x02BA
    72ae:	81 30       	cpi	r24, 0x01	; 1
    72b0:	11 f0       	breq	.+4      	; 0x72b6 <main+0x515a>
    72b2:	0c 94 e6 29 	jmp	0x53cc	; 0x53cc <main+0x3270>
    72b6:	0c 94 f7 17 	jmp	0x2fee	; 0x2fee <main+0xe92>

000072ba <__vector_10>:
//	DIO_vconnectpullup('D',2,0);
//}


ISR(TIMER0_COMP_vect)
{
    72ba:	1f 92       	push	r1
    72bc:	0f 92       	push	r0
    72be:	0f b6       	in	r0, 0x3f	; 63
    72c0:	0f 92       	push	r0
    72c2:	11 24       	eor	r1, r1
    72c4:	8f 93       	push	r24
    72c6:	9f 93       	push	r25
    72c8:	df 93       	push	r29
    72ca:	cf 93       	push	r28
    72cc:	cd b7       	in	r28, 0x3d	; 61
    72ce:	de b7       	in	r29, 0x3e	; 62
	session_counter++;//increase the indicator of session time for every tick
    72d0:	80 91 b8 02 	lds	r24, 0x02B8
    72d4:	90 91 b9 02 	lds	r25, 0x02B9
    72d8:	01 96       	adiw	r24, 0x01	; 1
    72da:	90 93 b9 02 	sts	0x02B9, r25
    72de:	80 93 b8 02 	sts	0x02B8, r24
}
    72e2:	cf 91       	pop	r28
    72e4:	df 91       	pop	r29
    72e6:	9f 91       	pop	r25
    72e8:	8f 91       	pop	r24
    72ea:	0f 90       	pop	r0
    72ec:	0f be       	out	0x3f, r0	; 63
    72ee:	0f 90       	pop	r0
    72f0:	1f 90       	pop	r1
    72f2:	18 95       	reti

000072f4 <ui8ComparePass>:

extern volatile uint16 session_counter;//Stores the session time
extern uint8 timeout_flag;//stores if the session is still valid or outdated

uint8 ui8ComparePass(const uint8* pass1,const uint8* pass2,const uint8 size)
{
    72f4:	df 93       	push	r29
    72f6:	cf 93       	push	r28
    72f8:	cd b7       	in	r28, 0x3d	; 61
    72fa:	de b7       	in	r29, 0x3e	; 62
    72fc:	27 97       	sbiw	r28, 0x07	; 7
    72fe:	0f b6       	in	r0, 0x3f	; 63
    7300:	f8 94       	cli
    7302:	de bf       	out	0x3e, r29	; 62
    7304:	0f be       	out	0x3f, r0	; 63
    7306:	cd bf       	out	0x3d, r28	; 61
    7308:	9c 83       	std	Y+4, r25	; 0x04
    730a:	8b 83       	std	Y+3, r24	; 0x03
    730c:	7e 83       	std	Y+6, r23	; 0x06
    730e:	6d 83       	std	Y+5, r22	; 0x05
    7310:	4f 83       	std	Y+7, r20	; 0x07
	uint8 pin_counter=0;//the offset of the character of the pin
    7312:	1a 82       	std	Y+2, r1	; 0x02
	uint8 ret_value = TRUE;
    7314:	81 e0       	ldi	r24, 0x01	; 1
    7316:	89 83       	std	Y+1, r24	; 0x01
    7318:	19 c0       	rjmp	.+50     	; 0x734c <ui8ComparePass+0x58>
	while (pin_counter<size)//loop till the pin is fully entered
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))//if the two characters of the entered pin and the stored pin are not equal
    731a:	8a 81       	ldd	r24, Y+2	; 0x02
    731c:	28 2f       	mov	r18, r24
    731e:	30 e0       	ldi	r19, 0x00	; 0
    7320:	8b 81       	ldd	r24, Y+3	; 0x03
    7322:	9c 81       	ldd	r25, Y+4	; 0x04
    7324:	fc 01       	movw	r30, r24
    7326:	e2 0f       	add	r30, r18
    7328:	f3 1f       	adc	r31, r19
    732a:	40 81       	ld	r20, Z
    732c:	8a 81       	ldd	r24, Y+2	; 0x02
    732e:	28 2f       	mov	r18, r24
    7330:	30 e0       	ldi	r19, 0x00	; 0
    7332:	8d 81       	ldd	r24, Y+5	; 0x05
    7334:	9e 81       	ldd	r25, Y+6	; 0x06
    7336:	fc 01       	movw	r30, r24
    7338:	e2 0f       	add	r30, r18
    733a:	f3 1f       	adc	r31, r19
    733c:	80 81       	ld	r24, Z
    733e:	48 17       	cp	r20, r24
    7340:	11 f0       	breq	.+4      	; 0x7346 <ui8ComparePass+0x52>
		{
			ret_value= FALSE;//returns false that means the two PINs are not equal
    7342:	19 82       	std	Y+1, r1	; 0x01
    7344:	07 c0       	rjmp	.+14     	; 0x7354 <ui8ComparePass+0x60>
			break;//break the loop
		}
		pin_counter++;//increase thee offset by one
    7346:	8a 81       	ldd	r24, Y+2	; 0x02
    7348:	8f 5f       	subi	r24, 0xFF	; 255
    734a:	8a 83       	std	Y+2, r24	; 0x02

uint8 ui8ComparePass(const uint8* pass1,const uint8* pass2,const uint8 size)
{
	uint8 pin_counter=0;//the offset of the character of the pin
	uint8 ret_value = TRUE;
	while (pin_counter<size)//loop till the pin is fully entered
    734c:	9a 81       	ldd	r25, Y+2	; 0x02
    734e:	8f 81       	ldd	r24, Y+7	; 0x07
    7350:	98 17       	cp	r25, r24
    7352:	18 f3       	brcs	.-58     	; 0x731a <ui8ComparePass+0x26>
			ret_value= FALSE;//returns false that means the two PINs are not equal
			break;//break the loop
		}
		pin_counter++;//increase thee offset by one
	}
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
    7354:	89 81       	ldd	r24, Y+1	; 0x01
}
    7356:	27 96       	adiw	r28, 0x07	; 7
    7358:	0f b6       	in	r0, 0x3f	; 63
    735a:	f8 94       	cli
    735c:	de bf       	out	0x3e, r29	; 62
    735e:	0f be       	out	0x3f, r0	; 63
    7360:	cd bf       	out	0x3d, r28	; 61
    7362:	cf 91       	pop	r28
    7364:	df 91       	pop	r29
    7366:	08 95       	ret

00007368 <vMenuOption>:

void vMenuOption(const uint8 u8SelectedRoom,const uint8 u8LoginMode)
{
    7368:	df 93       	push	r29
    736a:	cf 93       	push	r28
    736c:	cd b7       	in	r28, 0x3d	; 61
    736e:	de b7       	in	r29, 0x3e	; 62
    7370:	c1 54       	subi	r28, 0x41	; 65
    7372:	d0 40       	sbci	r29, 0x00	; 0
    7374:	0f b6       	in	r0, 0x3f	; 63
    7376:	f8 94       	cli
    7378:	de bf       	out	0x3e, r29	; 62
    737a:	0f be       	out	0x3f, r0	; 63
    737c:	cd bf       	out	0x3d, r28	; 61
    737e:	8e af       	std	Y+62, r24	; 0x3e
    7380:	6f af       	std	Y+63, r22	; 0x3f
	uint8 u8StatusCode  = 0;//demand status code
    7382:	1d ae       	std	Y+61, r1	; 0x3d
	uint8 u8TurnOnCode  = 0;//turn on the room or the device code
    7384:	1c ae       	std	Y+60, r1	; 0x3c
	uint8 u8TurnOffCode = 0;//turn off the device or room
    7386:	1b ae       	std	Y+59, r1	; 0x3b
	uint8 response      = DEFAULT_ACK;//the response of the slave that is sent back based on the command of the master
    7388:	8f ef       	ldi	r24, 0xFF	; 255
    738a:	8a af       	std	Y+58, r24	; 0x3a
	uint8 key_pressed   = NOT_PRESSED;//the key that is entered by the user
    738c:	8f ef       	ldi	r24, 0xFF	; 255
    738e:	89 af       	std	Y+57, r24	; 0x39

	do
	{
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    7390:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>

		/*********** ****************Set the commands to be sent to the slave based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
    7394:	8e ad       	ldd	r24, Y+62	; 0x3e
    7396:	28 2f       	mov	r18, r24
    7398:	30 e0       	ldi	r19, 0x00	; 0
    739a:	22 96       	adiw	r28, 0x02	; 2
    739c:	3f af       	std	Y+63, r19	; 0x3f
    739e:	2e af       	std	Y+62, r18	; 0x3e
    73a0:	22 97       	sbiw	r28, 0x02	; 2
    73a2:	22 96       	adiw	r28, 0x02	; 2
    73a4:	8e ad       	ldd	r24, Y+62	; 0x3e
    73a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    73a8:	22 97       	sbiw	r28, 0x02	; 2
    73aa:	85 30       	cpi	r24, 0x05	; 5
    73ac:	91 05       	cpc	r25, r1
    73ae:	09 f4       	brne	.+2      	; 0x73b2 <vMenuOption+0x4a>
    73b0:	42 c0       	rjmp	.+132    	; 0x7436 <vMenuOption+0xce>
    73b2:	22 96       	adiw	r28, 0x02	; 2
    73b4:	2e ad       	ldd	r18, Y+62	; 0x3e
    73b6:	3f ad       	ldd	r19, Y+63	; 0x3f
    73b8:	22 97       	sbiw	r28, 0x02	; 2
    73ba:	26 30       	cpi	r18, 0x06	; 6
    73bc:	31 05       	cpc	r19, r1
    73be:	7c f4       	brge	.+30     	; 0x73de <vMenuOption+0x76>
    73c0:	22 96       	adiw	r28, 0x02	; 2
    73c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    73c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    73c6:	22 97       	sbiw	r28, 0x02	; 2
    73c8:	83 30       	cpi	r24, 0x03	; 3
    73ca:	91 05       	cpc	r25, r1
    73cc:	f1 f0       	breq	.+60     	; 0x740a <vMenuOption+0xa2>
    73ce:	22 96       	adiw	r28, 0x02	; 2
    73d0:	2e ad       	ldd	r18, Y+62	; 0x3e
    73d2:	3f ad       	ldd	r19, Y+63	; 0x3f
    73d4:	22 97       	sbiw	r28, 0x02	; 2
    73d6:	24 30       	cpi	r18, 0x04	; 4
    73d8:	31 05       	cpc	r19, r1
    73da:	11 f1       	breq	.+68     	; 0x7420 <vMenuOption+0xb8>
    73dc:	57 c0       	rjmp	.+174    	; 0x748c <vMenuOption+0x124>
    73de:	22 96       	adiw	r28, 0x02	; 2
    73e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    73e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    73e4:	22 97       	sbiw	r28, 0x02	; 2
    73e6:	87 30       	cpi	r24, 0x07	; 7
    73e8:	91 05       	cpc	r25, r1
    73ea:	d9 f1       	breq	.+118    	; 0x7462 <vMenuOption+0xfa>
    73ec:	22 96       	adiw	r28, 0x02	; 2
    73ee:	2e ad       	ldd	r18, Y+62	; 0x3e
    73f0:	3f ad       	ldd	r19, Y+63	; 0x3f
    73f2:	22 97       	sbiw	r28, 0x02	; 2
    73f4:	27 30       	cpi	r18, 0x07	; 7
    73f6:	31 05       	cpc	r19, r1
    73f8:	4c f1       	brlt	.+82     	; 0x744c <vMenuOption+0xe4>
    73fa:	22 96       	adiw	r28, 0x02	; 2
    73fc:	8e ad       	ldd	r24, Y+62	; 0x3e
    73fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    7400:	22 97       	sbiw	r28, 0x02	; 2
    7402:	89 30       	cpi	r24, 0x09	; 9
    7404:	91 05       	cpc	r25, r1
    7406:	c1 f1       	breq	.+112    	; 0x7478 <vMenuOption+0x110>
    7408:	41 c0       	rjmp	.+130    	; 0x748c <vMenuOption+0x124>
		{
		case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
    740a:	81 e1       	ldi	r24, 0x11	; 17
    740c:	8d af       	std	Y+61, r24	; 0x3d
			u8TurnOnCode = ROOM1_TURN_ON;
    740e:	81 e2       	ldi	r24, 0x21	; 33
    7410:	8c af       	std	Y+60, r24	; 0x3c
			u8TurnOffCode = ROOM1_TURN_OFF;
    7412:	81 e3       	ldi	r24, 0x31	; 49
    7414:	8b af       	std	Y+59, r24	; 0x3b
			LCD_vSend_string("Room1 S:");
    7416:	85 e4       	ldi	r24, 0x45	; 69
    7418:	92 e0       	ldi	r25, 0x02	; 2
    741a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    741e:	36 c0       	rjmp	.+108    	; 0x748c <vMenuOption+0x124>
			break;
		case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
    7420:	82 e1       	ldi	r24, 0x12	; 18
    7422:	8d af       	std	Y+61, r24	; 0x3d
			u8TurnOnCode = ROOM2_TURN_ON;
    7424:	82 e2       	ldi	r24, 0x22	; 34
    7426:	8c af       	std	Y+60, r24	; 0x3c
			u8TurnOffCode = ROOM2_TURN_OFF;
    7428:	82 e3       	ldi	r24, 0x32	; 50
    742a:	8b af       	std	Y+59, r24	; 0x3b
			LCD_vSend_string("Room2 S:");
    742c:	8e e4       	ldi	r24, 0x4E	; 78
    742e:	92 e0       	ldi	r25, 0x02	; 2
    7430:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    7434:	2b c0       	rjmp	.+86     	; 0x748c <vMenuOption+0x124>
			break;
		case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
    7436:	83 e1       	ldi	r24, 0x13	; 19
    7438:	8d af       	std	Y+61, r24	; 0x3d
			u8TurnOnCode = ROOM3_TURN_ON;
    743a:	83 e2       	ldi	r24, 0x23	; 35
    743c:	8c af       	std	Y+60, r24	; 0x3c
			u8TurnOffCode = ROOM3_TURN_OFF;
    743e:	83 e3       	ldi	r24, 0x33	; 51
    7440:	8b af       	std	Y+59, r24	; 0x3b
			LCD_vSend_string("Room3 S:");
    7442:	87 e5       	ldi	r24, 0x57	; 87
    7444:	92 e0       	ldi	r25, 0x02	; 2
    7446:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    744a:	20 c0       	rjmp	.+64     	; 0x748c <vMenuOption+0x124>
			break;
		case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
    744c:	84 e1       	ldi	r24, 0x14	; 20
    744e:	8d af       	std	Y+61, r24	; 0x3d
			u8TurnOnCode = ROOM4_TURN_ON;
    7450:	84 e2       	ldi	r24, 0x24	; 36
    7452:	8c af       	std	Y+60, r24	; 0x3c
			u8TurnOffCode = ROOM4_TURN_OFF;
    7454:	84 e3       	ldi	r24, 0x34	; 52
    7456:	8b af       	std	Y+59, r24	; 0x3b
			LCD_vSend_string("Room4 S:");
    7458:	80 e6       	ldi	r24, 0x60	; 96
    745a:	92 e0       	ldi	r25, 0x02	; 2
    745c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    7460:	15 c0       	rjmp	.+42     	; 0x748c <vMenuOption+0x124>
			break;
		case TV_MENU:
			u8StatusCode = TV_STATUS;
    7462:	85 e1       	ldi	r24, 0x15	; 21
    7464:	8d af       	std	Y+61, r24	; 0x3d
			u8TurnOnCode = TV_TURN_ON;
    7466:	85 e2       	ldi	r24, 0x25	; 37
    7468:	8c af       	std	Y+60, r24	; 0x3c
			u8TurnOffCode = TV_TURN_OFF;
    746a:	85 e3       	ldi	r24, 0x35	; 53
    746c:	8b af       	std	Y+59, r24	; 0x3b
			LCD_vSend_string("TV S:");
    746e:	89 e6       	ldi	r24, 0x69	; 105
    7470:	92 e0       	ldi	r25, 0x02	; 2
    7472:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    7476:	0a c0       	rjmp	.+20     	; 0x748c <vMenuOption+0x124>
			break;
		case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
    7478:	86 e1       	ldi	r24, 0x16	; 22
    747a:	8d af       	std	Y+61, r24	; 0x3d
			u8TurnOnCode = AIR_COND_TURN_ON;
    747c:	86 e2       	ldi	r24, 0x26	; 38
    747e:	8c af       	std	Y+60, r24	; 0x3c
			u8TurnOffCode = AIR_COND_TURN_OFF;
    7480:	86 e3       	ldi	r24, 0x36	; 54
    7482:	8b af       	std	Y+59, r24	; 0x3b
			LCD_vSend_string("Air Cond. S:");
    7484:	8f e6       	ldi	r24, 0x6F	; 111
    7486:	92 e0       	ldi	r25, 0x02	; 2
    7488:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
			break;
		}
		/****************************************************************************************************/

		SPI_ui8TransmitRecive(u8StatusCode);//demand the status from the slave
    748c:	8d ad       	ldd	r24, Y+61	; 0x3d
    748e:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <SPI_ui8TransmitRecive>
    7492:	80 e0       	ldi	r24, 0x00	; 0
    7494:	90 e0       	ldi	r25, 0x00	; 0
    7496:	a8 ec       	ldi	r26, 0xC8	; 200
    7498:	b2 e4       	ldi	r27, 0x42	; 66
    749a:	8d ab       	std	Y+53, r24	; 0x35
    749c:	9e ab       	std	Y+54, r25	; 0x36
    749e:	af ab       	std	Y+55, r26	; 0x37
    74a0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    74a2:	6d a9       	ldd	r22, Y+53	; 0x35
    74a4:	7e a9       	ldd	r23, Y+54	; 0x36
    74a6:	8f a9       	ldd	r24, Y+55	; 0x37
    74a8:	98 ad       	ldd	r25, Y+56	; 0x38
    74aa:	20 e0       	ldi	r18, 0x00	; 0
    74ac:	30 e0       	ldi	r19, 0x00	; 0
    74ae:	4a ef       	ldi	r20, 0xFA	; 250
    74b0:	54 e4       	ldi	r21, 0x44	; 68
    74b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    74b6:	dc 01       	movw	r26, r24
    74b8:	cb 01       	movw	r24, r22
    74ba:	89 ab       	std	Y+49, r24	; 0x31
    74bc:	9a ab       	std	Y+50, r25	; 0x32
    74be:	ab ab       	std	Y+51, r26	; 0x33
    74c0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    74c2:	69 a9       	ldd	r22, Y+49	; 0x31
    74c4:	7a a9       	ldd	r23, Y+50	; 0x32
    74c6:	8b a9       	ldd	r24, Y+51	; 0x33
    74c8:	9c a9       	ldd	r25, Y+52	; 0x34
    74ca:	20 e0       	ldi	r18, 0x00	; 0
    74cc:	30 e0       	ldi	r19, 0x00	; 0
    74ce:	40 e8       	ldi	r20, 0x80	; 128
    74d0:	5f e3       	ldi	r21, 0x3F	; 63
    74d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    74d6:	88 23       	and	r24, r24
    74d8:	2c f4       	brge	.+10     	; 0x74e4 <vMenuOption+0x17c>
		__ticks = 1;
    74da:	81 e0       	ldi	r24, 0x01	; 1
    74dc:	90 e0       	ldi	r25, 0x00	; 0
    74de:	98 ab       	std	Y+48, r25	; 0x30
    74e0:	8f a7       	std	Y+47, r24	; 0x2f
    74e2:	3f c0       	rjmp	.+126    	; 0x7562 <vMenuOption+0x1fa>
	else if (__tmp > 65535)
    74e4:	69 a9       	ldd	r22, Y+49	; 0x31
    74e6:	7a a9       	ldd	r23, Y+50	; 0x32
    74e8:	8b a9       	ldd	r24, Y+51	; 0x33
    74ea:	9c a9       	ldd	r25, Y+52	; 0x34
    74ec:	20 e0       	ldi	r18, 0x00	; 0
    74ee:	3f ef       	ldi	r19, 0xFF	; 255
    74f0:	4f e7       	ldi	r20, 0x7F	; 127
    74f2:	57 e4       	ldi	r21, 0x47	; 71
    74f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    74f8:	18 16       	cp	r1, r24
    74fa:	4c f5       	brge	.+82     	; 0x754e <vMenuOption+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    74fc:	6d a9       	ldd	r22, Y+53	; 0x35
    74fe:	7e a9       	ldd	r23, Y+54	; 0x36
    7500:	8f a9       	ldd	r24, Y+55	; 0x37
    7502:	98 ad       	ldd	r25, Y+56	; 0x38
    7504:	20 e0       	ldi	r18, 0x00	; 0
    7506:	30 e0       	ldi	r19, 0x00	; 0
    7508:	40 e2       	ldi	r20, 0x20	; 32
    750a:	51 e4       	ldi	r21, 0x41	; 65
    750c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7510:	dc 01       	movw	r26, r24
    7512:	cb 01       	movw	r24, r22
    7514:	bc 01       	movw	r22, r24
    7516:	cd 01       	movw	r24, r26
    7518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    751c:	dc 01       	movw	r26, r24
    751e:	cb 01       	movw	r24, r22
    7520:	98 ab       	std	Y+48, r25	; 0x30
    7522:	8f a7       	std	Y+47, r24	; 0x2f
    7524:	0f c0       	rjmp	.+30     	; 0x7544 <vMenuOption+0x1dc>
    7526:	88 ec       	ldi	r24, 0xC8	; 200
    7528:	90 e0       	ldi	r25, 0x00	; 0
    752a:	9e a7       	std	Y+46, r25	; 0x2e
    752c:	8d a7       	std	Y+45, r24	; 0x2d
    752e:	8d a5       	ldd	r24, Y+45	; 0x2d
    7530:	9e a5       	ldd	r25, Y+46	; 0x2e
    7532:	01 97       	sbiw	r24, 0x01	; 1
    7534:	f1 f7       	brne	.-4      	; 0x7532 <vMenuOption+0x1ca>
    7536:	9e a7       	std	Y+46, r25	; 0x2e
    7538:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    753a:	8f a5       	ldd	r24, Y+47	; 0x2f
    753c:	98 a9       	ldd	r25, Y+48	; 0x30
    753e:	01 97       	sbiw	r24, 0x01	; 1
    7540:	98 ab       	std	Y+48, r25	; 0x30
    7542:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7544:	8f a5       	ldd	r24, Y+47	; 0x2f
    7546:	98 a9       	ldd	r25, Y+48	; 0x30
    7548:	00 97       	sbiw	r24, 0x00	; 0
    754a:	69 f7       	brne	.-38     	; 0x7526 <vMenuOption+0x1be>
    754c:	14 c0       	rjmp	.+40     	; 0x7576 <vMenuOption+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    754e:	69 a9       	ldd	r22, Y+49	; 0x31
    7550:	7a a9       	ldd	r23, Y+50	; 0x32
    7552:	8b a9       	ldd	r24, Y+51	; 0x33
    7554:	9c a9       	ldd	r25, Y+52	; 0x34
    7556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    755a:	dc 01       	movw	r26, r24
    755c:	cb 01       	movw	r24, r22
    755e:	98 ab       	std	Y+48, r25	; 0x30
    7560:	8f a7       	std	Y+47, r24	; 0x2f
    7562:	8f a5       	ldd	r24, Y+47	; 0x2f
    7564:	98 a9       	ldd	r25, Y+48	; 0x30
    7566:	9c a7       	std	Y+44, r25	; 0x2c
    7568:	8b a7       	std	Y+43, r24	; 0x2b
    756a:	8b a5       	ldd	r24, Y+43	; 0x2b
    756c:	9c a5       	ldd	r25, Y+44	; 0x2c
    756e:	01 97       	sbiw	r24, 0x01	; 1
    7570:	f1 f7       	brne	.-4      	; 0x756e <vMenuOption+0x206>
    7572:	9c a7       	std	Y+44, r25	; 0x2c
    7574:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(100);//Halt the system for the given time in (ms)
		response = SPI_ui8TransmitRecive(DEMAND_RESPONSE);//the master micro controller asks for the status
    7576:	8f ef       	ldi	r24, 0xFF	; 255
    7578:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <SPI_ui8TransmitRecive>
    757c:	8a af       	std	Y+58, r24	; 0x3a
		if(response == ON_STATUS)//if the response from the slave was on status
    757e:	8a ad       	ldd	r24, Y+58	; 0x3a
    7580:	81 30       	cpi	r24, 0x01	; 1
    7582:	29 f4       	brne	.+10     	; 0x758e <vMenuOption+0x226>
		{
			LCD_vSend_string("ON");//print the status on
    7584:	8c e7       	ldi	r24, 0x7C	; 124
    7586:	92 e0       	ldi	r25, 0x02	; 2
    7588:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    758c:	04 c0       	rjmp	.+8      	; 0x7596 <vMenuOption+0x22e>
		}
		else//if the response from the slave was off status
		{
			LCD_vSend_string("OFF");//print the status off
    758e:	8f e7       	ldi	r24, 0x7F	; 127
    7590:	92 e0       	ldi	r25, 0x02	; 2
    7592:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
		}

		LCD_movecursor(2,1);//move the cursor to the start of the second line
    7596:	82 e0       	ldi	r24, 0x02	; 2
    7598:	61 e0       	ldi	r22, 0x01	; 1
    759a:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
		LCD_vSend_string("1-On 2-Off 0-RET");//print the sub menu
    759e:	83 e8       	ldi	r24, 0x83	; 131
    75a0:	92 e0       	ldi	r25, 0x02	; 2
    75a2:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>

		/*******************************************************************************/

		key_pressed = u8GetKeyPressed(u8LoginMode);//wait for the user till key is pressed or the time is out
    75a6:	8f ad       	ldd	r24, Y+63	; 0x3f
    75a8:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <u8GetKeyPressed>
    75ac:	89 af       	std	Y+57, r24	; 0x39
    75ae:	80 e0       	ldi	r24, 0x00	; 0
    75b0:	90 e0       	ldi	r25, 0x00	; 0
    75b2:	a8 ec       	ldi	r26, 0xC8	; 200
    75b4:	b2 e4       	ldi	r27, 0x42	; 66
    75b6:	8f a3       	std	Y+39, r24	; 0x27
    75b8:	98 a7       	std	Y+40, r25	; 0x28
    75ba:	a9 a7       	std	Y+41, r26	; 0x29
    75bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    75be:	6f a1       	ldd	r22, Y+39	; 0x27
    75c0:	78 a5       	ldd	r23, Y+40	; 0x28
    75c2:	89 a5       	ldd	r24, Y+41	; 0x29
    75c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    75c6:	20 e0       	ldi	r18, 0x00	; 0
    75c8:	30 e0       	ldi	r19, 0x00	; 0
    75ca:	4a ef       	ldi	r20, 0xFA	; 250
    75cc:	54 e4       	ldi	r21, 0x44	; 68
    75ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    75d2:	dc 01       	movw	r26, r24
    75d4:	cb 01       	movw	r24, r22
    75d6:	8b a3       	std	Y+35, r24	; 0x23
    75d8:	9c a3       	std	Y+36, r25	; 0x24
    75da:	ad a3       	std	Y+37, r26	; 0x25
    75dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    75de:	6b a1       	ldd	r22, Y+35	; 0x23
    75e0:	7c a1       	ldd	r23, Y+36	; 0x24
    75e2:	8d a1       	ldd	r24, Y+37	; 0x25
    75e4:	9e a1       	ldd	r25, Y+38	; 0x26
    75e6:	20 e0       	ldi	r18, 0x00	; 0
    75e8:	30 e0       	ldi	r19, 0x00	; 0
    75ea:	40 e8       	ldi	r20, 0x80	; 128
    75ec:	5f e3       	ldi	r21, 0x3F	; 63
    75ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    75f2:	88 23       	and	r24, r24
    75f4:	2c f4       	brge	.+10     	; 0x7600 <vMenuOption+0x298>
		__ticks = 1;
    75f6:	81 e0       	ldi	r24, 0x01	; 1
    75f8:	90 e0       	ldi	r25, 0x00	; 0
    75fa:	9a a3       	std	Y+34, r25	; 0x22
    75fc:	89 a3       	std	Y+33, r24	; 0x21
    75fe:	3f c0       	rjmp	.+126    	; 0x767e <vMenuOption+0x316>
	else if (__tmp > 65535)
    7600:	6b a1       	ldd	r22, Y+35	; 0x23
    7602:	7c a1       	ldd	r23, Y+36	; 0x24
    7604:	8d a1       	ldd	r24, Y+37	; 0x25
    7606:	9e a1       	ldd	r25, Y+38	; 0x26
    7608:	20 e0       	ldi	r18, 0x00	; 0
    760a:	3f ef       	ldi	r19, 0xFF	; 255
    760c:	4f e7       	ldi	r20, 0x7F	; 127
    760e:	57 e4       	ldi	r21, 0x47	; 71
    7610:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7614:	18 16       	cp	r1, r24
    7616:	4c f5       	brge	.+82     	; 0x766a <vMenuOption+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7618:	6f a1       	ldd	r22, Y+39	; 0x27
    761a:	78 a5       	ldd	r23, Y+40	; 0x28
    761c:	89 a5       	ldd	r24, Y+41	; 0x29
    761e:	9a a5       	ldd	r25, Y+42	; 0x2a
    7620:	20 e0       	ldi	r18, 0x00	; 0
    7622:	30 e0       	ldi	r19, 0x00	; 0
    7624:	40 e2       	ldi	r20, 0x20	; 32
    7626:	51 e4       	ldi	r21, 0x41	; 65
    7628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    762c:	dc 01       	movw	r26, r24
    762e:	cb 01       	movw	r24, r22
    7630:	bc 01       	movw	r22, r24
    7632:	cd 01       	movw	r24, r26
    7634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7638:	dc 01       	movw	r26, r24
    763a:	cb 01       	movw	r24, r22
    763c:	9a a3       	std	Y+34, r25	; 0x22
    763e:	89 a3       	std	Y+33, r24	; 0x21
    7640:	0f c0       	rjmp	.+30     	; 0x7660 <vMenuOption+0x2f8>
    7642:	88 ec       	ldi	r24, 0xC8	; 200
    7644:	90 e0       	ldi	r25, 0x00	; 0
    7646:	98 a3       	std	Y+32, r25	; 0x20
    7648:	8f 8f       	std	Y+31, r24	; 0x1f
    764a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    764c:	98 a1       	ldd	r25, Y+32	; 0x20
    764e:	01 97       	sbiw	r24, 0x01	; 1
    7650:	f1 f7       	brne	.-4      	; 0x764e <vMenuOption+0x2e6>
    7652:	98 a3       	std	Y+32, r25	; 0x20
    7654:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7656:	89 a1       	ldd	r24, Y+33	; 0x21
    7658:	9a a1       	ldd	r25, Y+34	; 0x22
    765a:	01 97       	sbiw	r24, 0x01	; 1
    765c:	9a a3       	std	Y+34, r25	; 0x22
    765e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7660:	89 a1       	ldd	r24, Y+33	; 0x21
    7662:	9a a1       	ldd	r25, Y+34	; 0x22
    7664:	00 97       	sbiw	r24, 0x00	; 0
    7666:	69 f7       	brne	.-38     	; 0x7642 <vMenuOption+0x2da>
    7668:	14 c0       	rjmp	.+40     	; 0x7692 <vMenuOption+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    766a:	6b a1       	ldd	r22, Y+35	; 0x23
    766c:	7c a1       	ldd	r23, Y+36	; 0x24
    766e:	8d a1       	ldd	r24, Y+37	; 0x25
    7670:	9e a1       	ldd	r25, Y+38	; 0x26
    7672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7676:	dc 01       	movw	r26, r24
    7678:	cb 01       	movw	r24, r22
    767a:	9a a3       	std	Y+34, r25	; 0x22
    767c:	89 a3       	std	Y+33, r24	; 0x21
    767e:	89 a1       	ldd	r24, Y+33	; 0x21
    7680:	9a a1       	ldd	r25, Y+34	; 0x22
    7682:	9e 8f       	std	Y+30, r25	; 0x1e
    7684:	8d 8f       	std	Y+29, r24	; 0x1d
    7686:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7688:	9e 8d       	ldd	r25, Y+30	; 0x1e
    768a:	01 97       	sbiw	r24, 0x01	; 1
    768c:	f1 f7       	brne	.-4      	; 0x768a <vMenuOption+0x322>
    768e:	9e 8f       	std	Y+30, r25	; 0x1e
    7690:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);//to avoid the duplication of the pressed key

		/*there is no need to take any action in case of the user pressed 0(RET) key
		breaking the loop will be enough since it will be handled in the main*/

		if (key_pressed == '1')
    7692:	89 ad       	ldd	r24, Y+57	; 0x39
    7694:	81 33       	cpi	r24, 0x31	; 49
    7696:	21 f4       	brne	.+8      	; 0x76a0 <vMenuOption+0x338>
		{
			SPI_ui8TransmitRecive(u8TurnOnCode);//Send turn on signal from master to slave
    7698:	8c ad       	ldd	r24, Y+60	; 0x3c
    769a:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <SPI_ui8TransmitRecive>
    769e:	03 c1       	rjmp	.+518    	; 0x78a6 <vMenuOption+0x53e>
		}
		else if (key_pressed == '2')
    76a0:	89 ad       	ldd	r24, Y+57	; 0x39
    76a2:	82 33       	cpi	r24, 0x32	; 50
    76a4:	21 f4       	brne	.+8      	; 0x76ae <vMenuOption+0x346>
		{
			SPI_ui8TransmitRecive(u8TurnOffCode);//Send turn off signal from master to slave
    76a6:	8b ad       	ldd	r24, Y+59	; 0x3b
    76a8:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <SPI_ui8TransmitRecive>
    76ac:	fc c0       	rjmp	.+504    	; 0x78a6 <vMenuOption+0x53e>
		}
		else if( (key_pressed != NOT_PRESSED) && (key_pressed != '0') )//show wrong input message if the user entered non numeric value
    76ae:	89 ad       	ldd	r24, Y+57	; 0x39
    76b0:	8f 3f       	cpi	r24, 0xFF	; 255
    76b2:	09 f4       	brne	.+2      	; 0x76b6 <vMenuOption+0x34e>
    76b4:	f8 c0       	rjmp	.+496    	; 0x78a6 <vMenuOption+0x53e>
    76b6:	89 ad       	ldd	r24, Y+57	; 0x39
    76b8:	80 33       	cpi	r24, 0x30	; 48
    76ba:	09 f4       	brne	.+2      	; 0x76be <vMenuOption+0x356>
    76bc:	f4 c0       	rjmp	.+488    	; 0x78a6 <vMenuOption+0x53e>
		{
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    76be:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
			LCD_vSend_string("Wrong input");//print error message
    76c2:	84 e9       	ldi	r24, 0x94	; 148
    76c4:	92 e0       	ldi	r25, 0x02	; 2
    76c6:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
			DIO_write(BUZZER_PORT,BUZZER_PIN,1);
    76ca:	84 e4       	ldi	r24, 0x44	; 68
    76cc:	66 e0       	ldi	r22, 0x06	; 6
    76ce:	41 e0       	ldi	r20, 0x01	; 1
    76d0:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    76d4:	80 e0       	ldi	r24, 0x00	; 0
    76d6:	90 e0       	ldi	r25, 0x00	; 0
    76d8:	aa e7       	ldi	r26, 0x7A	; 122
    76da:	b3 e4       	ldi	r27, 0x43	; 67
    76dc:	89 8f       	std	Y+25, r24	; 0x19
    76de:	9a 8f       	std	Y+26, r25	; 0x1a
    76e0:	ab 8f       	std	Y+27, r26	; 0x1b
    76e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    76e4:	69 8d       	ldd	r22, Y+25	; 0x19
    76e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    76e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    76ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    76ec:	20 e0       	ldi	r18, 0x00	; 0
    76ee:	30 e0       	ldi	r19, 0x00	; 0
    76f0:	4a ef       	ldi	r20, 0xFA	; 250
    76f2:	54 e4       	ldi	r21, 0x44	; 68
    76f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    76f8:	dc 01       	movw	r26, r24
    76fa:	cb 01       	movw	r24, r22
    76fc:	8d 8b       	std	Y+21, r24	; 0x15
    76fe:	9e 8b       	std	Y+22, r25	; 0x16
    7700:	af 8b       	std	Y+23, r26	; 0x17
    7702:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7704:	6d 89       	ldd	r22, Y+21	; 0x15
    7706:	7e 89       	ldd	r23, Y+22	; 0x16
    7708:	8f 89       	ldd	r24, Y+23	; 0x17
    770a:	98 8d       	ldd	r25, Y+24	; 0x18
    770c:	20 e0       	ldi	r18, 0x00	; 0
    770e:	30 e0       	ldi	r19, 0x00	; 0
    7710:	40 e8       	ldi	r20, 0x80	; 128
    7712:	5f e3       	ldi	r21, 0x3F	; 63
    7714:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7718:	88 23       	and	r24, r24
    771a:	2c f4       	brge	.+10     	; 0x7726 <vMenuOption+0x3be>
		__ticks = 1;
    771c:	81 e0       	ldi	r24, 0x01	; 1
    771e:	90 e0       	ldi	r25, 0x00	; 0
    7720:	9c 8b       	std	Y+20, r25	; 0x14
    7722:	8b 8b       	std	Y+19, r24	; 0x13
    7724:	3f c0       	rjmp	.+126    	; 0x77a4 <vMenuOption+0x43c>
	else if (__tmp > 65535)
    7726:	6d 89       	ldd	r22, Y+21	; 0x15
    7728:	7e 89       	ldd	r23, Y+22	; 0x16
    772a:	8f 89       	ldd	r24, Y+23	; 0x17
    772c:	98 8d       	ldd	r25, Y+24	; 0x18
    772e:	20 e0       	ldi	r18, 0x00	; 0
    7730:	3f ef       	ldi	r19, 0xFF	; 255
    7732:	4f e7       	ldi	r20, 0x7F	; 127
    7734:	57 e4       	ldi	r21, 0x47	; 71
    7736:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    773a:	18 16       	cp	r1, r24
    773c:	4c f5       	brge	.+82     	; 0x7790 <vMenuOption+0x428>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    773e:	69 8d       	ldd	r22, Y+25	; 0x19
    7740:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7742:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7744:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7746:	20 e0       	ldi	r18, 0x00	; 0
    7748:	30 e0       	ldi	r19, 0x00	; 0
    774a:	40 e2       	ldi	r20, 0x20	; 32
    774c:	51 e4       	ldi	r21, 0x41	; 65
    774e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7752:	dc 01       	movw	r26, r24
    7754:	cb 01       	movw	r24, r22
    7756:	bc 01       	movw	r22, r24
    7758:	cd 01       	movw	r24, r26
    775a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    775e:	dc 01       	movw	r26, r24
    7760:	cb 01       	movw	r24, r22
    7762:	9c 8b       	std	Y+20, r25	; 0x14
    7764:	8b 8b       	std	Y+19, r24	; 0x13
    7766:	0f c0       	rjmp	.+30     	; 0x7786 <vMenuOption+0x41e>
    7768:	88 ec       	ldi	r24, 0xC8	; 200
    776a:	90 e0       	ldi	r25, 0x00	; 0
    776c:	9a 8b       	std	Y+18, r25	; 0x12
    776e:	89 8b       	std	Y+17, r24	; 0x11
    7770:	89 89       	ldd	r24, Y+17	; 0x11
    7772:	9a 89       	ldd	r25, Y+18	; 0x12
    7774:	01 97       	sbiw	r24, 0x01	; 1
    7776:	f1 f7       	brne	.-4      	; 0x7774 <vMenuOption+0x40c>
    7778:	9a 8b       	std	Y+18, r25	; 0x12
    777a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    777c:	8b 89       	ldd	r24, Y+19	; 0x13
    777e:	9c 89       	ldd	r25, Y+20	; 0x14
    7780:	01 97       	sbiw	r24, 0x01	; 1
    7782:	9c 8b       	std	Y+20, r25	; 0x14
    7784:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7786:	8b 89       	ldd	r24, Y+19	; 0x13
    7788:	9c 89       	ldd	r25, Y+20	; 0x14
    778a:	00 97       	sbiw	r24, 0x00	; 0
    778c:	69 f7       	brne	.-38     	; 0x7768 <vMenuOption+0x400>
    778e:	14 c0       	rjmp	.+40     	; 0x77b8 <vMenuOption+0x450>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7790:	6d 89       	ldd	r22, Y+21	; 0x15
    7792:	7e 89       	ldd	r23, Y+22	; 0x16
    7794:	8f 89       	ldd	r24, Y+23	; 0x17
    7796:	98 8d       	ldd	r25, Y+24	; 0x18
    7798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    779c:	dc 01       	movw	r26, r24
    779e:	cb 01       	movw	r24, r22
    77a0:	9c 8b       	std	Y+20, r25	; 0x14
    77a2:	8b 8b       	std	Y+19, r24	; 0x13
    77a4:	8b 89       	ldd	r24, Y+19	; 0x13
    77a6:	9c 89       	ldd	r25, Y+20	; 0x14
    77a8:	98 8b       	std	Y+16, r25	; 0x10
    77aa:	8f 87       	std	Y+15, r24	; 0x0f
    77ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    77ae:	98 89       	ldd	r25, Y+16	; 0x10
    77b0:	01 97       	sbiw	r24, 0x01	; 1
    77b2:	f1 f7       	brne	.-4      	; 0x77b0 <vMenuOption+0x448>
    77b4:	98 8b       	std	Y+16, r25	; 0x10
    77b6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(250);
			DIO_write(BUZZER_PORT,BUZZER_PIN,0);
    77b8:	84 e4       	ldi	r24, 0x44	; 68
    77ba:	66 e0       	ldi	r22, 0x06	; 6
    77bc:	40 e0       	ldi	r20, 0x00	; 0
    77be:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    77c2:	80 e0       	ldi	r24, 0x00	; 0
    77c4:	90 e0       	ldi	r25, 0x00	; 0
    77c6:	aa e7       	ldi	r26, 0x7A	; 122
    77c8:	b3 e4       	ldi	r27, 0x43	; 67
    77ca:	8b 87       	std	Y+11, r24	; 0x0b
    77cc:	9c 87       	std	Y+12, r25	; 0x0c
    77ce:	ad 87       	std	Y+13, r26	; 0x0d
    77d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    77d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    77d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    77d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    77d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    77da:	20 e0       	ldi	r18, 0x00	; 0
    77dc:	30 e0       	ldi	r19, 0x00	; 0
    77de:	4a ef       	ldi	r20, 0xFA	; 250
    77e0:	54 e4       	ldi	r21, 0x44	; 68
    77e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    77e6:	dc 01       	movw	r26, r24
    77e8:	cb 01       	movw	r24, r22
    77ea:	8f 83       	std	Y+7, r24	; 0x07
    77ec:	98 87       	std	Y+8, r25	; 0x08
    77ee:	a9 87       	std	Y+9, r26	; 0x09
    77f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    77f2:	6f 81       	ldd	r22, Y+7	; 0x07
    77f4:	78 85       	ldd	r23, Y+8	; 0x08
    77f6:	89 85       	ldd	r24, Y+9	; 0x09
    77f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    77fa:	20 e0       	ldi	r18, 0x00	; 0
    77fc:	30 e0       	ldi	r19, 0x00	; 0
    77fe:	40 e8       	ldi	r20, 0x80	; 128
    7800:	5f e3       	ldi	r21, 0x3F	; 63
    7802:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7806:	88 23       	and	r24, r24
    7808:	2c f4       	brge	.+10     	; 0x7814 <vMenuOption+0x4ac>
		__ticks = 1;
    780a:	81 e0       	ldi	r24, 0x01	; 1
    780c:	90 e0       	ldi	r25, 0x00	; 0
    780e:	9e 83       	std	Y+6, r25	; 0x06
    7810:	8d 83       	std	Y+5, r24	; 0x05
    7812:	3f c0       	rjmp	.+126    	; 0x7892 <vMenuOption+0x52a>
	else if (__tmp > 65535)
    7814:	6f 81       	ldd	r22, Y+7	; 0x07
    7816:	78 85       	ldd	r23, Y+8	; 0x08
    7818:	89 85       	ldd	r24, Y+9	; 0x09
    781a:	9a 85       	ldd	r25, Y+10	; 0x0a
    781c:	20 e0       	ldi	r18, 0x00	; 0
    781e:	3f ef       	ldi	r19, 0xFF	; 255
    7820:	4f e7       	ldi	r20, 0x7F	; 127
    7822:	57 e4       	ldi	r21, 0x47	; 71
    7824:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7828:	18 16       	cp	r1, r24
    782a:	4c f5       	brge	.+82     	; 0x787e <vMenuOption+0x516>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    782c:	6b 85       	ldd	r22, Y+11	; 0x0b
    782e:	7c 85       	ldd	r23, Y+12	; 0x0c
    7830:	8d 85       	ldd	r24, Y+13	; 0x0d
    7832:	9e 85       	ldd	r25, Y+14	; 0x0e
    7834:	20 e0       	ldi	r18, 0x00	; 0
    7836:	30 e0       	ldi	r19, 0x00	; 0
    7838:	40 e2       	ldi	r20, 0x20	; 32
    783a:	51 e4       	ldi	r21, 0x41	; 65
    783c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7840:	dc 01       	movw	r26, r24
    7842:	cb 01       	movw	r24, r22
    7844:	bc 01       	movw	r22, r24
    7846:	cd 01       	movw	r24, r26
    7848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    784c:	dc 01       	movw	r26, r24
    784e:	cb 01       	movw	r24, r22
    7850:	9e 83       	std	Y+6, r25	; 0x06
    7852:	8d 83       	std	Y+5, r24	; 0x05
    7854:	0f c0       	rjmp	.+30     	; 0x7874 <vMenuOption+0x50c>
    7856:	88 ec       	ldi	r24, 0xC8	; 200
    7858:	90 e0       	ldi	r25, 0x00	; 0
    785a:	9c 83       	std	Y+4, r25	; 0x04
    785c:	8b 83       	std	Y+3, r24	; 0x03
    785e:	8b 81       	ldd	r24, Y+3	; 0x03
    7860:	9c 81       	ldd	r25, Y+4	; 0x04
    7862:	01 97       	sbiw	r24, 0x01	; 1
    7864:	f1 f7       	brne	.-4      	; 0x7862 <vMenuOption+0x4fa>
    7866:	9c 83       	std	Y+4, r25	; 0x04
    7868:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    786a:	8d 81       	ldd	r24, Y+5	; 0x05
    786c:	9e 81       	ldd	r25, Y+6	; 0x06
    786e:	01 97       	sbiw	r24, 0x01	; 1
    7870:	9e 83       	std	Y+6, r25	; 0x06
    7872:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7874:	8d 81       	ldd	r24, Y+5	; 0x05
    7876:	9e 81       	ldd	r25, Y+6	; 0x06
    7878:	00 97       	sbiw	r24, 0x00	; 0
    787a:	69 f7       	brne	.-38     	; 0x7856 <vMenuOption+0x4ee>
    787c:	14 c0       	rjmp	.+40     	; 0x78a6 <vMenuOption+0x53e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    787e:	6f 81       	ldd	r22, Y+7	; 0x07
    7880:	78 85       	ldd	r23, Y+8	; 0x08
    7882:	89 85       	ldd	r24, Y+9	; 0x09
    7884:	9a 85       	ldd	r25, Y+10	; 0x0a
    7886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    788a:	dc 01       	movw	r26, r24
    788c:	cb 01       	movw	r24, r22
    788e:	9e 83       	std	Y+6, r25	; 0x06
    7890:	8d 83       	std	Y+5, r24	; 0x05
    7892:	8d 81       	ldd	r24, Y+5	; 0x05
    7894:	9e 81       	ldd	r25, Y+6	; 0x06
    7896:	9a 83       	std	Y+2, r25	; 0x02
    7898:	89 83       	std	Y+1, r24	; 0x01
    789a:	89 81       	ldd	r24, Y+1	; 0x01
    789c:	9a 81       	ldd	r25, Y+2	; 0x02
    789e:	01 97       	sbiw	r24, 0x01	; 1
    78a0:	f1 f7       	brne	.-4      	; 0x789e <vMenuOption+0x536>
    78a2:	9a 83       	std	Y+2, r25	; 0x02
    78a4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);//Halt the system for the given time in (ms)
		}
	} while ( ( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
    78a6:	89 ad       	ldd	r24, Y+57	; 0x39
    78a8:	80 33       	cpi	r24, 0x30	; 48
    78aa:	18 f0       	brcs	.+6      	; 0x78b2 <vMenuOption+0x54a>
    78ac:	89 ad       	ldd	r24, Y+57	; 0x39
    78ae:	83 33       	cpi	r24, 0x33	; 51
    78b0:	28 f0       	brcs	.+10     	; 0x78bc <vMenuOption+0x554>
    78b2:	80 91 ba 02 	lds	r24, 0x02BA
    78b6:	88 23       	and	r24, r24
    78b8:	09 f4       	brne	.+2      	; 0x78bc <vMenuOption+0x554>
    78ba:	6a cd       	rjmp	.-1324   	; 0x7390 <vMenuOption+0x28>
}
    78bc:	cf 5b       	subi	r28, 0xBF	; 191
    78be:	df 4f       	sbci	r29, 0xFF	; 255
    78c0:	0f b6       	in	r0, 0x3f	; 63
    78c2:	f8 94       	cli
    78c4:	de bf       	out	0x3e, r29	; 62
    78c6:	0f be       	out	0x3f, r0	; 63
    78c8:	cd bf       	out	0x3d, r28	; 61
    78ca:	cf 91       	pop	r28
    78cc:	df 91       	pop	r29
    78ce:	08 95       	ret

000078d0 <u8GetKeyPressed>:

uint8 u8GetKeyPressed(const uint8 u8LoginMode)
{
    78d0:	df 93       	push	r29
    78d2:	cf 93       	push	r28
    78d4:	00 d0       	rcall	.+0      	; 0x78d6 <u8GetKeyPressed+0x6>
    78d6:	cd b7       	in	r28, 0x3d	; 61
    78d8:	de b7       	in	r29, 0x3e	; 62
    78da:	8a 83       	std	Y+2, r24	; 0x02
	uint8 key_pressed = NOT_PRESSED;
    78dc:	8f ef       	ldi	r24, 0xFF	; 255
    78de:	89 83       	std	Y+1, r24	; 0x01
    78e0:	1d c0       	rjmp	.+58     	; 0x791c <u8GetKeyPressed+0x4c>
	while (key_pressed == NOT_PRESSED)//repeat till the user press any key
	{
		if ( (session_counter >= ADMIN_TIMEOUT && u8LoginMode == ADMIN) || ( session_counter >= GUEST_TIMEOUT && u8LoginMode == GUEST ))//check for timeout
    78e2:	80 91 b8 02 	lds	r24, 0x02B8
    78e6:	90 91 b9 02 	lds	r25, 0x02B9
    78ea:	23 e2       	ldi	r18, 0x23	; 35
    78ec:	88 32       	cpi	r24, 0x28	; 40
    78ee:	92 07       	cpc	r25, r18
    78f0:	18 f0       	brcs	.+6      	; 0x78f8 <u8GetKeyPressed+0x28>
    78f2:	8a 81       	ldd	r24, Y+2	; 0x02
    78f4:	81 30       	cpi	r24, 0x01	; 1
    78f6:	59 f0       	breq	.+22     	; 0x790e <u8GetKeyPressed+0x3e>
    78f8:	80 91 b8 02 	lds	r24, 0x02B8
    78fc:	90 91 b9 02 	lds	r25, 0x02B9
    7900:	23 e2       	ldi	r18, 0x23	; 35
    7902:	88 32       	cpi	r24, 0x28	; 40
    7904:	92 07       	cpc	r25, r18
    7906:	38 f0       	brcs	.+14     	; 0x7916 <u8GetKeyPressed+0x46>
    7908:	8a 81       	ldd	r24, Y+2	; 0x02
    790a:	82 30       	cpi	r24, 0x02	; 2
    790c:	21 f4       	brne	.+8      	; 0x7916 <u8GetKeyPressed+0x46>
		{
			timeout_flag = TRUE;//set timeout flag to true
    790e:	81 e0       	ldi	r24, 0x01	; 1
    7910:	80 93 ba 02 	sts	0x02BA, r24
    7914:	06 c0       	rjmp	.+12     	; 0x7922 <u8GetKeyPressed+0x52>
			break;//break the loop that wait for input from the user
		}

		key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
    7916:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <keypad_u8check_press>
    791a:	89 83       	std	Y+1, r24	; 0x01
}

uint8 u8GetKeyPressed(const uint8 u8LoginMode)
{
	uint8 key_pressed = NOT_PRESSED;
	while (key_pressed == NOT_PRESSED)//repeat till the user press any key
    791c:	89 81       	ldd	r24, Y+1	; 0x01
    791e:	8f 3f       	cpi	r24, 0xFF	; 255
    7920:	01 f3       	breq	.-64     	; 0x78e2 <u8GetKeyPressed+0x12>
			break;//break the loop that wait for input from the user
		}

		key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
	}
	return key_pressed;
    7922:	89 81       	ldd	r24, Y+1	; 0x01
}
    7924:	0f 90       	pop	r0
    7926:	0f 90       	pop	r0
    7928:	cf 91       	pop	r28
    792a:	df 91       	pop	r29
    792c:	08 95       	ret

0000792e <timer0_initializeCTC>:

#include "timer_driver.h"

void timer0_initializeCTC(void)
{
    792e:	df 93       	push	r29
    7930:	cf 93       	push	r28
    7932:	cd b7       	in	r28, 0x3d	; 61
    7934:	de b7       	in	r29, 0x3e	; 62
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 78; //to achieve tick equal to 10 msec
    7936:	ec e5       	ldi	r30, 0x5C	; 92
    7938:	f0 e0       	ldi	r31, 0x00	; 0
    793a:	8e e4       	ldi	r24, 0x4E	; 78
    793c:	80 83       	st	Z, r24
	
	//Set timer mode
	//Set the mode as Compare match
	SET_BIT(TCCR0, WGM01);
    793e:	a3 e5       	ldi	r26, 0x53	; 83
    7940:	b0 e0       	ldi	r27, 0x00	; 0
    7942:	e3 e5       	ldi	r30, 0x53	; 83
    7944:	f0 e0       	ldi	r31, 0x00	; 0
    7946:	80 81       	ld	r24, Z
    7948:	88 60       	ori	r24, 0x08	; 8
    794a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM00);
    794c:	a3 e5       	ldi	r26, 0x53	; 83
    794e:	b0 e0       	ldi	r27, 0x00	; 0
    7950:	e3 e5       	ldi	r30, 0x53	; 83
    7952:	f0 e0       	ldi	r31, 0x00	; 0
    7954:	80 81       	ld	r24, Z
    7956:	8f 7b       	andi	r24, 0xBF	; 191
    7958:	8c 93       	st	X, r24
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
    795a:	a3 e5       	ldi	r26, 0x53	; 83
    795c:	b0 e0       	ldi	r27, 0x00	; 0
    795e:	e3 e5       	ldi	r30, 0x53	; 83
    7960:	f0 e0       	ldi	r31, 0x00	; 0
    7962:	80 81       	ld	r24, Z
    7964:	81 60       	ori	r24, 0x01	; 1
    7966:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    7968:	a3 e5       	ldi	r26, 0x53	; 83
    796a:	b0 e0       	ldi	r27, 0x00	; 0
    796c:	e3 e5       	ldi	r30, 0x53	; 83
    796e:	f0 e0       	ldi	r31, 0x00	; 0
    7970:	80 81       	ld	r24, Z
    7972:	8d 7f       	andi	r24, 0xFD	; 253
    7974:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS02);
    7976:	a3 e5       	ldi	r26, 0x53	; 83
    7978:	b0 e0       	ldi	r27, 0x00	; 0
    797a:	e3 e5       	ldi	r30, 0x53	; 83
    797c:	f0 e0       	ldi	r31, 0x00	; 0
    797e:	80 81       	ld	r24, Z
    7980:	84 60       	ori	r24, 0x04	; 4
    7982:	8c 93       	st	X, r24
	
	//Enable global interrupts
	sei();
    7984:	78 94       	sei
	
	//Enable timer 0 interrupt for compare match
	SET_BIT(TIMSK, OCIE0);
    7986:	a9 e5       	ldi	r26, 0x59	; 89
    7988:	b0 e0       	ldi	r27, 0x00	; 0
    798a:	e9 e5       	ldi	r30, 0x59	; 89
    798c:	f0 e0       	ldi	r31, 0x00	; 0
    798e:	80 81       	ld	r24, Z
    7990:	82 60       	ori	r24, 0x02	; 2
    7992:	8c 93       	st	X, r24
}
    7994:	cf 91       	pop	r28
    7996:	df 91       	pop	r29
    7998:	08 95       	ret

0000799a <timer0_stop>:

void timer0_stop(void)
{
    799a:	df 93       	push	r29
    799c:	cf 93       	push	r28
    799e:	cd b7       	in	r28, 0x3d	; 61
    79a0:	de b7       	in	r29, 0x3e	; 62
	//disable the clock to stop the counter
	CLR_BIT(TCCR0, CS00);
    79a2:	a3 e5       	ldi	r26, 0x53	; 83
    79a4:	b0 e0       	ldi	r27, 0x00	; 0
    79a6:	e3 e5       	ldi	r30, 0x53	; 83
    79a8:	f0 e0       	ldi	r31, 0x00	; 0
    79aa:	80 81       	ld	r24, Z
    79ac:	8e 7f       	andi	r24, 0xFE	; 254
    79ae:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    79b0:	a3 e5       	ldi	r26, 0x53	; 83
    79b2:	b0 e0       	ldi	r27, 0x00	; 0
    79b4:	e3 e5       	ldi	r30, 0x53	; 83
    79b6:	f0 e0       	ldi	r31, 0x00	; 0
    79b8:	80 81       	ld	r24, Z
    79ba:	8d 7f       	andi	r24, 0xFD	; 253
    79bc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    79be:	a3 e5       	ldi	r26, 0x53	; 83
    79c0:	b0 e0       	ldi	r27, 0x00	; 0
    79c2:	e3 e5       	ldi	r30, 0x53	; 83
    79c4:	f0 e0       	ldi	r31, 0x00	; 0
    79c6:	80 81       	ld	r24, Z
    79c8:	8b 7f       	andi	r24, 0xFB	; 251
    79ca:	8c 93       	st	X, r24
}
    79cc:	cf 91       	pop	r28
    79ce:	df 91       	pop	r29
    79d0:	08 95       	ret

000079d2 <timer_initializefastpwm>:
void timer_initializefastpwm(void)
{
    79d2:	df 93       	push	r29
    79d4:	cf 93       	push	r28
    79d6:	cd b7       	in	r28, 0x3d	; 61
    79d8:	de b7       	in	r29, 0x3e	; 62
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 128;
    79da:	ec e5       	ldi	r30, 0x5C	; 92
    79dc:	f0 e0       	ldi	r31, 0x00	; 0
    79de:	80 e8       	ldi	r24, 0x80	; 128
    79e0:	80 83       	st	Z, r24
	
	//Set timer mode
	//adjust fast pulse width modulation mode
	SET_BIT(TCCR0, WGM00); 
    79e2:	a3 e5       	ldi	r26, 0x53	; 83
    79e4:	b0 e0       	ldi	r27, 0x00	; 0
    79e6:	e3 e5       	ldi	r30, 0x53	; 83
    79e8:	f0 e0       	ldi	r31, 0x00	; 0
    79ea:	80 81       	ld	r24, Z
    79ec:	80 64       	ori	r24, 0x40	; 64
    79ee:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    79f0:	a3 e5       	ldi	r26, 0x53	; 83
    79f2:	b0 e0       	ldi	r27, 0x00	; 0
    79f4:	e3 e5       	ldi	r30, 0x53	; 83
    79f6:	f0 e0       	ldi	r31, 0x00	; 0
    79f8:	80 81       	ld	r24, Z
    79fa:	88 60       	ori	r24, 0x08	; 8
    79fc:	8c 93       	st	X, r24
	
	//Enable global interrupts
	sei();
    79fe:	78 94       	sei
	
	SET_BIT(TCCR0, COM01); //adjust non inverting mode
    7a00:	a3 e5       	ldi	r26, 0x53	; 83
    7a02:	b0 e0       	ldi	r27, 0x00	; 0
    7a04:	e3 e5       	ldi	r30, 0x53	; 83
    7a06:	f0 e0       	ldi	r31, 0x00	; 0
    7a08:	80 81       	ld	r24, Z
    7a0a:	80 62       	ori	r24, 0x20	; 32
    7a0c:	8c 93       	st	X, r24
	
	//Enable timer0 interrupt for overflow mode
	SET_BIT(TIMSK,TOIE0);
    7a0e:	a9 e5       	ldi	r26, 0x59	; 89
    7a10:	b0 e0       	ldi	r27, 0x00	; 0
    7a12:	e9 e5       	ldi	r30, 0x59	; 89
    7a14:	f0 e0       	ldi	r31, 0x00	; 0
    7a16:	80 81       	ld	r24, Z
    7a18:	81 60       	ori	r24, 0x01	; 1
    7a1a:	8c 93       	st	X, r24
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
    7a1c:	a3 e5       	ldi	r26, 0x53	; 83
    7a1e:	b0 e0       	ldi	r27, 0x00	; 0
    7a20:	e3 e5       	ldi	r30, 0x53	; 83
    7a22:	f0 e0       	ldi	r31, 0x00	; 0
    7a24:	80 81       	ld	r24, Z
    7a26:	81 60       	ori	r24, 0x01	; 1
    7a28:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    7a2a:	a3 e5       	ldi	r26, 0x53	; 83
    7a2c:	b0 e0       	ldi	r27, 0x00	; 0
    7a2e:	e3 e5       	ldi	r30, 0x53	; 83
    7a30:	f0 e0       	ldi	r31, 0x00	; 0
    7a32:	80 81       	ld	r24, Z
    7a34:	8d 7f       	andi	r24, 0xFD	; 253
    7a36:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS02);
    7a38:	a3 e5       	ldi	r26, 0x53	; 83
    7a3a:	b0 e0       	ldi	r27, 0x00	; 0
    7a3c:	e3 e5       	ldi	r30, 0x53	; 83
    7a3e:	f0 e0       	ldi	r31, 0x00	; 0
    7a40:	80 81       	ld	r24, Z
    7a42:	84 60       	ori	r24, 0x04	; 4
    7a44:	8c 93       	st	X, r24
}
    7a46:	cf 91       	pop	r28
    7a48:	df 91       	pop	r29
    7a4a:	08 95       	ret

00007a4c <change_dutycycle>:
void change_dutycycle(float64 duty)
{
    7a4c:	0f 93       	push	r16
    7a4e:	1f 93       	push	r17
    7a50:	df 93       	push	r29
    7a52:	cf 93       	push	r28
    7a54:	00 d0       	rcall	.+0      	; 0x7a56 <change_dutycycle+0xa>
    7a56:	00 d0       	rcall	.+0      	; 0x7a58 <change_dutycycle+0xc>
    7a58:	cd b7       	in	r28, 0x3d	; 61
    7a5a:	de b7       	in	r29, 0x3e	; 62
    7a5c:	69 83       	std	Y+1, r22	; 0x01
    7a5e:	7a 83       	std	Y+2, r23	; 0x02
    7a60:	8b 83       	std	Y+3, r24	; 0x03
    7a62:	9c 83       	std	Y+4, r25	; 0x04
	OCR0 = (duty / 100) * 256;//Set the OCR0 depending on the duty percentage
    7a64:	0c e5       	ldi	r16, 0x5C	; 92
    7a66:	10 e0       	ldi	r17, 0x00	; 0
    7a68:	69 81       	ldd	r22, Y+1	; 0x01
    7a6a:	7a 81       	ldd	r23, Y+2	; 0x02
    7a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    7a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    7a70:	20 e0       	ldi	r18, 0x00	; 0
    7a72:	30 e0       	ldi	r19, 0x00	; 0
    7a74:	48 ec       	ldi	r20, 0xC8	; 200
    7a76:	52 e4       	ldi	r21, 0x42	; 66
    7a78:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    7a7c:	dc 01       	movw	r26, r24
    7a7e:	cb 01       	movw	r24, r22
    7a80:	bc 01       	movw	r22, r24
    7a82:	cd 01       	movw	r24, r26
    7a84:	20 e0       	ldi	r18, 0x00	; 0
    7a86:	30 e0       	ldi	r19, 0x00	; 0
    7a88:	40 e8       	ldi	r20, 0x80	; 128
    7a8a:	53 e4       	ldi	r21, 0x43	; 67
    7a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7a90:	dc 01       	movw	r26, r24
    7a92:	cb 01       	movw	r24, r22
    7a94:	bc 01       	movw	r22, r24
    7a96:	cd 01       	movw	r24, r26
    7a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7a9c:	dc 01       	movw	r26, r24
    7a9e:	cb 01       	movw	r24, r22
    7aa0:	f8 01       	movw	r30, r16
    7aa2:	80 83       	st	Z, r24
}
    7aa4:	0f 90       	pop	r0
    7aa6:	0f 90       	pop	r0
    7aa8:	0f 90       	pop	r0
    7aaa:	0f 90       	pop	r0
    7aac:	cf 91       	pop	r28
    7aae:	df 91       	pop	r29
    7ab0:	1f 91       	pop	r17
    7ab2:	0f 91       	pop	r16
    7ab4:	08 95       	ret

00007ab6 <__prologue_saves__>:
    7ab6:	2f 92       	push	r2
    7ab8:	3f 92       	push	r3
    7aba:	4f 92       	push	r4
    7abc:	5f 92       	push	r5
    7abe:	6f 92       	push	r6
    7ac0:	7f 92       	push	r7
    7ac2:	8f 92       	push	r8
    7ac4:	9f 92       	push	r9
    7ac6:	af 92       	push	r10
    7ac8:	bf 92       	push	r11
    7aca:	cf 92       	push	r12
    7acc:	df 92       	push	r13
    7ace:	ef 92       	push	r14
    7ad0:	ff 92       	push	r15
    7ad2:	0f 93       	push	r16
    7ad4:	1f 93       	push	r17
    7ad6:	cf 93       	push	r28
    7ad8:	df 93       	push	r29
    7ada:	cd b7       	in	r28, 0x3d	; 61
    7adc:	de b7       	in	r29, 0x3e	; 62
    7ade:	ca 1b       	sub	r28, r26
    7ae0:	db 0b       	sbc	r29, r27
    7ae2:	0f b6       	in	r0, 0x3f	; 63
    7ae4:	f8 94       	cli
    7ae6:	de bf       	out	0x3e, r29	; 62
    7ae8:	0f be       	out	0x3f, r0	; 63
    7aea:	cd bf       	out	0x3d, r28	; 61
    7aec:	09 94       	ijmp

00007aee <__epilogue_restores__>:
    7aee:	2a 88       	ldd	r2, Y+18	; 0x12
    7af0:	39 88       	ldd	r3, Y+17	; 0x11
    7af2:	48 88       	ldd	r4, Y+16	; 0x10
    7af4:	5f 84       	ldd	r5, Y+15	; 0x0f
    7af6:	6e 84       	ldd	r6, Y+14	; 0x0e
    7af8:	7d 84       	ldd	r7, Y+13	; 0x0d
    7afa:	8c 84       	ldd	r8, Y+12	; 0x0c
    7afc:	9b 84       	ldd	r9, Y+11	; 0x0b
    7afe:	aa 84       	ldd	r10, Y+10	; 0x0a
    7b00:	b9 84       	ldd	r11, Y+9	; 0x09
    7b02:	c8 84       	ldd	r12, Y+8	; 0x08
    7b04:	df 80       	ldd	r13, Y+7	; 0x07
    7b06:	ee 80       	ldd	r14, Y+6	; 0x06
    7b08:	fd 80       	ldd	r15, Y+5	; 0x05
    7b0a:	0c 81       	ldd	r16, Y+4	; 0x04
    7b0c:	1b 81       	ldd	r17, Y+3	; 0x03
    7b0e:	aa 81       	ldd	r26, Y+2	; 0x02
    7b10:	b9 81       	ldd	r27, Y+1	; 0x01
    7b12:	ce 0f       	add	r28, r30
    7b14:	d1 1d       	adc	r29, r1
    7b16:	0f b6       	in	r0, 0x3f	; 63
    7b18:	f8 94       	cli
    7b1a:	de bf       	out	0x3e, r29	; 62
    7b1c:	0f be       	out	0x3f, r0	; 63
    7b1e:	cd bf       	out	0x3d, r28	; 61
    7b20:	ed 01       	movw	r28, r26
    7b22:	08 95       	ret

00007b24 <__eerd_byte_m32>:
    7b24:	e1 99       	sbic	0x1c, 1	; 28
    7b26:	fe cf       	rjmp	.-4      	; 0x7b24 <__eerd_byte_m32>
    7b28:	9f bb       	out	0x1f, r25	; 31
    7b2a:	8e bb       	out	0x1e, r24	; 30
    7b2c:	e0 9a       	sbi	0x1c, 0	; 28
    7b2e:	99 27       	eor	r25, r25
    7b30:	8d b3       	in	r24, 0x1d	; 29
    7b32:	08 95       	ret

00007b34 <__eeupd_byte_m32>:
    7b34:	26 2f       	mov	r18, r22

00007b36 <__eeupd_r18_m32>:
    7b36:	e1 99       	sbic	0x1c, 1	; 28
    7b38:	fe cf       	rjmp	.-4      	; 0x7b36 <__eeupd_r18_m32>
    7b3a:	9f bb       	out	0x1f, r25	; 31
    7b3c:	8e bb       	out	0x1e, r24	; 30
    7b3e:	e0 9a       	sbi	0x1c, 0	; 28
    7b40:	01 97       	sbiw	r24, 0x01	; 1
    7b42:	0d b2       	in	r0, 0x1d	; 29
    7b44:	02 16       	cp	r0, r18
    7b46:	31 f0       	breq	.+12     	; 0x7b54 <__eeupd_r18_m32+0x1e>
    7b48:	2d bb       	out	0x1d, r18	; 29
    7b4a:	0f b6       	in	r0, 0x3f	; 63
    7b4c:	f8 94       	cli
    7b4e:	e2 9a       	sbi	0x1c, 2	; 28
    7b50:	e1 9a       	sbi	0x1c, 1	; 28
    7b52:	0f be       	out	0x3f, r0	; 63
    7b54:	08 95       	ret

00007b56 <__eewr_byte_m32>:
    7b56:	26 2f       	mov	r18, r22

00007b58 <__eewr_r18_m32>:
    7b58:	e1 99       	sbic	0x1c, 1	; 28
    7b5a:	fe cf       	rjmp	.-4      	; 0x7b58 <__eewr_r18_m32>
    7b5c:	9f bb       	out	0x1f, r25	; 31
    7b5e:	8e bb       	out	0x1e, r24	; 30
    7b60:	2d bb       	out	0x1d, r18	; 29
    7b62:	0f b6       	in	r0, 0x3f	; 63
    7b64:	f8 94       	cli
    7b66:	e2 9a       	sbi	0x1c, 2	; 28
    7b68:	e1 9a       	sbi	0x1c, 1	; 28
    7b6a:	0f be       	out	0x3f, r0	; 63
    7b6c:	01 96       	adiw	r24, 0x01	; 1
    7b6e:	08 95       	ret

00007b70 <_exit>:
    7b70:	f8 94       	cli

00007b72 <__stop_program>:
    7b72:	ff cf       	rjmp	.-2      	; 0x7b72 <__stop_program>
