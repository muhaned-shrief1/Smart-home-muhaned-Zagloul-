
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000229a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  0000229a  0000232e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080016a  0080016a  00002438  2**0
                  ALLOC
  3 .stab         00001c38  00000000  00000000  00002438  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c31  00000000  00000000  00004070  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00004ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d8  00000000  00000000  00004e21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002114  00000000  00000000  00004ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000121a  00000000  00000000  0000710d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001165  00000000  00000000  00008327  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000948c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f7  00000000  00000000  0000962c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009a2  00000000  00000000  00009923  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a2c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 36       	cpi	r26, 0x6E	; 110
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <main>
      8a:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1c 11 	jmp	0x2238	; 0x2238 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 bc 06 	call	0xd78	; 0xd78 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__epilogue_restores__+0x18>

000007ea <__floatsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__prologue_saves__+0x12>
     7f6:	9b 01       	movw	r18, r22
     7f8:	ac 01       	movw	r20, r24
     7fa:	83 e0       	ldi	r24, 0x03	; 3
     7fc:	89 83       	std	Y+1, r24	; 0x01
     7fe:	da 01       	movw	r26, r20
     800:	c9 01       	movw	r24, r18
     802:	88 27       	eor	r24, r24
     804:	b7 fd       	sbrc	r27, 7
     806:	83 95       	inc	r24
     808:	99 27       	eor	r25, r25
     80a:	aa 27       	eor	r26, r26
     80c:	bb 27       	eor	r27, r27
     80e:	b8 2e       	mov	r11, r24
     810:	21 15       	cp	r18, r1
     812:	31 05       	cpc	r19, r1
     814:	41 05       	cpc	r20, r1
     816:	51 05       	cpc	r21, r1
     818:	19 f4       	brne	.+6      	; 0x820 <__floatsisf+0x36>
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	3a c0       	rjmp	.+116    	; 0x894 <__stack+0x35>
     820:	88 23       	and	r24, r24
     822:	a9 f0       	breq	.+42     	; 0x84e <__floatsisf+0x64>
     824:	20 30       	cpi	r18, 0x00	; 0
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	38 07       	cpc	r19, r24
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	48 07       	cpc	r20, r24
     82e:	80 e8       	ldi	r24, 0x80	; 128
     830:	58 07       	cpc	r21, r24
     832:	29 f4       	brne	.+10     	; 0x83e <__floatsisf+0x54>
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	9f ec       	ldi	r25, 0xCF	; 207
     83c:	30 c0       	rjmp	.+96     	; 0x89e <__stack+0x3f>
     83e:	ee 24       	eor	r14, r14
     840:	ff 24       	eor	r15, r15
     842:	87 01       	movw	r16, r14
     844:	e2 1a       	sub	r14, r18
     846:	f3 0a       	sbc	r15, r19
     848:	04 0b       	sbc	r16, r20
     84a:	15 0b       	sbc	r17, r21
     84c:	02 c0       	rjmp	.+4      	; 0x852 <__floatsisf+0x68>
     84e:	79 01       	movw	r14, r18
     850:	8a 01       	movw	r16, r20
     852:	8e e1       	ldi	r24, 0x1E	; 30
     854:	c8 2e       	mov	r12, r24
     856:	d1 2c       	mov	r13, r1
     858:	dc 82       	std	Y+4, r13	; 0x04
     85a:	cb 82       	std	Y+3, r12	; 0x03
     85c:	ed 82       	std	Y+5, r14	; 0x05
     85e:	fe 82       	std	Y+6, r15	; 0x06
     860:	0f 83       	std	Y+7, r16	; 0x07
     862:	18 87       	std	Y+8, r17	; 0x08
     864:	c8 01       	movw	r24, r16
     866:	b7 01       	movw	r22, r14
     868:	0e 94 20 05 	call	0xa40	; 0xa40 <__clzsi2>
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	18 16       	cp	r1, r24
     870:	19 06       	cpc	r1, r25
     872:	84 f4       	brge	.+32     	; 0x894 <__stack+0x35>
     874:	08 2e       	mov	r0, r24
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	ee 0c       	add	r14, r14
     87a:	ff 1c       	adc	r15, r15
     87c:	00 1f       	adc	r16, r16
     87e:	11 1f       	adc	r17, r17
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	ed 82       	std	Y+5, r14	; 0x05
     886:	fe 82       	std	Y+6, r15	; 0x06
     888:	0f 83       	std	Y+7, r16	; 0x07
     88a:	18 87       	std	Y+8, r17	; 0x08
     88c:	c8 1a       	sub	r12, r24
     88e:	d9 0a       	sbc	r13, r25
     890:	dc 82       	std	Y+4, r13	; 0x04
     892:	cb 82       	std	Y+3, r12	; 0x03
     894:	ba 82       	std	Y+2, r11	; 0x02
     896:	ce 01       	movw	r24, r28
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     89e:	28 96       	adiw	r28, 0x08	; 8
     8a0:	e9 e0       	ldi	r30, 0x09	; 9
     8a2:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__epilogue_restores__+0x12>

000008a6 <__fixsfsi>:
     8a6:	ac e0       	ldi	r26, 0x0C	; 12
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	e9 e5       	ldi	r30, 0x59	; 89
     8ac:	f4 e0       	ldi	r31, 0x04	; 4
     8ae:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__prologue_saves__+0x20>
     8b2:	69 83       	std	Y+1, r22	; 0x01
     8b4:	7a 83       	std	Y+2, r23	; 0x02
     8b6:	8b 83       	std	Y+3, r24	; 0x03
     8b8:	9c 83       	std	Y+4, r25	; 0x04
     8ba:	ce 01       	movw	r24, r28
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	be 01       	movw	r22, r28
     8c0:	6b 5f       	subi	r22, 0xFB	; 251
     8c2:	7f 4f       	sbci	r23, 0xFF	; 255
     8c4:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     8c8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ca:	82 30       	cpi	r24, 0x02	; 2
     8cc:	61 f1       	breq	.+88     	; 0x926 <__fixsfsi+0x80>
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	50 f1       	brcs	.+84     	; 0x926 <__fixsfsi+0x80>
     8d2:	84 30       	cpi	r24, 0x04	; 4
     8d4:	21 f4       	brne	.+8      	; 0x8de <__fixsfsi+0x38>
     8d6:	8e 81       	ldd	r24, Y+6	; 0x06
     8d8:	88 23       	and	r24, r24
     8da:	51 f1       	breq	.+84     	; 0x930 <__fixsfsi+0x8a>
     8dc:	2e c0       	rjmp	.+92     	; 0x93a <__fixsfsi+0x94>
     8de:	2f 81       	ldd	r18, Y+7	; 0x07
     8e0:	38 85       	ldd	r19, Y+8	; 0x08
     8e2:	37 fd       	sbrc	r19, 7
     8e4:	20 c0       	rjmp	.+64     	; 0x926 <__fixsfsi+0x80>
     8e6:	6e 81       	ldd	r22, Y+6	; 0x06
     8e8:	2f 31       	cpi	r18, 0x1F	; 31
     8ea:	31 05       	cpc	r19, r1
     8ec:	1c f0       	brlt	.+6      	; 0x8f4 <__fixsfsi+0x4e>
     8ee:	66 23       	and	r22, r22
     8f0:	f9 f0       	breq	.+62     	; 0x930 <__fixsfsi+0x8a>
     8f2:	23 c0       	rjmp	.+70     	; 0x93a <__fixsfsi+0x94>
     8f4:	8e e1       	ldi	r24, 0x1E	; 30
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	82 1b       	sub	r24, r18
     8fa:	93 0b       	sbc	r25, r19
     8fc:	29 85       	ldd	r18, Y+9	; 0x09
     8fe:	3a 85       	ldd	r19, Y+10	; 0x0a
     900:	4b 85       	ldd	r20, Y+11	; 0x0b
     902:	5c 85       	ldd	r21, Y+12	; 0x0c
     904:	04 c0       	rjmp	.+8      	; 0x90e <__fixsfsi+0x68>
     906:	56 95       	lsr	r21
     908:	47 95       	ror	r20
     90a:	37 95       	ror	r19
     90c:	27 95       	ror	r18
     90e:	8a 95       	dec	r24
     910:	d2 f7       	brpl	.-12     	; 0x906 <__fixsfsi+0x60>
     912:	66 23       	and	r22, r22
     914:	b1 f0       	breq	.+44     	; 0x942 <__fixsfsi+0x9c>
     916:	50 95       	com	r21
     918:	40 95       	com	r20
     91a:	30 95       	com	r19
     91c:	21 95       	neg	r18
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	0e c0       	rjmp	.+28     	; 0x942 <__fixsfsi+0x9c>
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	09 c0       	rjmp	.+18     	; 0x942 <__fixsfsi+0x9c>
     930:	2f ef       	ldi	r18, 0xFF	; 255
     932:	3f ef       	ldi	r19, 0xFF	; 255
     934:	4f ef       	ldi	r20, 0xFF	; 255
     936:	5f e7       	ldi	r21, 0x7F	; 127
     938:	04 c0       	rjmp	.+8      	; 0x942 <__fixsfsi+0x9c>
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e8       	ldi	r21, 0x80	; 128
     942:	b9 01       	movw	r22, r18
     944:	ca 01       	movw	r24, r20
     946:	2c 96       	adiw	r28, 0x0c	; 12
     948:	e2 e0       	ldi	r30, 0x02	; 2
     94a:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__epilogue_restores__+0x20>

0000094e <__floatunsisf>:
     94e:	a8 e0       	ldi	r26, 0x08	; 8
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	ed ea       	ldi	r30, 0xAD	; 173
     954:	f4 e0       	ldi	r31, 0x04	; 4
     956:	0c 94 1c 11 	jmp	0x2238	; 0x2238 <__prologue_saves__+0x10>
     95a:	7b 01       	movw	r14, r22
     95c:	8c 01       	movw	r16, r24
     95e:	61 15       	cp	r22, r1
     960:	71 05       	cpc	r23, r1
     962:	81 05       	cpc	r24, r1
     964:	91 05       	cpc	r25, r1
     966:	19 f4       	brne	.+6      	; 0x96e <__floatunsisf+0x20>
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	89 83       	std	Y+1, r24	; 0x01
     96c:	60 c0       	rjmp	.+192    	; 0xa2e <__floatunsisf+0xe0>
     96e:	83 e0       	ldi	r24, 0x03	; 3
     970:	89 83       	std	Y+1, r24	; 0x01
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 20 05 	call	0xa40	; 0xa40 <__clzsi2>
     98c:	fc 01       	movw	r30, r24
     98e:	31 97       	sbiw	r30, 0x01	; 1
     990:	f7 ff       	sbrs	r31, 7
     992:	3b c0       	rjmp	.+118    	; 0xa0a <__floatunsisf+0xbc>
     994:	22 27       	eor	r18, r18
     996:	33 27       	eor	r19, r19
     998:	2e 1b       	sub	r18, r30
     99a:	3f 0b       	sbc	r19, r31
     99c:	57 01       	movw	r10, r14
     99e:	68 01       	movw	r12, r16
     9a0:	02 2e       	mov	r0, r18
     9a2:	04 c0       	rjmp	.+8      	; 0x9ac <__floatunsisf+0x5e>
     9a4:	d6 94       	lsr	r13
     9a6:	c7 94       	ror	r12
     9a8:	b7 94       	ror	r11
     9aa:	a7 94       	ror	r10
     9ac:	0a 94       	dec	r0
     9ae:	d2 f7       	brpl	.-12     	; 0x9a4 <__floatunsisf+0x56>
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	a0 e0       	ldi	r26, 0x00	; 0
     9be:	b0 e0       	ldi	r27, 0x00	; 0
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__floatunsisf+0x7c>
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	aa 1f       	adc	r26, r26
     9c8:	bb 1f       	adc	r27, r27
     9ca:	2a 95       	dec	r18
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__floatunsisf+0x74>
     9ce:	01 97       	sbiw	r24, 0x01	; 1
     9d0:	a1 09       	sbc	r26, r1
     9d2:	b1 09       	sbc	r27, r1
     9d4:	8e 21       	and	r24, r14
     9d6:	9f 21       	and	r25, r15
     9d8:	a0 23       	and	r26, r16
     9da:	b1 23       	and	r27, r17
     9dc:	00 97       	sbiw	r24, 0x00	; 0
     9de:	a1 05       	cpc	r26, r1
     9e0:	b1 05       	cpc	r27, r1
     9e2:	21 f0       	breq	.+8      	; 0x9ec <__floatunsisf+0x9e>
     9e4:	41 e0       	ldi	r20, 0x01	; 1
     9e6:	50 e0       	ldi	r21, 0x00	; 0
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	4a 29       	or	r20, r10
     9ee:	5b 29       	or	r21, r11
     9f0:	6c 29       	or	r22, r12
     9f2:	7d 29       	or	r23, r13
     9f4:	4d 83       	std	Y+5, r20	; 0x05
     9f6:	5e 83       	std	Y+6, r21	; 0x06
     9f8:	6f 83       	std	Y+7, r22	; 0x07
     9fa:	78 87       	std	Y+8, r23	; 0x08
     9fc:	8e e1       	ldi	r24, 0x1E	; 30
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	8e 1b       	sub	r24, r30
     a02:	9f 0b       	sbc	r25, r31
     a04:	9c 83       	std	Y+4, r25	; 0x04
     a06:	8b 83       	std	Y+3, r24	; 0x03
     a08:	12 c0       	rjmp	.+36     	; 0xa2e <__floatunsisf+0xe0>
     a0a:	30 97       	sbiw	r30, 0x00	; 0
     a0c:	81 f0       	breq	.+32     	; 0xa2e <__floatunsisf+0xe0>
     a0e:	0e 2e       	mov	r0, r30
     a10:	04 c0       	rjmp	.+8      	; 0xa1a <__floatunsisf+0xcc>
     a12:	ee 0c       	add	r14, r14
     a14:	ff 1c       	adc	r15, r15
     a16:	00 1f       	adc	r16, r16
     a18:	11 1f       	adc	r17, r17
     a1a:	0a 94       	dec	r0
     a1c:	d2 f7       	brpl	.-12     	; 0xa12 <__floatunsisf+0xc4>
     a1e:	ed 82       	std	Y+5, r14	; 0x05
     a20:	fe 82       	std	Y+6, r15	; 0x06
     a22:	0f 83       	std	Y+7, r16	; 0x07
     a24:	18 87       	std	Y+8, r17	; 0x08
     a26:	ce 1a       	sub	r12, r30
     a28:	df 0a       	sbc	r13, r31
     a2a:	dc 82       	std	Y+4, r13	; 0x04
     a2c:	cb 82       	std	Y+3, r12	; 0x03
     a2e:	1a 82       	std	Y+2, r1	; 0x02
     a30:	ce 01       	movw	r24, r28
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     a38:	28 96       	adiw	r28, 0x08	; 8
     a3a:	ea e0       	ldi	r30, 0x0A	; 10
     a3c:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__epilogue_restores__+0x10>

00000a40 <__clzsi2>:
     a40:	ef 92       	push	r14
     a42:	ff 92       	push	r15
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	7b 01       	movw	r14, r22
     a4a:	8c 01       	movw	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	e8 16       	cp	r14, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	f8 06       	cpc	r15, r24
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	08 07       	cpc	r16, r24
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	18 07       	cpc	r17, r24
     a5c:	88 f4       	brcc	.+34     	; 0xa80 <__clzsi2+0x40>
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	e8 16       	cp	r14, r24
     a62:	f1 04       	cpc	r15, r1
     a64:	01 05       	cpc	r16, r1
     a66:	11 05       	cpc	r17, r1
     a68:	31 f0       	breq	.+12     	; 0xa76 <__clzsi2+0x36>
     a6a:	28 f0       	brcs	.+10     	; 0xa76 <__clzsi2+0x36>
     a6c:	88 e0       	ldi	r24, 0x08	; 8
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	a0 e0       	ldi	r26, 0x00	; 0
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	17 c0       	rjmp	.+46     	; 0xaa4 <__clzsi2+0x64>
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	12 c0       	rjmp	.+36     	; 0xaa4 <__clzsi2+0x64>
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	e8 16       	cp	r14, r24
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	f8 06       	cpc	r15, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	08 07       	cpc	r16, r24
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	18 07       	cpc	r17, r24
     a90:	28 f0       	brcs	.+10     	; 0xa9c <__clzsi2+0x5c>
     a92:	88 e1       	ldi	r24, 0x18	; 24
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	a0 e0       	ldi	r26, 0x00	; 0
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <__clzsi2+0x64>
     a9c:	80 e1       	ldi	r24, 0x10	; 16
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	a0 e0       	ldi	r26, 0x00	; 0
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	20 e2       	ldi	r18, 0x20	; 32
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	28 1b       	sub	r18, r24
     aae:	39 0b       	sbc	r19, r25
     ab0:	4a 0b       	sbc	r20, r26
     ab2:	5b 0b       	sbc	r21, r27
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__clzsi2+0x7e>
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__clzsi2+0x76>
     ac2:	f7 01       	movw	r30, r14
     ac4:	e8 59       	subi	r30, 0x98	; 152
     ac6:	ff 4f       	sbci	r31, 0xFF	; 255
     ac8:	80 81       	ld	r24, Z
     aca:	28 1b       	sub	r18, r24
     acc:	31 09       	sbc	r19, r1
     ace:	41 09       	sbc	r20, r1
     ad0:	51 09       	sbc	r21, r1
     ad2:	c9 01       	movw	r24, r18
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	08 95       	ret

00000ade <__pack_f>:
     ade:	df 92       	push	r13
     ae0:	ef 92       	push	r14
     ae2:	ff 92       	push	r15
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	fc 01       	movw	r30, r24
     aea:	e4 80       	ldd	r14, Z+4	; 0x04
     aec:	f5 80       	ldd	r15, Z+5	; 0x05
     aee:	06 81       	ldd	r16, Z+6	; 0x06
     af0:	17 81       	ldd	r17, Z+7	; 0x07
     af2:	d1 80       	ldd	r13, Z+1	; 0x01
     af4:	80 81       	ld	r24, Z
     af6:	82 30       	cpi	r24, 0x02	; 2
     af8:	48 f4       	brcc	.+18     	; 0xb0c <__pack_f+0x2e>
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	a0 e1       	ldi	r26, 0x10	; 16
     b00:	b0 e0       	ldi	r27, 0x00	; 0
     b02:	e8 2a       	or	r14, r24
     b04:	f9 2a       	or	r15, r25
     b06:	0a 2b       	or	r16, r26
     b08:	1b 2b       	or	r17, r27
     b0a:	a5 c0       	rjmp	.+330    	; 0xc56 <__pack_f+0x178>
     b0c:	84 30       	cpi	r24, 0x04	; 4
     b0e:	09 f4       	brne	.+2      	; 0xb12 <__pack_f+0x34>
     b10:	9f c0       	rjmp	.+318    	; 0xc50 <__pack_f+0x172>
     b12:	82 30       	cpi	r24, 0x02	; 2
     b14:	21 f4       	brne	.+8      	; 0xb1e <__pack_f+0x40>
     b16:	ee 24       	eor	r14, r14
     b18:	ff 24       	eor	r15, r15
     b1a:	87 01       	movw	r16, r14
     b1c:	05 c0       	rjmp	.+10     	; 0xb28 <__pack_f+0x4a>
     b1e:	e1 14       	cp	r14, r1
     b20:	f1 04       	cpc	r15, r1
     b22:	01 05       	cpc	r16, r1
     b24:	11 05       	cpc	r17, r1
     b26:	19 f4       	brne	.+6      	; 0xb2e <__pack_f+0x50>
     b28:	e0 e0       	ldi	r30, 0x00	; 0
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	96 c0       	rjmp	.+300    	; 0xc5a <__pack_f+0x17c>
     b2e:	62 81       	ldd	r22, Z+2	; 0x02
     b30:	73 81       	ldd	r23, Z+3	; 0x03
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	62 38       	cpi	r22, 0x82	; 130
     b36:	79 07       	cpc	r23, r25
     b38:	0c f0       	brlt	.+2      	; 0xb3c <__pack_f+0x5e>
     b3a:	5b c0       	rjmp	.+182    	; 0xbf2 <__pack_f+0x114>
     b3c:	22 e8       	ldi	r18, 0x82	; 130
     b3e:	3f ef       	ldi	r19, 0xFF	; 255
     b40:	26 1b       	sub	r18, r22
     b42:	37 0b       	sbc	r19, r23
     b44:	2a 31       	cpi	r18, 0x1A	; 26
     b46:	31 05       	cpc	r19, r1
     b48:	2c f0       	brlt	.+10     	; 0xb54 <__pack_f+0x76>
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	2a c0       	rjmp	.+84     	; 0xba8 <__pack_f+0xca>
     b54:	b8 01       	movw	r22, r16
     b56:	a7 01       	movw	r20, r14
     b58:	02 2e       	mov	r0, r18
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__pack_f+0x86>
     b5c:	76 95       	lsr	r23
     b5e:	67 95       	ror	r22
     b60:	57 95       	ror	r21
     b62:	47 95       	ror	r20
     b64:	0a 94       	dec	r0
     b66:	d2 f7       	brpl	.-12     	; 0xb5c <__pack_f+0x7e>
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	a0 e0       	ldi	r26, 0x00	; 0
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	04 c0       	rjmp	.+8      	; 0xb7a <__pack_f+0x9c>
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	aa 1f       	adc	r26, r26
     b78:	bb 1f       	adc	r27, r27
     b7a:	2a 95       	dec	r18
     b7c:	d2 f7       	brpl	.-12     	; 0xb72 <__pack_f+0x94>
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	a1 09       	sbc	r26, r1
     b82:	b1 09       	sbc	r27, r1
     b84:	8e 21       	and	r24, r14
     b86:	9f 21       	and	r25, r15
     b88:	a0 23       	and	r26, r16
     b8a:	b1 23       	and	r27, r17
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	a1 05       	cpc	r26, r1
     b90:	b1 05       	cpc	r27, r1
     b92:	21 f0       	breq	.+8      	; 0xb9c <__pack_f+0xbe>
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	9a 01       	movw	r18, r20
     b9e:	ab 01       	movw	r20, r22
     ba0:	28 2b       	or	r18, r24
     ba2:	39 2b       	or	r19, r25
     ba4:	4a 2b       	or	r20, r26
     ba6:	5b 2b       	or	r21, r27
     ba8:	da 01       	movw	r26, r20
     baa:	c9 01       	movw	r24, r18
     bac:	8f 77       	andi	r24, 0x7F	; 127
     bae:	90 70       	andi	r25, 0x00	; 0
     bb0:	a0 70       	andi	r26, 0x00	; 0
     bb2:	b0 70       	andi	r27, 0x00	; 0
     bb4:	80 34       	cpi	r24, 0x40	; 64
     bb6:	91 05       	cpc	r25, r1
     bb8:	a1 05       	cpc	r26, r1
     bba:	b1 05       	cpc	r27, r1
     bbc:	39 f4       	brne	.+14     	; 0xbcc <__pack_f+0xee>
     bbe:	27 ff       	sbrs	r18, 7
     bc0:	09 c0       	rjmp	.+18     	; 0xbd4 <__pack_f+0xf6>
     bc2:	20 5c       	subi	r18, 0xC0	; 192
     bc4:	3f 4f       	sbci	r19, 0xFF	; 255
     bc6:	4f 4f       	sbci	r20, 0xFF	; 255
     bc8:	5f 4f       	sbci	r21, 0xFF	; 255
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <__pack_f+0xf6>
     bcc:	21 5c       	subi	r18, 0xC1	; 193
     bce:	3f 4f       	sbci	r19, 0xFF	; 255
     bd0:	4f 4f       	sbci	r20, 0xFF	; 255
     bd2:	5f 4f       	sbci	r21, 0xFF	; 255
     bd4:	e0 e0       	ldi	r30, 0x00	; 0
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	20 30       	cpi	r18, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	3a 07       	cpc	r19, r26
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	4a 07       	cpc	r20, r26
     be2:	a0 e4       	ldi	r26, 0x40	; 64
     be4:	5a 07       	cpc	r21, r26
     be6:	10 f0       	brcs	.+4      	; 0xbec <__pack_f+0x10e>
     be8:	e1 e0       	ldi	r30, 0x01	; 1
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	79 01       	movw	r14, r18
     bee:	8a 01       	movw	r16, r20
     bf0:	27 c0       	rjmp	.+78     	; 0xc40 <__pack_f+0x162>
     bf2:	60 38       	cpi	r22, 0x80	; 128
     bf4:	71 05       	cpc	r23, r1
     bf6:	64 f5       	brge	.+88     	; 0xc50 <__pack_f+0x172>
     bf8:	fb 01       	movw	r30, r22
     bfa:	e1 58       	subi	r30, 0x81	; 129
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	d8 01       	movw	r26, r16
     c00:	c7 01       	movw	r24, r14
     c02:	8f 77       	andi	r24, 0x7F	; 127
     c04:	90 70       	andi	r25, 0x00	; 0
     c06:	a0 70       	andi	r26, 0x00	; 0
     c08:	b0 70       	andi	r27, 0x00	; 0
     c0a:	80 34       	cpi	r24, 0x40	; 64
     c0c:	91 05       	cpc	r25, r1
     c0e:	a1 05       	cpc	r26, r1
     c10:	b1 05       	cpc	r27, r1
     c12:	39 f4       	brne	.+14     	; 0xc22 <__pack_f+0x144>
     c14:	e7 fe       	sbrs	r14, 7
     c16:	0d c0       	rjmp	.+26     	; 0xc32 <__pack_f+0x154>
     c18:	80 e4       	ldi	r24, 0x40	; 64
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x14c>
     c22:	8f e3       	ldi	r24, 0x3F	; 63
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	a0 e0       	ldi	r26, 0x00	; 0
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e8 0e       	add	r14, r24
     c2c:	f9 1e       	adc	r15, r25
     c2e:	0a 1f       	adc	r16, r26
     c30:	1b 1f       	adc	r17, r27
     c32:	17 ff       	sbrs	r17, 7
     c34:	05 c0       	rjmp	.+10     	; 0xc40 <__pack_f+0x162>
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	31 96       	adiw	r30, 0x01	; 1
     c40:	87 e0       	ldi	r24, 0x07	; 7
     c42:	16 95       	lsr	r17
     c44:	07 95       	ror	r16
     c46:	f7 94       	ror	r15
     c48:	e7 94       	ror	r14
     c4a:	8a 95       	dec	r24
     c4c:	d1 f7       	brne	.-12     	; 0xc42 <__pack_f+0x164>
     c4e:	05 c0       	rjmp	.+10     	; 0xc5a <__pack_f+0x17c>
     c50:	ee 24       	eor	r14, r14
     c52:	ff 24       	eor	r15, r15
     c54:	87 01       	movw	r16, r14
     c56:	ef ef       	ldi	r30, 0xFF	; 255
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	6e 2f       	mov	r22, r30
     c5c:	67 95       	ror	r22
     c5e:	66 27       	eor	r22, r22
     c60:	67 95       	ror	r22
     c62:	90 2f       	mov	r25, r16
     c64:	9f 77       	andi	r25, 0x7F	; 127
     c66:	d7 94       	ror	r13
     c68:	dd 24       	eor	r13, r13
     c6a:	d7 94       	ror	r13
     c6c:	8e 2f       	mov	r24, r30
     c6e:	86 95       	lsr	r24
     c70:	49 2f       	mov	r20, r25
     c72:	46 2b       	or	r20, r22
     c74:	58 2f       	mov	r21, r24
     c76:	5d 29       	or	r21, r13
     c78:	b7 01       	movw	r22, r14
     c7a:	ca 01       	movw	r24, r20
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	df 90       	pop	r13
     c86:	08 95       	ret

00000c88 <__unpack_f>:
     c88:	fc 01       	movw	r30, r24
     c8a:	db 01       	movw	r26, r22
     c8c:	40 81       	ld	r20, Z
     c8e:	51 81       	ldd	r21, Z+1	; 0x01
     c90:	22 81       	ldd	r18, Z+2	; 0x02
     c92:	62 2f       	mov	r22, r18
     c94:	6f 77       	andi	r22, 0x7F	; 127
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	22 1f       	adc	r18, r18
     c9a:	22 27       	eor	r18, r18
     c9c:	22 1f       	adc	r18, r18
     c9e:	93 81       	ldd	r25, Z+3	; 0x03
     ca0:	89 2f       	mov	r24, r25
     ca2:	88 0f       	add	r24, r24
     ca4:	82 2b       	or	r24, r18
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	99 1f       	adc	r25, r25
     cac:	99 27       	eor	r25, r25
     cae:	99 1f       	adc	r25, r25
     cb0:	11 96       	adiw	r26, 0x01	; 1
     cb2:	9c 93       	st	X, r25
     cb4:	11 97       	sbiw	r26, 0x01	; 1
     cb6:	21 15       	cp	r18, r1
     cb8:	31 05       	cpc	r19, r1
     cba:	a9 f5       	brne	.+106    	; 0xd26 <__unpack_f+0x9e>
     cbc:	41 15       	cp	r20, r1
     cbe:	51 05       	cpc	r21, r1
     cc0:	61 05       	cpc	r22, r1
     cc2:	71 05       	cpc	r23, r1
     cc4:	11 f4       	brne	.+4      	; 0xcca <__unpack_f+0x42>
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	37 c0       	rjmp	.+110    	; 0xd38 <__unpack_f+0xb0>
     cca:	82 e8       	ldi	r24, 0x82	; 130
     ccc:	9f ef       	ldi	r25, 0xFF	; 255
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	9a 01       	movw	r18, r20
     cd8:	ab 01       	movw	r20, r22
     cda:	67 e0       	ldi	r22, 0x07	; 7
     cdc:	22 0f       	add	r18, r18
     cde:	33 1f       	adc	r19, r19
     ce0:	44 1f       	adc	r20, r20
     ce2:	55 1f       	adc	r21, r21
     ce4:	6a 95       	dec	r22
     ce6:	d1 f7       	brne	.-12     	; 0xcdc <__unpack_f+0x54>
     ce8:	83 e0       	ldi	r24, 0x03	; 3
     cea:	8c 93       	st	X, r24
     cec:	0d c0       	rjmp	.+26     	; 0xd08 <__unpack_f+0x80>
     cee:	22 0f       	add	r18, r18
     cf0:	33 1f       	adc	r19, r19
     cf2:	44 1f       	adc	r20, r20
     cf4:	55 1f       	adc	r21, r21
     cf6:	12 96       	adiw	r26, 0x02	; 2
     cf8:	8d 91       	ld	r24, X+
     cfa:	9c 91       	ld	r25, X
     cfc:	13 97       	sbiw	r26, 0x03	; 3
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	13 96       	adiw	r26, 0x03	; 3
     d02:	9c 93       	st	X, r25
     d04:	8e 93       	st	-X, r24
     d06:	12 97       	sbiw	r26, 0x02	; 2
     d08:	20 30       	cpi	r18, 0x00	; 0
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	38 07       	cpc	r19, r24
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	48 07       	cpc	r20, r24
     d12:	80 e4       	ldi	r24, 0x40	; 64
     d14:	58 07       	cpc	r21, r24
     d16:	58 f3       	brcs	.-42     	; 0xcee <__unpack_f+0x66>
     d18:	14 96       	adiw	r26, 0x04	; 4
     d1a:	2d 93       	st	X+, r18
     d1c:	3d 93       	st	X+, r19
     d1e:	4d 93       	st	X+, r20
     d20:	5c 93       	st	X, r21
     d22:	17 97       	sbiw	r26, 0x07	; 7
     d24:	08 95       	ret
     d26:	2f 3f       	cpi	r18, 0xFF	; 255
     d28:	31 05       	cpc	r19, r1
     d2a:	79 f4       	brne	.+30     	; 0xd4a <__unpack_f+0xc2>
     d2c:	41 15       	cp	r20, r1
     d2e:	51 05       	cpc	r21, r1
     d30:	61 05       	cpc	r22, r1
     d32:	71 05       	cpc	r23, r1
     d34:	19 f4       	brne	.+6      	; 0xd3c <__unpack_f+0xb4>
     d36:	84 e0       	ldi	r24, 0x04	; 4
     d38:	8c 93       	st	X, r24
     d3a:	08 95       	ret
     d3c:	64 ff       	sbrs	r22, 4
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <__unpack_f+0xbe>
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	8c 93       	st	X, r24
     d44:	12 c0       	rjmp	.+36     	; 0xd6a <__unpack_f+0xe2>
     d46:	1c 92       	st	X, r1
     d48:	10 c0       	rjmp	.+32     	; 0xd6a <__unpack_f+0xe2>
     d4a:	2f 57       	subi	r18, 0x7F	; 127
     d4c:	30 40       	sbci	r19, 0x00	; 0
     d4e:	13 96       	adiw	r26, 0x03	; 3
     d50:	3c 93       	st	X, r19
     d52:	2e 93       	st	-X, r18
     d54:	12 97       	sbiw	r26, 0x02	; 2
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	8c 93       	st	X, r24
     d5a:	87 e0       	ldi	r24, 0x07	; 7
     d5c:	44 0f       	add	r20, r20
     d5e:	55 1f       	adc	r21, r21
     d60:	66 1f       	adc	r22, r22
     d62:	77 1f       	adc	r23, r23
     d64:	8a 95       	dec	r24
     d66:	d1 f7       	brne	.-12     	; 0xd5c <__unpack_f+0xd4>
     d68:	70 64       	ori	r23, 0x40	; 64
     d6a:	14 96       	adiw	r26, 0x04	; 4
     d6c:	4d 93       	st	X+, r20
     d6e:	5d 93       	st	X+, r21
     d70:	6d 93       	st	X+, r22
     d72:	7c 93       	st	X, r23
     d74:	17 97       	sbiw	r26, 0x07	; 7
     d76:	08 95       	ret

00000d78 <__fpcmp_parts_f>:
     d78:	1f 93       	push	r17
     d7a:	dc 01       	movw	r26, r24
     d7c:	fb 01       	movw	r30, r22
     d7e:	9c 91       	ld	r25, X
     d80:	92 30       	cpi	r25, 0x02	; 2
     d82:	08 f4       	brcc	.+2      	; 0xd86 <__fpcmp_parts_f+0xe>
     d84:	47 c0       	rjmp	.+142    	; 0xe14 <__fpcmp_parts_f+0x9c>
     d86:	80 81       	ld	r24, Z
     d88:	82 30       	cpi	r24, 0x02	; 2
     d8a:	08 f4       	brcc	.+2      	; 0xd8e <__fpcmp_parts_f+0x16>
     d8c:	43 c0       	rjmp	.+134    	; 0xe14 <__fpcmp_parts_f+0x9c>
     d8e:	94 30       	cpi	r25, 0x04	; 4
     d90:	51 f4       	brne	.+20     	; 0xda6 <__fpcmp_parts_f+0x2e>
     d92:	11 96       	adiw	r26, 0x01	; 1
     d94:	1c 91       	ld	r17, X
     d96:	84 30       	cpi	r24, 0x04	; 4
     d98:	99 f5       	brne	.+102    	; 0xe00 <__fpcmp_parts_f+0x88>
     d9a:	81 81       	ldd	r24, Z+1	; 0x01
     d9c:	68 2f       	mov	r22, r24
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	61 1b       	sub	r22, r17
     da2:	71 09       	sbc	r23, r1
     da4:	3f c0       	rjmp	.+126    	; 0xe24 <__fpcmp_parts_f+0xac>
     da6:	84 30       	cpi	r24, 0x04	; 4
     da8:	21 f0       	breq	.+8      	; 0xdb2 <__fpcmp_parts_f+0x3a>
     daa:	92 30       	cpi	r25, 0x02	; 2
     dac:	31 f4       	brne	.+12     	; 0xdba <__fpcmp_parts_f+0x42>
     dae:	82 30       	cpi	r24, 0x02	; 2
     db0:	b9 f1       	breq	.+110    	; 0xe20 <__fpcmp_parts_f+0xa8>
     db2:	81 81       	ldd	r24, Z+1	; 0x01
     db4:	88 23       	and	r24, r24
     db6:	89 f1       	breq	.+98     	; 0xe1a <__fpcmp_parts_f+0xa2>
     db8:	2d c0       	rjmp	.+90     	; 0xe14 <__fpcmp_parts_f+0x9c>
     dba:	11 96       	adiw	r26, 0x01	; 1
     dbc:	1c 91       	ld	r17, X
     dbe:	11 97       	sbiw	r26, 0x01	; 1
     dc0:	82 30       	cpi	r24, 0x02	; 2
     dc2:	f1 f0       	breq	.+60     	; 0xe00 <__fpcmp_parts_f+0x88>
     dc4:	81 81       	ldd	r24, Z+1	; 0x01
     dc6:	18 17       	cp	r17, r24
     dc8:	d9 f4       	brne	.+54     	; 0xe00 <__fpcmp_parts_f+0x88>
     dca:	12 96       	adiw	r26, 0x02	; 2
     dcc:	2d 91       	ld	r18, X+
     dce:	3c 91       	ld	r19, X
     dd0:	13 97       	sbiw	r26, 0x03	; 3
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	82 17       	cp	r24, r18
     dd8:	93 07       	cpc	r25, r19
     dda:	94 f0       	brlt	.+36     	; 0xe00 <__fpcmp_parts_f+0x88>
     ddc:	28 17       	cp	r18, r24
     dde:	39 07       	cpc	r19, r25
     de0:	bc f0       	brlt	.+46     	; 0xe10 <__fpcmp_parts_f+0x98>
     de2:	14 96       	adiw	r26, 0x04	; 4
     de4:	8d 91       	ld	r24, X+
     de6:	9d 91       	ld	r25, X+
     de8:	0d 90       	ld	r0, X+
     dea:	bc 91       	ld	r27, X
     dec:	a0 2d       	mov	r26, r0
     dee:	24 81       	ldd	r18, Z+4	; 0x04
     df0:	35 81       	ldd	r19, Z+5	; 0x05
     df2:	46 81       	ldd	r20, Z+6	; 0x06
     df4:	57 81       	ldd	r21, Z+7	; 0x07
     df6:	28 17       	cp	r18, r24
     df8:	39 07       	cpc	r19, r25
     dfa:	4a 07       	cpc	r20, r26
     dfc:	5b 07       	cpc	r21, r27
     dfe:	18 f4       	brcc	.+6      	; 0xe06 <__fpcmp_parts_f+0x8e>
     e00:	11 23       	and	r17, r17
     e02:	41 f0       	breq	.+16     	; 0xe14 <__fpcmp_parts_f+0x9c>
     e04:	0a c0       	rjmp	.+20     	; 0xe1a <__fpcmp_parts_f+0xa2>
     e06:	82 17       	cp	r24, r18
     e08:	93 07       	cpc	r25, r19
     e0a:	a4 07       	cpc	r26, r20
     e0c:	b5 07       	cpc	r27, r21
     e0e:	40 f4       	brcc	.+16     	; 0xe20 <__fpcmp_parts_f+0xa8>
     e10:	11 23       	and	r17, r17
     e12:	19 f0       	breq	.+6      	; 0xe1a <__fpcmp_parts_f+0xa2>
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <__fpcmp_parts_f+0xac>
     e1a:	6f ef       	ldi	r22, 0xFF	; 255
     e1c:	7f ef       	ldi	r23, 0xFF	; 255
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <__fpcmp_parts_f+0xac>
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	cb 01       	movw	r24, r22
     e26:	1f 91       	pop	r17
     e28:	08 95       	ret

00000e2a <ADC_vinit>:

#include <avr/io.h>
#include "std_macros.h"
#include "STD_Types.h"
void ADC_vinit(void)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
	/*configure VREF to the internal voltage(2.56 V)*/
	SET_BIT(ADMUX,REFS0);
     e32:	a7 e2       	ldi	r26, 0x27	; 39
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e7 e2       	ldi	r30, 0x27	; 39
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	80 64       	ori	r24, 0x40	; 64
     e3e:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS1);
     e40:	a7 e2       	ldi	r26, 0x27	; 39
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e7 e2       	ldi	r30, 0x27	; 39
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	80 68       	ori	r24, 0x80	; 128
     e4c:	8c 93       	st	X, r24
	/*************************************/
	SET_BIT(ADCSRA,ADEN); // ENable ADC
     e4e:	a6 e2       	ldi	r26, 0x26	; 38
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e6 e2       	ldi	r30, 0x26	; 38
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	80 68       	ori	r24, 0x80	; 128
     e5a:	8c 93       	st	X, r24
	
	/* adjust ADC clock by select the division factor----->64*/
	SET_BIT(ADCSRA,ADPS2);
     e5c:	a6 e2       	ldi	r26, 0x26	; 38
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e6 e2       	ldi	r30, 0x26	; 38
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	84 60       	ori	r24, 0x04	; 4
     e68:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
     e6a:	a6 e2       	ldi	r26, 0x26	; 38
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e6 e2       	ldi	r30, 0x26	; 38
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	82 60       	ori	r24, 0x02	; 2
     e76:	8c 93       	st	X, r24
	/***********************************/
}
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <ADC_u16Read>:
uint16 ADC_u16Read(void)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	00 d0       	rcall	.+0      	; 0xe84 <ADC_u16Read+0x6>
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
	uint16 read_val; // which contain the converted value which will be returned
	SET_BIT(ADCSRA,ADSC); // start the ADC conversion
     e88:	a6 e2       	ldi	r26, 0x26	; 38
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e6 e2       	ldi	r30, 0x26	; 38
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 64       	ori	r24, 0x40	; 64
     e94:	8c 93       	st	X, r24
	while(IS_BIT_CLR(ADCSRA,ADIF));//stay in your position till ADIF become 1 when conversion complete
     e96:	e6 e2       	ldi	r30, 0x26	; 38
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	80 71       	andi	r24, 0x10	; 16
     ea2:	90 70       	andi	r25, 0x00	; 0
     ea4:	95 95       	asr	r25
     ea6:	87 95       	ror	r24
     ea8:	95 95       	asr	r25
     eaa:	87 95       	ror	r24
     eac:	95 95       	asr	r25
     eae:	87 95       	ror	r24
     eb0:	95 95       	asr	r25
     eb2:	87 95       	ror	r24
     eb4:	00 97       	sbiw	r24, 0x00	; 0
     eb6:	79 f3       	breq	.-34     	; 0xe96 <ADC_u16Read+0x18>
	SET_BIT(ADCSRA,ADIF); // clear ADIF
     eb8:	a6 e2       	ldi	r26, 0x26	; 38
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e6 e2       	ldi	r30, 0x26	; 38
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	80 61       	ori	r24, 0x10	; 16
     ec4:	8c 93       	st	X, r24
	read_val=(ADCL); //reas the ADCL register
     ec6:	e4 e2       	ldi	r30, 0x24	; 36
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	88 2f       	mov	r24, r24
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	9a 83       	std	Y+2, r25	; 0x02
     ed2:	89 83       	std	Y+1, r24	; 0x01
	read_val|=(ADCH<<8);//read the whole register
     ed4:	e5 e2       	ldi	r30, 0x25	; 37
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	88 2f       	mov	r24, r24
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	98 2f       	mov	r25, r24
     ee0:	88 27       	eor	r24, r24
     ee2:	9c 01       	movw	r18, r24
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	9a 81       	ldd	r25, Y+2	; 0x02
     ee8:	82 2b       	or	r24, r18
     eea:	93 2b       	or	r25, r19
     eec:	9a 83       	std	Y+2, r25	; 0x02
     eee:	89 83       	std	Y+1, r24	; 0x01
	return read_val ; // return the converted value
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <DIO_vsetPINDir>:

#include <avr/io.h>
#include "std_macros.h"
#include "DIO.h"
void DIO_vsetPINDir(uint8 portname,uint8 pinnumber,uint8 direction)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	00 d0       	rcall	.+0      	; 0xf04 <DIO_vsetPINDir+0x6>
     f04:	00 d0       	rcall	.+0      	; 0xf06 <DIO_vsetPINDir+0x8>
     f06:	0f 92       	push	r0
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	89 83       	std	Y+1, r24	; 0x01
     f0e:	6a 83       	std	Y+2, r22	; 0x02
     f10:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	3d 83       	std	Y+5, r19	; 0x05
     f1a:	2c 83       	std	Y+4, r18	; 0x04
     f1c:	8c 81       	ldd	r24, Y+4	; 0x04
     f1e:	9d 81       	ldd	r25, Y+5	; 0x05
     f20:	82 34       	cpi	r24, 0x42	; 66
     f22:	91 05       	cpc	r25, r1
     f24:	09 f4       	brne	.+2      	; 0xf28 <DIO_vsetPINDir+0x2a>
     f26:	44 c0       	rjmp	.+136    	; 0xfb0 <DIO_vsetPINDir+0xb2>
     f28:	2c 81       	ldd	r18, Y+4	; 0x04
     f2a:	3d 81       	ldd	r19, Y+5	; 0x05
     f2c:	23 34       	cpi	r18, 0x43	; 67
     f2e:	31 05       	cpc	r19, r1
     f30:	34 f4       	brge	.+12     	; 0xf3e <DIO_vsetPINDir+0x40>
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
     f34:	9d 81       	ldd	r25, Y+5	; 0x05
     f36:	81 34       	cpi	r24, 0x41	; 65
     f38:	91 05       	cpc	r25, r1
     f3a:	71 f0       	breq	.+28     	; 0xf58 <DIO_vsetPINDir+0x5a>
     f3c:	bc c0       	rjmp	.+376    	; 0x10b6 <DIO_vsetPINDir+0x1b8>
     f3e:	2c 81       	ldd	r18, Y+4	; 0x04
     f40:	3d 81       	ldd	r19, Y+5	; 0x05
     f42:	23 34       	cpi	r18, 0x43	; 67
     f44:	31 05       	cpc	r19, r1
     f46:	09 f4       	brne	.+2      	; 0xf4a <DIO_vsetPINDir+0x4c>
     f48:	5f c0       	rjmp	.+190    	; 0x1008 <DIO_vsetPINDir+0x10a>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	84 34       	cpi	r24, 0x44	; 68
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <DIO_vsetPINDir+0x58>
     f54:	85 c0       	rjmp	.+266    	; 0x1060 <DIO_vsetPINDir+0x162>
     f56:	af c0       	rjmp	.+350    	; 0x10b6 <DIO_vsetPINDir+0x1b8>
	{
		
		
		case 'A':
		if(direction==1)
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	a1 f4       	brne	.+40     	; 0xf86 <DIO_vsetPINDir+0x88>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
     f5e:	aa e3       	ldi	r26, 0x3A	; 58
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	ea e3       	ldi	r30, 0x3A	; 58
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	48 2f       	mov	r20, r24
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	02 2e       	mov	r0, r18
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <DIO_vsetPINDir+0x7e>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	0a 94       	dec	r0
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <DIO_vsetPINDir+0x7a>
     f80:	84 2b       	or	r24, r20
     f82:	8c 93       	st	X, r24
     f84:	98 c0       	rjmp	.+304    	; 0x10b6 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
     f86:	aa e3       	ldi	r26, 0x3A	; 58
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	ea e3       	ldi	r30, 0x3A	; 58
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO_vsetPINDir+0xa6>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO_vsetPINDir+0xa2>
     fa8:	80 95       	com	r24
     faa:	84 23       	and	r24, r20
     fac:	8c 93       	st	X, r24
     fae:	83 c0       	rjmp	.+262    	; 0x10b6 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'B':
		if(direction==1)
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	a1 f4       	brne	.+40     	; 0xfde <DIO_vsetPINDir+0xe0>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
     fb6:	a7 e3       	ldi	r26, 0x37	; 55
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e7 e3       	ldi	r30, 0x37	; 55
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	48 2f       	mov	r20, r24
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 2e       	mov	r0, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <DIO_vsetPINDir+0xd6>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <DIO_vsetPINDir+0xd2>
     fd8:	84 2b       	or	r24, r20
     fda:	8c 93       	st	X, r24
     fdc:	6c c0       	rjmp	.+216    	; 0x10b6 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
     fde:	a7 e3       	ldi	r26, 0x37	; 55
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e7 e3       	ldi	r30, 0x37	; 55
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_vsetPINDir+0xfe>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_vsetPINDir+0xfa>
    1000:	80 95       	com	r24
    1002:	84 23       	and	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	57 c0       	rjmp	.+174    	; 0x10b6 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'C':
		if(direction==1)
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	81 30       	cpi	r24, 0x01	; 1
    100c:	a1 f4       	brne	.+40     	; 0x1036 <DIO_vsetPINDir+0x138>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
    100e:	a4 e3       	ldi	r26, 0x34	; 52
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e4 e3       	ldi	r30, 0x34	; 52
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	48 2f       	mov	r20, r24
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	02 2e       	mov	r0, r18
    1026:	02 c0       	rjmp	.+4      	; 0x102c <DIO_vsetPINDir+0x12e>
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	0a 94       	dec	r0
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <DIO_vsetPINDir+0x12a>
    1030:	84 2b       	or	r24, r20
    1032:	8c 93       	st	X, r24
    1034:	40 c0       	rjmp	.+128    	; 0x10b6 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
    1036:	a4 e3       	ldi	r26, 0x34	; 52
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e4 e3       	ldi	r30, 0x34	; 52
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 2e       	mov	r0, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_vsetPINDir+0x156>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_vsetPINDir+0x152>
    1058:	80 95       	com	r24
    105a:	84 23       	and	r24, r20
    105c:	8c 93       	st	X, r24
    105e:	2b c0       	rjmp	.+86     	; 0x10b6 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'D':
		if(direction==1)
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	a1 f4       	brne	.+40     	; 0x108e <DIO_vsetPINDir+0x190>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
    1066:	a1 e3       	ldi	r26, 0x31	; 49
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e1 e3       	ldi	r30, 0x31	; 49
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	48 2f       	mov	r20, r24
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	02 2e       	mov	r0, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO_vsetPINDir+0x186>
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	0a 94       	dec	r0
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <DIO_vsetPINDir+0x182>
    1088:	84 2b       	or	r24, r20
    108a:	8c 93       	st	X, r24
    108c:	14 c0       	rjmp	.+40     	; 0x10b6 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
    108e:	a1 e3       	ldi	r26, 0x31	; 49
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e1 e3       	ldi	r30, 0x31	; 49
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 2e       	mov	r0, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <DIO_vsetPINDir+0x1ae>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	0a 94       	dec	r0
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <DIO_vsetPINDir+0x1aa>
    10b0:	80 95       	com	r24
    10b2:	84 23       	and	r24, r20
    10b4:	8c 93       	st	X, r24
		}
		break;
		default: break;
	}
}
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <DIO_write>:


void DIO_write(uint8 portname,uint8 pinnumber,uint8 outputvalue)
{
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <DIO_write+0x6>
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <DIO_write+0x8>
    10ce:	0f 92       	push	r0
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	89 83       	std	Y+1, r24	; 0x01
    10d6:	6a 83       	std	Y+2, r22	; 0x02
    10d8:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	3d 83       	std	Y+5, r19	; 0x05
    10e2:	2c 83       	std	Y+4, r18	; 0x04
    10e4:	8c 81       	ldd	r24, Y+4	; 0x04
    10e6:	9d 81       	ldd	r25, Y+5	; 0x05
    10e8:	82 34       	cpi	r24, 0x42	; 66
    10ea:	91 05       	cpc	r25, r1
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <DIO_write+0x2a>
    10ee:	44 c0       	rjmp	.+136    	; 0x1178 <DIO_write+0xb2>
    10f0:	2c 81       	ldd	r18, Y+4	; 0x04
    10f2:	3d 81       	ldd	r19, Y+5	; 0x05
    10f4:	23 34       	cpi	r18, 0x43	; 67
    10f6:	31 05       	cpc	r19, r1
    10f8:	34 f4       	brge	.+12     	; 0x1106 <DIO_write+0x40>
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	9d 81       	ldd	r25, Y+5	; 0x05
    10fe:	81 34       	cpi	r24, 0x41	; 65
    1100:	91 05       	cpc	r25, r1
    1102:	71 f0       	breq	.+28     	; 0x1120 <DIO_write+0x5a>
    1104:	bc c0       	rjmp	.+376    	; 0x127e <DIO_write+0x1b8>
    1106:	2c 81       	ldd	r18, Y+4	; 0x04
    1108:	3d 81       	ldd	r19, Y+5	; 0x05
    110a:	23 34       	cpi	r18, 0x43	; 67
    110c:	31 05       	cpc	r19, r1
    110e:	09 f4       	brne	.+2      	; 0x1112 <DIO_write+0x4c>
    1110:	5f c0       	rjmp	.+190    	; 0x11d0 <DIO_write+0x10a>
    1112:	8c 81       	ldd	r24, Y+4	; 0x04
    1114:	9d 81       	ldd	r25, Y+5	; 0x05
    1116:	84 34       	cpi	r24, 0x44	; 68
    1118:	91 05       	cpc	r25, r1
    111a:	09 f4       	brne	.+2      	; 0x111e <DIO_write+0x58>
    111c:	85 c0       	rjmp	.+266    	; 0x1228 <DIO_write+0x162>
    111e:	af c0       	rjmp	.+350    	; 0x127e <DIO_write+0x1b8>
	{
		case 'A' :
		
		if(outputvalue==1)
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	81 30       	cpi	r24, 0x01	; 1
    1124:	a1 f4       	brne	.+40     	; 0x114e <DIO_write+0x88>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
    1126:	ab e3       	ldi	r26, 0x3B	; 59
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	eb e3       	ldi	r30, 0x3B	; 59
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	48 2f       	mov	r20, r24
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 2e       	mov	r0, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <DIO_write+0x7e>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	0a 94       	dec	r0
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <DIO_write+0x7a>
    1148:	84 2b       	or	r24, r20
    114a:	8c 93       	st	X, r24
    114c:	98 c0       	rjmp	.+304    	; 0x127e <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
    114e:	ab e3       	ldi	r26, 0x3B	; 59
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	eb e3       	ldi	r30, 0x3B	; 59
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	48 2f       	mov	r20, r24
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 2e       	mov	r0, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <DIO_write+0xa6>
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	0a 94       	dec	r0
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <DIO_write+0xa2>
    1170:	80 95       	com	r24
    1172:	84 23       	and	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	83 c0       	rjmp	.+262    	; 0x127e <DIO_write+0x1b8>
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	a1 f4       	brne	.+40     	; 0x11a6 <DIO_write+0xe0>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
    117e:	a8 e3       	ldi	r26, 0x38	; 56
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e8 e3       	ldi	r30, 0x38	; 56
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 2e       	mov	r0, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_write+0xd6>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <DIO_write+0xd2>
    11a0:	84 2b       	or	r24, r20
    11a2:	8c 93       	st	X, r24
    11a4:	6c c0       	rjmp	.+216    	; 0x127e <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
    11a6:	a8 e3       	ldi	r26, 0x38	; 56
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e8 e3       	ldi	r30, 0x38	; 56
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	48 2f       	mov	r20, r24
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 2e       	mov	r0, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <DIO_write+0xfe>
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	0a 94       	dec	r0
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <DIO_write+0xfa>
    11c8:	80 95       	com	r24
    11ca:	84 23       	and	r24, r20
    11cc:	8c 93       	st	X, r24
    11ce:	57 c0       	rjmp	.+174    	; 0x127e <DIO_write+0x1b8>
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	a1 f4       	brne	.+40     	; 0x11fe <DIO_write+0x138>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
    11d6:	a5 e3       	ldi	r26, 0x35	; 53
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e5 e3       	ldi	r30, 0x35	; 53
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_write+0x12e>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_write+0x12a>
    11f8:	84 2b       	or	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	40 c0       	rjmp	.+128    	; 0x127e <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
    11fe:	a5 e3       	ldi	r26, 0x35	; 53
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e5 e3       	ldi	r30, 0x35	; 53
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_write+0x156>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_write+0x152>
    1220:	80 95       	com	r24
    1222:	84 23       	and	r24, r20
    1224:	8c 93       	st	X, r24
    1226:	2b c0       	rjmp	.+86     	; 0x127e <DIO_write+0x1b8>
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	a1 f4       	brne	.+40     	; 0x1256 <DIO_write+0x190>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
    122e:	a2 e3       	ldi	r26, 0x32	; 50
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e2 e3       	ldi	r30, 0x32	; 50
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	48 2f       	mov	r20, r24
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	02 2e       	mov	r0, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <DIO_write+0x186>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	0a 94       	dec	r0
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <DIO_write+0x182>
    1250:	84 2b       	or	r24, r20
    1252:	8c 93       	st	X, r24
    1254:	14 c0       	rjmp	.+40     	; 0x127e <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
    1256:	a2 e3       	ldi	r26, 0x32	; 50
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e2 e3       	ldi	r30, 0x32	; 50
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 2e       	mov	r0, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <DIO_write+0x1ae>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	0a 94       	dec	r0
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <DIO_write+0x1aa>
    1278:	80 95       	com	r24
    127a:	84 23       	and	r24, r20
    127c:	8c 93       	st	X, r24
		}
		break ;
		default: break ;
	}
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <DIO_u8read>:


uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	00 d0       	rcall	.+0      	; 0x1294 <DIO_u8read+0x6>
    1294:	00 d0       	rcall	.+0      	; 0x1296 <DIO_u8read+0x8>
    1296:	0f 92       	push	r0
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	8a 83       	std	Y+2, r24	; 0x02
    129e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 return_value=0;
    12a0:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	3d 83       	std	Y+5, r19	; 0x05
    12aa:	2c 83       	std	Y+4, r18	; 0x04
    12ac:	4c 81       	ldd	r20, Y+4	; 0x04
    12ae:	5d 81       	ldd	r21, Y+5	; 0x05
    12b0:	42 34       	cpi	r20, 0x42	; 66
    12b2:	51 05       	cpc	r21, r1
    12b4:	b1 f1       	breq	.+108    	; 0x1322 <DIO_u8read+0x94>
    12b6:	8c 81       	ldd	r24, Y+4	; 0x04
    12b8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ba:	83 34       	cpi	r24, 0x43	; 67
    12bc:	91 05       	cpc	r25, r1
    12be:	34 f4       	brge	.+12     	; 0x12cc <DIO_u8read+0x3e>
    12c0:	2c 81       	ldd	r18, Y+4	; 0x04
    12c2:	3d 81       	ldd	r19, Y+5	; 0x05
    12c4:	21 34       	cpi	r18, 0x41	; 65
    12c6:	31 05       	cpc	r19, r1
    12c8:	71 f0       	breq	.+28     	; 0x12e6 <DIO_u8read+0x58>
    12ca:	84 c0       	rjmp	.+264    	; 0x13d4 <DIO_u8read+0x146>
    12cc:	4c 81       	ldd	r20, Y+4	; 0x04
    12ce:	5d 81       	ldd	r21, Y+5	; 0x05
    12d0:	43 34       	cpi	r20, 0x43	; 67
    12d2:	51 05       	cpc	r21, r1
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <DIO_u8read+0x4a>
    12d6:	43 c0       	rjmp	.+134    	; 0x135e <DIO_u8read+0xd0>
    12d8:	8c 81       	ldd	r24, Y+4	; 0x04
    12da:	9d 81       	ldd	r25, Y+5	; 0x05
    12dc:	84 34       	cpi	r24, 0x44	; 68
    12de:	91 05       	cpc	r25, r1
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <DIO_u8read+0x56>
    12e2:	5b c0       	rjmp	.+182    	; 0x139a <DIO_u8read+0x10c>
    12e4:	77 c0       	rjmp	.+238    	; 0x13d4 <DIO_u8read+0x146>
	{
		case 'A' :
		return_value=Read_bIT(PINA,pinnumber);//Read the value from the given pin in port A
    12e6:	e9 e3       	ldi	r30, 0x39	; 57
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <DIO_u8read+0x72>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	2a 95       	dec	r18
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <DIO_u8read+0x6e>
    1304:	9a 01       	movw	r18, r20
    1306:	28 23       	and	r18, r24
    1308:	39 23       	and	r19, r25
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	88 2f       	mov	r24, r24
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	a9 01       	movw	r20, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_u8read+0x8a>
    1314:	55 95       	asr	r21
    1316:	47 95       	ror	r20
    1318:	8a 95       	dec	r24
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <DIO_u8read+0x86>
    131c:	ca 01       	movw	r24, r20
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	59 c0       	rjmp	.+178    	; 0x13d4 <DIO_u8read+0x146>
		break;
		
		case 'B' :
		return_value=Read_bIT(PINB,pinnumber);//Read the value from the given pin in port B
    1322:	e6 e3       	ldi	r30, 0x36	; 54
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	48 2f       	mov	r20, r24
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 c0       	rjmp	.+4      	; 0x133c <DIO_u8read+0xae>
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	2a 95       	dec	r18
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <DIO_u8read+0xaa>
    1340:	9a 01       	movw	r18, r20
    1342:	28 23       	and	r18, r24
    1344:	39 23       	and	r19, r25
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	88 2f       	mov	r24, r24
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	a9 01       	movw	r20, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <DIO_u8read+0xc6>
    1350:	55 95       	asr	r21
    1352:	47 95       	ror	r20
    1354:	8a 95       	dec	r24
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <DIO_u8read+0xc2>
    1358:	ca 01       	movw	r24, r20
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	3b c0       	rjmp	.+118    	; 0x13d4 <DIO_u8read+0x146>
		break;
		
		case 'C' :
		return_value=Read_bIT(PINC,pinnumber);//Read the value from the given pin in port C
    135e:	e3 e3       	ldi	r30, 0x33	; 51
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	48 2f       	mov	r20, r24
    1366:	50 e0       	ldi	r21, 0x00	; 0
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <DIO_u8read+0xea>
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	2a 95       	dec	r18
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <DIO_u8read+0xe6>
    137c:	9a 01       	movw	r18, r20
    137e:	28 23       	and	r18, r24
    1380:	39 23       	and	r19, r25
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	88 2f       	mov	r24, r24
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	a9 01       	movw	r20, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_u8read+0x102>
    138c:	55 95       	asr	r21
    138e:	47 95       	ror	r20
    1390:	8a 95       	dec	r24
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_u8read+0xfe>
    1394:	ca 01       	movw	r24, r20
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	1d c0       	rjmp	.+58     	; 0x13d4 <DIO_u8read+0x146>
		break;
		
		case 'D' :
		return_value=Read_bIT(PIND,pinnumber);//Read the value from the given pin in port D
    139a:	e0 e3       	ldi	r30, 0x30	; 48
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	48 2f       	mov	r20, r24
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <DIO_u8read+0x126>
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	2a 95       	dec	r18
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <DIO_u8read+0x122>
    13b8:	9a 01       	movw	r18, r20
    13ba:	28 23       	and	r18, r24
    13bc:	39 23       	and	r19, r25
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	88 2f       	mov	r24, r24
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	a9 01       	movw	r20, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <DIO_u8read+0x13e>
    13c8:	55 95       	asr	r21
    13ca:	47 95       	ror	r20
    13cc:	8a 95       	dec	r24
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <DIO_u8read+0x13a>
    13d0:	ca 01       	movw	r24, r20
    13d2:	89 83       	std	Y+1, r24	; 0x01
		break;
		default: break;
	}
	return return_value ;
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <DIO_toggle>:
void DIO_toggle(uint8 portname,uint8 pinnumber)
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <DIO_toggle+0x6>
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <DIO_toggle+0x8>
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	89 83       	std	Y+1, r24	; 0x01
    13f4:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	3c 83       	std	Y+4, r19	; 0x04
    13fe:	2b 83       	std	Y+3, r18	; 0x03
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	9c 81       	ldd	r25, Y+4	; 0x04
    1404:	82 34       	cpi	r24, 0x42	; 66
    1406:	91 05       	cpc	r25, r1
    1408:	51 f1       	breq	.+84     	; 0x145e <DIO_toggle+0x78>
    140a:	2b 81       	ldd	r18, Y+3	; 0x03
    140c:	3c 81       	ldd	r19, Y+4	; 0x04
    140e:	23 34       	cpi	r18, 0x43	; 67
    1410:	31 05       	cpc	r19, r1
    1412:	34 f4       	brge	.+12     	; 0x1420 <DIO_toggle+0x3a>
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	9c 81       	ldd	r25, Y+4	; 0x04
    1418:	81 34       	cpi	r24, 0x41	; 65
    141a:	91 05       	cpc	r25, r1
    141c:	61 f0       	breq	.+24     	; 0x1436 <DIO_toggle+0x50>
    141e:	5a c0       	rjmp	.+180    	; 0x14d4 <DIO_toggle+0xee>
    1420:	2b 81       	ldd	r18, Y+3	; 0x03
    1422:	3c 81       	ldd	r19, Y+4	; 0x04
    1424:	23 34       	cpi	r18, 0x43	; 67
    1426:	31 05       	cpc	r19, r1
    1428:	71 f1       	breq	.+92     	; 0x1486 <DIO_toggle+0xa0>
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	9c 81       	ldd	r25, Y+4	; 0x04
    142e:	84 34       	cpi	r24, 0x44	; 68
    1430:	91 05       	cpc	r25, r1
    1432:	e9 f1       	breq	.+122    	; 0x14ae <DIO_toggle+0xc8>
    1434:	4f c0       	rjmp	.+158    	; 0x14d4 <DIO_toggle+0xee>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
    1436:	ab e3       	ldi	r26, 0x3B	; 59
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	eb e3       	ldi	r30, 0x3B	; 59
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	48 2f       	mov	r20, r24
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 2e       	mov	r0, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <DIO_toggle+0x6e>
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	0a 94       	dec	r0
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <DIO_toggle+0x6a>
    1458:	84 27       	eor	r24, r20
    145a:	8c 93       	st	X, r24
    145c:	3b c0       	rjmp	.+118    	; 0x14d4 <DIO_toggle+0xee>
		break;
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
    145e:	a8 e3       	ldi	r26, 0x38	; 56
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e8 e3       	ldi	r30, 0x38	; 56
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	48 2f       	mov	r20, r24
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	02 2e       	mov	r0, r18
    1476:	02 c0       	rjmp	.+4      	; 0x147c <DIO_toggle+0x96>
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	0a 94       	dec	r0
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <DIO_toggle+0x92>
    1480:	84 27       	eor	r24, r20
    1482:	8c 93       	st	X, r24
    1484:	27 c0       	rjmp	.+78     	; 0x14d4 <DIO_toggle+0xee>
		break;
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
    1486:	a5 e3       	ldi	r26, 0x35	; 53
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e5 e3       	ldi	r30, 0x35	; 53
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	48 2f       	mov	r20, r24
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 2e       	mov	r0, r18
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <DIO_toggle+0xbe>
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	0a 94       	dec	r0
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <DIO_toggle+0xba>
    14a8:	84 27       	eor	r24, r20
    14aa:	8c 93       	st	X, r24
    14ac:	13 c0       	rjmp	.+38     	; 0x14d4 <DIO_toggle+0xee>
		break;
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
    14ae:	a2 e3       	ldi	r26, 0x32	; 50
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e2 e3       	ldi	r30, 0x32	; 50
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <DIO_toggle+0xe6>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <DIO_toggle+0xe2>
    14d0:	84 27       	eor	r24, r20
    14d2:	8c 93       	st	X, r24
		break;
		default: break;
	}
}
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <DIO_write_port>:
void DIO_write_port(uint8 portname,uint8 portvalue)
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <DIO_write_port+0x6>
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <DIO_write_port+0x8>
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	89 83       	std	Y+1, r24	; 0x01
    14f0:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	3c 83       	std	Y+4, r19	; 0x04
    14fa:	2b 83       	std	Y+3, r18	; 0x03
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	82 34       	cpi	r24, 0x42	; 66
    1502:	91 05       	cpc	r25, r1
    1504:	d9 f0       	breq	.+54     	; 0x153c <DIO_write_port+0x5a>
    1506:	2b 81       	ldd	r18, Y+3	; 0x03
    1508:	3c 81       	ldd	r19, Y+4	; 0x04
    150a:	23 34       	cpi	r18, 0x43	; 67
    150c:	31 05       	cpc	r19, r1
    150e:	34 f4       	brge	.+12     	; 0x151c <DIO_write_port+0x3a>
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	81 34       	cpi	r24, 0x41	; 65
    1516:	91 05       	cpc	r25, r1
    1518:	61 f0       	breq	.+24     	; 0x1532 <DIO_write_port+0x50>
    151a:	1e c0       	rjmp	.+60     	; 0x1558 <DIO_write_port+0x76>
    151c:	2b 81       	ldd	r18, Y+3	; 0x03
    151e:	3c 81       	ldd	r19, Y+4	; 0x04
    1520:	23 34       	cpi	r18, 0x43	; 67
    1522:	31 05       	cpc	r19, r1
    1524:	81 f0       	breq	.+32     	; 0x1546 <DIO_write_port+0x64>
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	9c 81       	ldd	r25, Y+4	; 0x04
    152a:	84 34       	cpi	r24, 0x44	; 68
    152c:	91 05       	cpc	r25, r1
    152e:	81 f0       	breq	.+32     	; 0x1550 <DIO_write_port+0x6e>
    1530:	13 c0       	rjmp	.+38     	; 0x1558 <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
    1532:	eb e3       	ldi	r30, 0x3B	; 59
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	80 83       	st	Z, r24
    153a:	0e c0       	rjmp	.+28     	; 0x1558 <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
    153c:	e8 e3       	ldi	r30, 0x38	; 56
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	80 83       	st	Z, r24
    1544:	09 c0       	rjmp	.+18     	; 0x1558 <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
    1546:	e5 e3       	ldi	r30, 0x35	; 53
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	80 83       	st	Z, r24
    154e:	04 c0       	rjmp	.+8      	; 0x1558 <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
    1550:	e2 e3       	ldi	r30, 0x32	; 50
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	80 83       	st	Z, r24
		break ;
		default: break ;
	}
}
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <dio_write_highnibble>:
void dio_write_highnibble(uint8 portname,uint8 value)
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	00 d0       	rcall	.+0      	; 0x156c <dio_write_highnibble+0x6>
    156c:	00 d0       	rcall	.+0      	; 0x156e <dio_write_highnibble+0x8>
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	3c 83       	std	Y+4, r19	; 0x04
    157e:	2b 83       	std	Y+3, r18	; 0x03
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	9c 81       	ldd	r25, Y+4	; 0x04
    1584:	82 34       	cpi	r24, 0x42	; 66
    1586:	91 05       	cpc	r25, r1
    1588:	09 f1       	breq	.+66     	; 0x15cc <dio_write_highnibble+0x66>
    158a:	2b 81       	ldd	r18, Y+3	; 0x03
    158c:	3c 81       	ldd	r19, Y+4	; 0x04
    158e:	23 34       	cpi	r18, 0x43	; 67
    1590:	31 05       	cpc	r19, r1
    1592:	34 f4       	brge	.+12     	; 0x15a0 <dio_write_highnibble+0x3a>
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	9c 81       	ldd	r25, Y+4	; 0x04
    1598:	81 34       	cpi	r24, 0x41	; 65
    159a:	91 05       	cpc	r25, r1
    159c:	61 f0       	breq	.+24     	; 0x15b6 <dio_write_highnibble+0x50>
    159e:	36 c0       	rjmp	.+108    	; 0x160c <dio_write_highnibble+0xa6>
    15a0:	2b 81       	ldd	r18, Y+3	; 0x03
    15a2:	3c 81       	ldd	r19, Y+4	; 0x04
    15a4:	23 34       	cpi	r18, 0x43	; 67
    15a6:	31 05       	cpc	r19, r1
    15a8:	e1 f0       	breq	.+56     	; 0x15e2 <dio_write_highnibble+0x7c>
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	84 34       	cpi	r24, 0x44	; 68
    15b0:	91 05       	cpc	r25, r1
    15b2:	11 f1       	breq	.+68     	; 0x15f8 <dio_write_highnibble+0x92>
    15b4:	2b c0       	rjmp	.+86     	; 0x160c <dio_write_highnibble+0xa6>
	{
		case 'A' :
		PORTA|=(value&0xf0);//Set only the high nibble of the port A by the given value
    15b6:	ab e3       	ldi	r26, 0x3B	; 59
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	eb e3       	ldi	r30, 0x3B	; 59
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	98 2f       	mov	r25, r24
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	80 7f       	andi	r24, 0xF0	; 240
    15c6:	89 2b       	or	r24, r25
    15c8:	8c 93       	st	X, r24
    15ca:	20 c0       	rjmp	.+64     	; 0x160c <dio_write_highnibble+0xa6>
		break ;
		case 'B':
		PORTB|=(value&0xf0);//Set only the high nibble of the port B by the given value
    15cc:	a8 e3       	ldi	r26, 0x38	; 56
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e8 e3       	ldi	r30, 0x38	; 56
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	98 2f       	mov	r25, r24
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	80 7f       	andi	r24, 0xF0	; 240
    15dc:	89 2b       	or	r24, r25
    15de:	8c 93       	st	X, r24
    15e0:	15 c0       	rjmp	.+42     	; 0x160c <dio_write_highnibble+0xa6>
		break ;
		case 'C' :
		PORTC|=(value&0xf0);//Set only the high nibble of the port C by the given value
    15e2:	a5 e3       	ldi	r26, 0x35	; 53
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e5 e3       	ldi	r30, 0x35	; 53
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	98 2f       	mov	r25, r24
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	80 7f       	andi	r24, 0xF0	; 240
    15f2:	89 2b       	or	r24, r25
    15f4:	8c 93       	st	X, r24
    15f6:	0a c0       	rjmp	.+20     	; 0x160c <dio_write_highnibble+0xa6>
		break ;
		case 'D':
		PORTD|=(value&0xf0);//Set only the high nibble of the port D by the given value
    15f8:	a2 e3       	ldi	r26, 0x32	; 50
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e2 e3       	ldi	r30, 0x32	; 50
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	98 2f       	mov	r25, r24
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	80 7f       	andi	r24, 0xF0	; 240
    1608:	89 2b       	or	r24, r25
    160a:	8c 93       	st	X, r24
		break ;
		default: break ;
		
	}
}
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <clear_high_nibble>:

void clear_high_nibble(uint8 portname)
{
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	00 d0       	rcall	.+0      	; 0x1620 <clear_high_nibble+0x6>
    1620:	0f 92       	push	r0
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
    1626:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	3b 83       	std	Y+3, r19	; 0x03
    1630:	2a 83       	std	Y+2, r18	; 0x02
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	9b 81       	ldd	r25, Y+3	; 0x03
    1636:	82 34       	cpi	r24, 0x42	; 66
    1638:	91 05       	cpc	r25, r1
    163a:	f1 f0       	breq	.+60     	; 0x1678 <clear_high_nibble+0x5e>
    163c:	2a 81       	ldd	r18, Y+2	; 0x02
    163e:	3b 81       	ldd	r19, Y+3	; 0x03
    1640:	23 34       	cpi	r18, 0x43	; 67
    1642:	31 05       	cpc	r19, r1
    1644:	34 f4       	brge	.+12     	; 0x1652 <clear_high_nibble+0x38>
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	9b 81       	ldd	r25, Y+3	; 0x03
    164a:	81 34       	cpi	r24, 0x41	; 65
    164c:	91 05       	cpc	r25, r1
    164e:	61 f0       	breq	.+24     	; 0x1668 <clear_high_nibble+0x4e>
    1650:	2a c0       	rjmp	.+84     	; 0x16a6 <clear_high_nibble+0x8c>
    1652:	2a 81       	ldd	r18, Y+2	; 0x02
    1654:	3b 81       	ldd	r19, Y+3	; 0x03
    1656:	23 34       	cpi	r18, 0x43	; 67
    1658:	31 05       	cpc	r19, r1
    165a:	b1 f0       	breq	.+44     	; 0x1688 <clear_high_nibble+0x6e>
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	9b 81       	ldd	r25, Y+3	; 0x03
    1660:	84 34       	cpi	r24, 0x44	; 68
    1662:	91 05       	cpc	r25, r1
    1664:	c9 f0       	breq	.+50     	; 0x1698 <clear_high_nibble+0x7e>
    1666:	1f c0       	rjmp	.+62     	; 0x16a6 <clear_high_nibble+0x8c>
	{
		case 'A' :
		PORTA&=0x0f;//set the value of the high nibble of the port A as low
    1668:	ab e3       	ldi	r26, 0x3B	; 59
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	eb e3       	ldi	r30, 0x3B	; 59
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	8f 70       	andi	r24, 0x0F	; 15
    1674:	8c 93       	st	X, r24
    1676:	17 c0       	rjmp	.+46     	; 0x16a6 <clear_high_nibble+0x8c>
		break ;
		case 'B':
		PORTB&=0x0f;//set the value of the high nibble of the port B as low
    1678:	a8 e3       	ldi	r26, 0x38	; 56
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e8 e3       	ldi	r30, 0x38	; 56
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	8f 70       	andi	r24, 0x0F	; 15
    1684:	8c 93       	st	X, r24
    1686:	0f c0       	rjmp	.+30     	; 0x16a6 <clear_high_nibble+0x8c>
		break ;
		case 'C' :
		PORTC&=0x0f;//set the value of the high nibble of the port C as low
    1688:	a5 e3       	ldi	r26, 0x35	; 53
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e5 e3       	ldi	r30, 0x35	; 53
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	8f 70       	andi	r24, 0x0F	; 15
    1694:	8c 93       	st	X, r24
    1696:	07 c0       	rjmp	.+14     	; 0x16a6 <clear_high_nibble+0x8c>
		break ;
		case 'D':
		PORTD&=0x0f;//set the value of the high nibble of the port D as low
    1698:	a2 e3       	ldi	r26, 0x32	; 50
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e2 e3       	ldi	r30, 0x32	; 50
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	8f 70       	andi	r24, 0x0F	; 15
    16a4:	8c 93       	st	X, r24
		break ;
		default: break ;
		
	}
}
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <DIO_vconnectpullup>:

void DIO_vconnectpullup(uint8 portname ,uint8 pinnumber, uint8 connect_pullup)
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <DIO_vconnectpullup+0x6>
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <DIO_vconnectpullup+0x8>
    16ba:	0f 92       	push	r0
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	6a 83       	std	Y+2, r22	; 0x02
    16c4:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	3d 83       	std	Y+5, r19	; 0x05
    16ce:	2c 83       	std	Y+4, r18	; 0x04
    16d0:	8c 81       	ldd	r24, Y+4	; 0x04
    16d2:	9d 81       	ldd	r25, Y+5	; 0x05
    16d4:	82 34       	cpi	r24, 0x42	; 66
    16d6:	91 05       	cpc	r25, r1
    16d8:	09 f4       	brne	.+2      	; 0x16dc <DIO_vconnectpullup+0x2a>
    16da:	5e c0       	rjmp	.+188    	; 0x1798 <DIO_vconnectpullup+0xe6>
    16dc:	2c 81       	ldd	r18, Y+4	; 0x04
    16de:	3d 81       	ldd	r19, Y+5	; 0x05
    16e0:	23 34       	cpi	r18, 0x43	; 67
    16e2:	31 05       	cpc	r19, r1
    16e4:	34 f4       	brge	.+12     	; 0x16f2 <DIO_vconnectpullup+0x40>
    16e6:	8c 81       	ldd	r24, Y+4	; 0x04
    16e8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ea:	81 34       	cpi	r24, 0x41	; 65
    16ec:	91 05       	cpc	r25, r1
    16ee:	71 f0       	breq	.+28     	; 0x170c <DIO_vconnectpullup+0x5a>
    16f0:	24 c1       	rjmp	.+584    	; 0x193a <DIO_vconnectpullup+0x288>
    16f2:	2c 81       	ldd	r18, Y+4	; 0x04
    16f4:	3d 81       	ldd	r19, Y+5	; 0x05
    16f6:	23 34       	cpi	r18, 0x43	; 67
    16f8:	31 05       	cpc	r19, r1
    16fa:	09 f4       	brne	.+2      	; 0x16fe <DIO_vconnectpullup+0x4c>
    16fc:	93 c0       	rjmp	.+294    	; 0x1824 <DIO_vconnectpullup+0x172>
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	9d 81       	ldd	r25, Y+5	; 0x05
    1702:	84 34       	cpi	r24, 0x44	; 68
    1704:	91 05       	cpc	r25, r1
    1706:	09 f4       	brne	.+2      	; 0x170a <DIO_vconnectpullup+0x58>
    1708:	d3 c0       	rjmp	.+422    	; 0x18b0 <DIO_vconnectpullup+0x1fe>
    170a:	17 c1       	rjmp	.+558    	; 0x193a <DIO_vconnectpullup+0x288>
	{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case 'A':
		if(connect_pullup==1)
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	71 f5       	brne	.+92     	; 0x176e <DIO_vconnectpullup+0xbc>
		{
			CLR_BIT(SFIOR,PUD);
    1712:	a0 e5       	ldi	r26, 0x50	; 80
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e0 e5       	ldi	r30, 0x50	; 80
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	8b 7f       	andi	r24, 0xFB	; 251
    171e:	8c 93       	st	X, r24
			CLR_BIT(DDRA,pinnumber);
    1720:	aa e3       	ldi	r26, 0x3A	; 58
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	ea e3       	ldi	r30, 0x3A	; 58
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	48 2f       	mov	r20, r24
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	02 c0       	rjmp	.+4      	; 0x173c <DIO_vconnectpullup+0x8a>
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	2a 95       	dec	r18
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <DIO_vconnectpullup+0x86>
    1740:	80 95       	com	r24
    1742:	84 23       	and	r24, r20
    1744:	8c 93       	st	X, r24
			SET_BIT(PORTA,pinnumber);
    1746:	ab e3       	ldi	r26, 0x3B	; 59
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	eb e3       	ldi	r30, 0x3B	; 59
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	48 2f       	mov	r20, r24
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	02 2e       	mov	r0, r18
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <DIO_vconnectpullup+0xb2>
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	0a 94       	dec	r0
    1766:	e2 f7       	brpl	.-8      	; 0x1760 <DIO_vconnectpullup+0xae>
    1768:	84 2b       	or	r24, r20
    176a:	8c 93       	st	X, r24
    176c:	e6 c0       	rjmp	.+460    	; 0x193a <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
    176e:	ab e3       	ldi	r26, 0x3B	; 59
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	eb e3       	ldi	r30, 0x3B	; 59
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	48 2f       	mov	r20, r24
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	02 2e       	mov	r0, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <DIO_vconnectpullup+0xda>
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	0a 94       	dec	r0
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <DIO_vconnectpullup+0xd6>
    1790:	80 95       	com	r24
    1792:	84 23       	and	r24, r20
    1794:	8c 93       	st	X, r24
    1796:	d1 c0       	rjmp	.+418    	; 0x193a <DIO_vconnectpullup+0x288>
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port B */
		case 'B':
		if(connect_pullup==1)
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	81 30       	cpi	r24, 0x01	; 1
    179c:	71 f5       	brne	.+92     	; 0x17fa <DIO_vconnectpullup+0x148>
		{
			CLR_BIT(SFIOR,PUD);
    179e:	a0 e5       	ldi	r26, 0x50	; 80
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e0 e5       	ldi	r30, 0x50	; 80
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	8b 7f       	andi	r24, 0xFB	; 251
    17aa:	8c 93       	st	X, r24
			CLR_BIT(DDRB,pinnumber);
    17ac:	a7 e3       	ldi	r26, 0x37	; 55
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e7 e3       	ldi	r30, 0x37	; 55
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	48 2f       	mov	r20, r24
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <DIO_vconnectpullup+0x116>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	2a 95       	dec	r18
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <DIO_vconnectpullup+0x112>
    17cc:	80 95       	com	r24
    17ce:	84 23       	and	r24, r20
    17d0:	8c 93       	st	X, r24
			SET_BIT(PORTB,pinnumber);
    17d2:	a8 e3       	ldi	r26, 0x38	; 56
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e8 e3       	ldi	r30, 0x38	; 56
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	48 2f       	mov	r20, r24
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	02 2e       	mov	r0, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <DIO_vconnectpullup+0x13e>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	0a 94       	dec	r0
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <DIO_vconnectpullup+0x13a>
    17f4:	84 2b       	or	r24, r20
    17f6:	8c 93       	st	X, r24
    17f8:	a0 c0       	rjmp	.+320    	; 0x193a <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
    17fa:	a8 e3       	ldi	r26, 0x38	; 56
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e8 e3       	ldi	r30, 0x38	; 56
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	48 2f       	mov	r20, r24
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 2e       	mov	r0, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <DIO_vconnectpullup+0x166>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <DIO_vconnectpullup+0x162>
    181c:	80 95       	com	r24
    181e:	84 23       	and	r24, r20
    1820:	8c 93       	st	X, r24
    1822:	8b c0       	rjmp	.+278    	; 0x193a <DIO_vconnectpullup+0x288>
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port C */
		case 'C':
		if(connect_pullup==1)
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	81 30       	cpi	r24, 0x01	; 1
    1828:	71 f5       	brne	.+92     	; 0x1886 <DIO_vconnectpullup+0x1d4>
		{
			CLR_BIT(SFIOR,PUD);
    182a:	a0 e5       	ldi	r26, 0x50	; 80
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e0 e5       	ldi	r30, 0x50	; 80
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	8b 7f       	andi	r24, 0xFB	; 251
    1836:	8c 93       	st	X, r24
			CLR_BIT(DDRC,pinnumber);
    1838:	a4 e3       	ldi	r26, 0x34	; 52
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e4 e3       	ldi	r30, 0x34	; 52
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	48 2f       	mov	r20, r24
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <DIO_vconnectpullup+0x1a2>
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	2a 95       	dec	r18
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <DIO_vconnectpullup+0x19e>
    1858:	80 95       	com	r24
    185a:	84 23       	and	r24, r20
    185c:	8c 93       	st	X, r24
			SET_BIT(PORTC,pinnumber);
    185e:	a5 e3       	ldi	r26, 0x35	; 53
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e5 e3       	ldi	r30, 0x35	; 53
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	48 2f       	mov	r20, r24
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	02 2e       	mov	r0, r18
    1876:	02 c0       	rjmp	.+4      	; 0x187c <DIO_vconnectpullup+0x1ca>
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	0a 94       	dec	r0
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <DIO_vconnectpullup+0x1c6>
    1880:	84 2b       	or	r24, r20
    1882:	8c 93       	st	X, r24
    1884:	5a c0       	rjmp	.+180    	; 0x193a <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
    1886:	a5 e3       	ldi	r26, 0x35	; 53
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e5 e3       	ldi	r30, 0x35	; 53
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	48 2f       	mov	r20, r24
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	02 2e       	mov	r0, r18
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <DIO_vconnectpullup+0x1f2>
    18a0:	88 0f       	add	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	0a 94       	dec	r0
    18a6:	e2 f7       	brpl	.-8      	; 0x18a0 <DIO_vconnectpullup+0x1ee>
    18a8:	80 95       	com	r24
    18aa:	84 23       	and	r24, r20
    18ac:	8c 93       	st	X, r24
    18ae:	45 c0       	rjmp	.+138    	; 0x193a <DIO_vconnectpullup+0x288>
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port D */
		case 'D':
		if(connect_pullup==1)
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	71 f5       	brne	.+92     	; 0x1912 <DIO_vconnectpullup+0x260>
		{
			CLR_BIT(SFIOR,PUD);
    18b6:	a0 e5       	ldi	r26, 0x50	; 80
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e0 e5       	ldi	r30, 0x50	; 80
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	8b 7f       	andi	r24, 0xFB	; 251
    18c2:	8c 93       	st	X, r24
			CLR_BIT(DDRD,pinnumber);
    18c4:	a1 e3       	ldi	r26, 0x31	; 49
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e1 e3       	ldi	r30, 0x31	; 49
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	48 2f       	mov	r20, r24
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <DIO_vconnectpullup+0x22e>
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	2a 95       	dec	r18
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <DIO_vconnectpullup+0x22a>
    18e4:	80 95       	com	r24
    18e6:	84 23       	and	r24, r20
    18e8:	8c 93       	st	X, r24
			SET_BIT(PORTD,pinnumber);
    18ea:	a2 e3       	ldi	r26, 0x32	; 50
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e2 e3       	ldi	r30, 0x32	; 50
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	48 2f       	mov	r20, r24
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	02 2e       	mov	r0, r18
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <DIO_vconnectpullup+0x256>
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	0a 94       	dec	r0
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <DIO_vconnectpullup+0x252>
    190c:	84 2b       	or	r24, r20
    190e:	8c 93       	st	X, r24
    1910:	14 c0       	rjmp	.+40     	; 0x193a <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
    1912:	a2 e3       	ldi	r26, 0x32	; 50
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e2 e3       	ldi	r30, 0x32	; 50
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	48 2f       	mov	r20, r24
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 2e       	mov	r0, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <DIO_vconnectpullup+0x27e>
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	0a 94       	dec	r0
    1932:	e2 f7       	brpl	.-8      	; 0x192c <DIO_vconnectpullup+0x27a>
    1934:	80 95       	com	r24
    1936:	84 23       	and	r24, r20
    1938:	8c 93       	st	X, r24
		}
		break;
		
	}
}
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <LED_vInit>:

#include "LED.h"
void LED_vInit(uint8 portname,uint8 pinnumber)
{
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	00 d0       	rcall	.+0      	; 0x1950 <LED_vInit+0x6>
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	89 83       	std	Y+1, r24	; 0x01
    1956:	6a 83       	std	Y+2, r22	; 0x02
	DIO_vsetPINDir(portname,pinnumber,1);//Set the given pin in the given port as an output
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	6a 81       	ldd	r22, Y+2	; 0x02
    195c:	41 e0       	ldi	r20, 0x01	; 1
    195e:	0e 94 7f 07 	call	0xefe	; 0xefe <DIO_vsetPINDir>
}
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <LED_vTurnOn>:
void LED_vTurnOn(uint8 portname,uint8 pinnumber)
{
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	00 d0       	rcall	.+0      	; 0x1972 <LED_vTurnOn+0x6>
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	89 83       	std	Y+1, r24	; 0x01
    1978:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(portname,pinnumber,1);//Set the given pin in the given port to one(on)
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	6a 81       	ldd	r22, Y+2	; 0x02
    197e:	41 e0       	ldi	r20, 0x01	; 1
    1980:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_write>
}
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <LED_vTurnOff>:
void LED_vTurnOff(uint8 portname,uint8 pinnumber)
{
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	00 d0       	rcall	.+0      	; 0x1994 <LED_vTurnOff+0x6>
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	6a 81       	ldd	r22, Y+2	; 0x02
    19a0:	40 e0       	ldi	r20, 0x00	; 0
    19a2:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_write>
}
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <LED_vToggle>:
void LED_vToggle(uint8 portname,uint8 pinnumber)
{
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	00 d0       	rcall	.+0      	; 0x19b6 <LED_vToggle+0x6>
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	89 83       	std	Y+1, r24	; 0x01
    19bc:	6a 83       	std	Y+2, r22	; 0x02
	DIO_toggle(portname,pinnumber);//Set the given pin in the given port to zero if it is one or set it to one if it is zero
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	6a 81       	ldd	r22, Y+2	; 0x02
    19c2:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <DIO_toggle>
}
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <LED_u8ReadStatus>:
uint8 LED_u8ReadStatus(uint8 portname,uint8 pinnumber)
{
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	00 d0       	rcall	.+0      	; 0x19d6 <LED_u8ReadStatus+0x6>
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	89 83       	std	Y+1, r24	; 0x01
    19dc:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_u8read(portname,pinnumber);//return the current status of the given pin
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	6a 81       	ldd	r22, Y+2	; 0x02
    19e2:	0e 94 47 09 	call	0x128e	; 0x128e <DIO_u8read>
}
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	08 95       	ret

000019f0 <SERVOM_vInit>:
#include "SERVOM_interface.h"
#include "SERVOM_private.h"
#include "SERVOM_config.h"

void SERVOM_vInit()
{
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
	DIO_vsetPINDir(APP_SERVOM_PORT, APP_SERVOM_PIN, 1);
    19f8:	84 e4       	ldi	r24, 0x44	; 68
    19fa:	65 e0       	ldi	r22, 0x05	; 5
    19fc:	41 e0       	ldi	r20, 0x01	; 1
    19fe:	0e 94 7f 07 	call	0xefe	; 0xefe <DIO_vsetPINDir>
	TMR1_init();
    1a02:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <TMR1_init>
}
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <SERVOM_vStart>:


void SERVOM_vStart(uint8 Copy_u8Angle)
{
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <SERVOM_vStart+0x6>
    1a12:	0f 92       	push	r0
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	8b 83       	std	Y+3, r24	; 0x03
	uint16 mappedValue = (Copy_u8Angle/0.18F) + 1000;
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	88 2f       	mov	r24, r24
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	aa 27       	eor	r26, r26
    1a22:	97 fd       	sbrc	r25, 7
    1a24:	a0 95       	com	r26
    1a26:	ba 2f       	mov	r27, r26
    1a28:	bc 01       	movw	r22, r24
    1a2a:	cd 01       	movw	r24, r26
    1a2c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	bc 01       	movw	r22, r24
    1a36:	cd 01       	movw	r24, r26
    1a38:	2c ee       	ldi	r18, 0xEC	; 236
    1a3a:	31 e5       	ldi	r19, 0x51	; 81
    1a3c:	48 e3       	ldi	r20, 0x38	; 56
    1a3e:	5e e3       	ldi	r21, 0x3E	; 62
    1a40:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	bc 01       	movw	r22, r24
    1a4a:	cd 01       	movw	r24, r26
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	4a e7       	ldi	r20, 0x7A	; 122
    1a52:	54 e4       	ldi	r21, 0x44	; 68
    1a54:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	bc 01       	movw	r22, r24
    1a5e:	cd 01       	movw	r24, r26
    1a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	9a 83       	std	Y+2, r25	; 0x02
    1a6a:	89 83       	std	Y+1, r24	; 0x01
	TMR1_setCompareMatchValueA(mappedValue);
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a70:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <TMR1_setCompareMatchValueA>
}
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <SERVOM_vStop>:

void SERVOM_vStop(void)
{
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
	TMR1_setCompareMatchValueA( 1000);
    1a88:	88 ee       	ldi	r24, 0xE8	; 232
    1a8a:	93 e0       	ldi	r25, 0x03	; 3
    1a8c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <TMR1_setCompareMatchValueA>
}
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <SPI_vInitMaster>:
#include "SPI.h"
#include "STD_MESSAGES.h"
#include "std_macros.h"

void SPI_vInitMaster (void)
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
	DDRB |=(1<<SPI_MOSI) |(1<<SPI_SS)|(1<<SPI_SCK);//Set the port B mosi(master out slave in ) ,port B ss(slave select),sck(spi clock)  pins as output
    1a9e:	a7 e3       	ldi	r26, 0x37	; 55
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e7 e3       	ldi	r30, 0x37	; 55
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	80 6b       	ori	r24, 0xB0	; 176
    1aaa:	8c 93       	st	X, r24
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//Enable the SPI,master mode ,Set the clock speed to F/16
    1aac:	ad e2       	ldi	r26, 0x2D	; 45
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	ed e2       	ldi	r30, 0x2D	; 45
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	81 65       	ori	r24, 0x51	; 81
    1ab8:	8c 93       	st	X, r24
}
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <SPI_vInitSlave>:

void SPI_vInitSlave (void)
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
    1ac8:	a7 e3       	ldi	r26, 0x37	; 55
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e7 e3       	ldi	r30, 0x37	; 55
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	80 64       	ori	r24, 0x40	; 64
    1ad4:	8c 93       	st	X, r24
	SPCR |= (1<<SPE);//Enable the SPI
    1ad6:	ad e2       	ldi	r26, 0x2D	; 45
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	ed e2       	ldi	r30, 0x2D	; 45
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	80 64       	ori	r24, 0x40	; 64
    1ae2:	8c 93       	st	X, r24
}
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <SPI_ui8TransmitRecive>:

uint8 SPI_ui8TransmitRecive (uint8 data)
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	0f 92       	push	r0
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;//move the given data to SPI Data register
    1af6:	ef e2       	ldi	r30, 0x2F	; 47
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	80 83       	st	Z, r24
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
    1afe:	ee e2       	ldi	r30, 0x2E	; 46
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	88 1f       	adc	r24, r24
    1b06:	88 27       	eor	r24, r24
    1b08:	88 1f       	adc	r24, r24
    1b0a:	88 2f       	mov	r24, r24
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	90 70       	andi	r25, 0x00	; 0
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	a9 f3       	breq	.-22     	; 0x1afe <SPI_ui8TransmitRecive+0x14>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
    1b14:	ef e2       	ldi	r30, 0x2F	; 47
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	0f 90       	pop	r0
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <TMR1_init>:
/* MCAL */
#include "TMR1_interface.h"


void TMR1_init(void)
{
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
	// Select Mode = Fast PWM Mode(14)
	CLR_BIT(TCCR1A,0);
    1b2a:	af e4       	ldi	r26, 0x4F	; 79
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	ef e4       	ldi	r30, 0x4F	; 79
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	8e 7f       	andi	r24, 0xFE	; 254
    1b36:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,1);
    1b38:	af e4       	ldi	r26, 0x4F	; 79
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	ef e4       	ldi	r30, 0x4F	; 79
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	82 60       	ori	r24, 0x02	; 2
    1b44:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3);
    1b46:	ae e4       	ldi	r26, 0x4E	; 78
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	ee e4       	ldi	r30, 0x4E	; 78
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	88 60       	ori	r24, 0x08	; 8
    1b52:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,4);
    1b54:	ae e4       	ldi	r26, 0x4E	; 78
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	ee e4       	ldi	r30, 0x4E	; 78
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	80 61       	ori	r24, 0x10	; 16
    1b60:	8c 93       	st	X, r24

	// Select Non Inverting Mode
	CLR_BIT(TCCR1A,6);
    1b62:	af e4       	ldi	r26, 0x4F	; 79
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	ef e4       	ldi	r30, 0x4F	; 79
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	8f 7b       	andi	r24, 0xBF	; 191
    1b6e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,7);
    1b70:	af e4       	ldi	r26, 0x4F	; 79
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	ef e4       	ldi	r30, 0x4F	; 79
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	80 68       	ori	r24, 0x80	; 128
    1b7c:	8c 93       	st	X, r24

	//Set OC1A pin as O/P pin
	SET_BIT(DDRD,5); 
    1b7e:	a1 e3       	ldi	r26, 0x31	; 49
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	e1 e3       	ldi	r30, 0x31	; 49
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	80 62       	ori	r24, 0x20	; 32
    1b8a:	8c 93       	st	X, r24

	// ICR1 >> period time = 20ms >> freq. = 50HZ
	ICR1 = 4999;
    1b8c:	e6 e4       	ldi	r30, 0x46	; 70
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	87 e8       	ldi	r24, 0x87	; 135
    1b92:	93 e1       	ldi	r25, 0x13	; 19
    1b94:	91 83       	std	Z+1, r25	; 0x01
    1b96:	80 83       	st	Z, r24
}
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	08 95       	ret

00001b9e <TMR1_start>:


void TMR1_start(void)
{
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
	// Select Prescaler Value = 64
	SET_BIT(TCCR1B,0);
    1ba6:	ae e4       	ldi	r26, 0x4E	; 78
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	ee e4       	ldi	r30, 0x4E	; 78
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	81 60       	ori	r24, 0x01	; 1
    1bb2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
    1bb4:	ae e4       	ldi	r26, 0x4E	; 78
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	ee e4       	ldi	r30, 0x4E	; 78
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	82 60       	ori	r24, 0x02	; 2
    1bc0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
    1bc2:	ae e4       	ldi	r26, 0x4E	; 78
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	ee e4       	ldi	r30, 0x4E	; 78
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	8b 7f       	andi	r24, 0xFB	; 251
    1bce:	8c 93       	st	X, r24
}
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <TMR1_stop>:
void TMR1_stop(void)
{
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B,0);
    1bde:	ae e4       	ldi	r26, 0x4E	; 78
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	ee e4       	ldi	r30, 0x4E	; 78
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	8e 7f       	andi	r24, 0xFE	; 254
    1bea:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,1);
    1bec:	ae e4       	ldi	r26, 0x4E	; 78
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	ee e4       	ldi	r30, 0x4E	; 78
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	8d 7f       	andi	r24, 0xFD	; 253
    1bf8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
    1bfa:	ae e4       	ldi	r26, 0x4E	; 78
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	ee e4       	ldi	r30, 0x4E	; 78
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	8b 7f       	andi	r24, 0xFB	; 251
    1c06:	8c 93       	st	X, r24
}
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <TMR1_setCompareMatchValueA>:


void TMR1_setCompareMatchValueA(uint16 value)
{
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <TMR1_setCompareMatchValueA+0x6>
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	9a 83       	std	Y+2, r25	; 0x02
    1c1a:	89 83       	std	Y+1, r24	; 0x01
	// Init Timer With Compare Value (Duty Cycle)
	OCR1A= value;
    1c1c:	ea e4       	ldi	r30, 0x4A	; 74
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	9a 81       	ldd	r25, Y+2	; 0x02
    1c24:	91 83       	std	Z+1, r25	; 0x01
    1c26:	80 83       	st	Z, r24
}
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	08 95       	ret

00001c32 <main>:
volatile uint16 temp_sensor_reading=0; // the temperature of the room 
volatile uint8 counter=0; // the counter which determine the periodic time of implementing ISR
volatile uint8 last_air_conditioning_value=AIR_CONDTIONING_OFF; // last air conditioning value which will help in hysteresis

int main(void)
{
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <main+0x6>
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <main+0x8>
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
	ADC_vinit();//initialize the ADC of the micro controller
    1c3e:	0e 94 15 07 	call	0xe2a	; 0xe2a <ADC_vinit>
	timer0_initializeCTC();//Initialize the timer zero of the micro controller
    1c42:	0e 94 50 10 	call	0x20a0	; 0x20a0 <timer0_initializeCTC>
	SPI_vInitSlave();//initialize the SPI as a slave
    1c46:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <SPI_vInitSlave>
	SERVOM_vInit();//init Servo
    1c4a:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <SERVOM_vInit>
	
	/* initialization of output pins of connected leds or devices */
	LED_vInit(AIR_COND_PORT,AIR_COND_PIN);
    1c4e:	84 e4       	ldi	r24, 0x44	; 68
    1c50:	62 e0       	ldi	r22, 0x02	; 2
    1c52:	0e 94 a5 0c 	call	0x194a	; 0x194a <LED_vInit>
	LED_vInit(TV_PORT,TV_PIN);
    1c56:	84 e4       	ldi	r24, 0x44	; 68
    1c58:	63 e0       	ldi	r22, 0x03	; 3
    1c5a:	0e 94 a5 0c 	call	0x194a	; 0x194a <LED_vInit>
	LED_vInit(ROOM1_PORT,ROOM1_PIN);
    1c5e:	84 e4       	ldi	r24, 0x44	; 68
    1c60:	64 e0       	ldi	r22, 0x04	; 4
    1c62:	0e 94 a5 0c 	call	0x194a	; 0x194a <LED_vInit>
	LED_vInit(ROOM2_PORT,ROOM2_PIN);
    1c66:	84 e4       	ldi	r24, 0x44	; 68
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	0e 94 a5 0c 	call	0x194a	; 0x194a <LED_vInit>
	LED_vInit(ROOM3_PORT,ROOM3_PIN);
    1c6e:	84 e4       	ldi	r24, 0x44	; 68
    1c70:	66 e0       	ldi	r22, 0x06	; 6
    1c72:	0e 94 a5 0c 	call	0x194a	; 0x194a <LED_vInit>
	LED_vInit(ROOM4_PORT,ROOM4_PIN);
    1c76:	84 e4       	ldi	r24, 0x44	; 68
    1c78:	67 e0       	ldi	r22, 0x07	; 7
    1c7a:	0e 94 a5 0c 	call	0x194a	; 0x194a <LED_vInit>
	
	uint8 request = DEFAULT_ACK;//the value that is received from the master
    1c7e:	8f ef       	ldi	r24, 0xFF	; 255
    1c80:	8a 83       	std	Y+2, r24	; 0x02
	uint8 response = DEFAULT_ACK;//the values that is sent back to the master
    1c82:	8f ef       	ldi	r24, 0xFF	; 255
    1c84:	89 83       	std	Y+1, r24	; 0x01
	
	while(1)
	{
		request = SPI_ui8TransmitRecive(DEFAULT_ACK);//wait for the master to start the transmitting
    1c86:	8f ef       	ldi	r24, 0xFF	; 255
    1c88:	0e 94 75 0d 	call	0x1aea	; 0x1aea <SPI_ui8TransmitRecive>
    1c8c:	8a 83       	std	Y+2, r24	; 0x02
		//ALL Messages are defined in STD_messages.h
		switch (request)
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	3c 83       	std	Y+4, r19	; 0x04
    1c96:	2b 83       	std	Y+3, r18	; 0x03
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9c:	84 32       	cpi	r24, 0x24	; 36
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <main+0x72>
    1ca2:	1f c1       	rjmp	.+574    	; 0x1ee2 <main+0x2b0>
    1ca4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca8:	25 32       	cpi	r18, 0x25	; 37
    1caa:	31 05       	cpc	r19, r1
    1cac:	0c f0       	brlt	.+2      	; 0x1cb0 <main+0x7e>
    1cae:	49 c0       	rjmp	.+146    	; 0x1d42 <main+0x110>
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb4:	85 31       	cpi	r24, 0x15	; 21
    1cb6:	91 05       	cpc	r25, r1
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <main+0x8a>
    1cba:	f0 c0       	rjmp	.+480    	; 0x1e9c <main+0x26a>
    1cbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc0:	26 31       	cpi	r18, 0x16	; 22
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	fc f4       	brge	.+62     	; 0x1d04 <main+0xd2>
    1cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cca:	82 31       	cpi	r24, 0x12	; 18
    1ccc:	91 05       	cpc	r25, r1
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <main+0xa0>
    1cd0:	95 c0       	rjmp	.+298    	; 0x1dfc <main+0x1ca>
    1cd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd6:	23 31       	cpi	r18, 0x13	; 19
    1cd8:	31 05       	cpc	r19, r1
    1cda:	3c f4       	brge	.+14     	; 0x1cea <main+0xb8>
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce0:	81 31       	cpi	r24, 0x11	; 17
    1ce2:	91 05       	cpc	r25, r1
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <main+0xb6>
    1ce6:	76 c0       	rjmp	.+236    	; 0x1dd4 <main+0x1a2>
    1ce8:	ce cf       	rjmp	.-100    	; 0x1c86 <main+0x54>
    1cea:	2b 81       	ldd	r18, Y+3	; 0x03
    1cec:	3c 81       	ldd	r19, Y+4	; 0x04
    1cee:	23 31       	cpi	r18, 0x13	; 19
    1cf0:	31 05       	cpc	r19, r1
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <main+0xc4>
    1cf4:	97 c0       	rjmp	.+302    	; 0x1e24 <main+0x1f2>
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfa:	84 31       	cpi	r24, 0x14	; 20
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	09 f4       	brne	.+2      	; 0x1d02 <main+0xd0>
    1d00:	a5 c0       	rjmp	.+330    	; 0x1e4c <main+0x21a>
    1d02:	c1 cf       	rjmp	.-126    	; 0x1c86 <main+0x54>
    1d04:	2b 81       	ldd	r18, Y+3	; 0x03
    1d06:	3c 81       	ldd	r19, Y+4	; 0x04
    1d08:	21 32       	cpi	r18, 0x21	; 33
    1d0a:	31 05       	cpc	r19, r1
    1d0c:	09 f4       	brne	.+2      	; 0x1d10 <main+0xde>
    1d0e:	da c0       	rjmp	.+436    	; 0x1ec4 <main+0x292>
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	9c 81       	ldd	r25, Y+4	; 0x04
    1d14:	82 32       	cpi	r24, 0x22	; 34
    1d16:	91 05       	cpc	r25, r1
    1d18:	3c f4       	brge	.+14     	; 0x1d28 <main+0xf6>
    1d1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d1e:	26 31       	cpi	r18, 0x16	; 22
    1d20:	31 05       	cpc	r19, r1
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <main+0xf4>
    1d24:	a7 c0       	rjmp	.+334    	; 0x1e74 <main+0x242>
    1d26:	af cf       	rjmp	.-162    	; 0x1c86 <main+0x54>
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	82 32       	cpi	r24, 0x22	; 34
    1d2e:	91 05       	cpc	r25, r1
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <main+0x102>
    1d32:	cd c0       	rjmp	.+410    	; 0x1ece <main+0x29c>
    1d34:	2b 81       	ldd	r18, Y+3	; 0x03
    1d36:	3c 81       	ldd	r19, Y+4	; 0x04
    1d38:	23 32       	cpi	r18, 0x23	; 35
    1d3a:	31 05       	cpc	r19, r1
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <main+0x10e>
    1d3e:	cc c0       	rjmp	.+408    	; 0x1ed8 <main+0x2a6>
    1d40:	a2 cf       	rjmp	.-188    	; 0x1c86 <main+0x54>
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	9c 81       	ldd	r25, Y+4	; 0x04
    1d46:	83 33       	cpi	r24, 0x33	; 51
    1d48:	91 05       	cpc	r25, r1
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <main+0x11c>
    1d4c:	ef c0       	rjmp	.+478    	; 0x1f2c <main+0x2fa>
    1d4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d50:	3c 81       	ldd	r19, Y+4	; 0x04
    1d52:	24 33       	cpi	r18, 0x34	; 52
    1d54:	31 05       	cpc	r19, r1
    1d56:	cc f4       	brge	.+50     	; 0x1d8a <main+0x158>
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5c:	86 32       	cpi	r24, 0x26	; 38
    1d5e:	91 05       	cpc	r25, r1
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <main+0x132>
    1d62:	c4 c0       	rjmp	.+392    	; 0x1eec <main+0x2ba>
    1d64:	2b 81       	ldd	r18, Y+3	; 0x03
    1d66:	3c 81       	ldd	r19, Y+4	; 0x04
    1d68:	26 32       	cpi	r18, 0x26	; 38
    1d6a:	31 05       	cpc	r19, r1
    1d6c:	0c f4       	brge	.+2      	; 0x1d70 <main+0x13e>
    1d6e:	c5 c0       	rjmp	.+394    	; 0x1efa <main+0x2c8>
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	9c 81       	ldd	r25, Y+4	; 0x04
    1d74:	81 33       	cpi	r24, 0x31	; 49
    1d76:	91 05       	cpc	r25, r1
    1d78:	09 f4       	brne	.+2      	; 0x1d7c <main+0x14a>
    1d7a:	ce c0       	rjmp	.+412    	; 0x1f18 <main+0x2e6>
    1d7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d80:	22 33       	cpi	r18, 0x32	; 50
    1d82:	31 05       	cpc	r19, r1
    1d84:	09 f4       	brne	.+2      	; 0x1d88 <main+0x156>
    1d86:	cd c0       	rjmp	.+410    	; 0x1f22 <main+0x2f0>
    1d88:	7e cf       	rjmp	.-260    	; 0x1c86 <main+0x54>
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8e:	86 33       	cpi	r24, 0x36	; 54
    1d90:	91 05       	cpc	r25, r1
    1d92:	09 f4       	brne	.+2      	; 0x1d96 <main+0x164>
    1d94:	d5 c0       	rjmp	.+426    	; 0x1f40 <main+0x30e>
    1d96:	2b 81       	ldd	r18, Y+3	; 0x03
    1d98:	3c 81       	ldd	r19, Y+4	; 0x04
    1d9a:	27 33       	cpi	r18, 0x37	; 55
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	6c f4       	brge	.+26     	; 0x1dba <main+0x188>
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	9c 81       	ldd	r25, Y+4	; 0x04
    1da4:	84 33       	cpi	r24, 0x34	; 52
    1da6:	91 05       	cpc	r25, r1
    1da8:	09 f4       	brne	.+2      	; 0x1dac <main+0x17a>
    1daa:	c5 c0       	rjmp	.+394    	; 0x1f36 <main+0x304>
    1dac:	2b 81       	ldd	r18, Y+3	; 0x03
    1dae:	3c 81       	ldd	r19, Y+4	; 0x04
    1db0:	25 33       	cpi	r18, 0x35	; 53
    1db2:	31 05       	cpc	r19, r1
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <main+0x186>
    1db6:	cb c0       	rjmp	.+406    	; 0x1f4e <main+0x31c>
    1db8:	66 cf       	rjmp	.-308    	; 0x1c86 <main+0x54>
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbe:	87 33       	cpi	r24, 0x37	; 55
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	09 f4       	brne	.+2      	; 0x1dc6 <main+0x194>
    1dc4:	9f c0       	rjmp	.+318    	; 0x1f04 <main+0x2d2>
    1dc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dca:	20 34       	cpi	r18, 0x40	; 64
    1dcc:	31 05       	cpc	r19, r1
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <main+0x1a0>
    1dd0:	c3 c0       	rjmp	.+390    	; 0x1f58 <main+0x326>
    1dd2:	59 cf       	rjmp	.-334    	; 0x1c86 <main+0x54>
		{
			/*********************************   STATUS COMMANDS ********************************/
			//commands related to send the current status back to the master
			case ROOM1_STATUS:
			if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==0)//if the led is turned off
    1dd4:	84 e4       	ldi	r24, 0x44	; 68
    1dd6:	64 e0       	ldi	r22, 0x04	; 4
    1dd8:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LED_u8ReadStatus>
    1ddc:	88 23       	and	r24, r24
    1dde:	11 f4       	brne	.+4      	; 0x1de4 <main+0x1b2>
			{
				response = OFF_STATUS;//set the response as off status
    1de0:	19 82       	std	Y+1, r1	; 0x01
    1de2:	08 c0       	rjmp	.+16     	; 0x1df4 <main+0x1c2>
			}
			else if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==1)//if the led is turned on
    1de4:	84 e4       	ldi	r24, 0x44	; 68
    1de6:	64 e0       	ldi	r22, 0x04	; 4
    1de8:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LED_u8ReadStatus>
    1dec:	81 30       	cpi	r24, 0x01	; 1
    1dee:	11 f4       	brne	.+4      	; 0x1df4 <main+0x1c2>
			{
				response = ON_STATUS;//set the response as on status
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	0e 94 75 0d 	call	0x1aea	; 0x1aea <SPI_ui8TransmitRecive>
    1dfa:	45 cf       	rjmp	.-374    	; 0x1c86 <main+0x54>
			break;//break the switch case
			case ROOM2_STATUS:
			if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==0)//if the led is turned off
    1dfc:	84 e4       	ldi	r24, 0x44	; 68
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
    1e00:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LED_u8ReadStatus>
    1e04:	88 23       	and	r24, r24
    1e06:	11 f4       	brne	.+4      	; 0x1e0c <main+0x1da>
			{
				response = OFF_STATUS;//set the response as off status
    1e08:	19 82       	std	Y+1, r1	; 0x01
    1e0a:	08 c0       	rjmp	.+16     	; 0x1e1c <main+0x1ea>
			}
			else if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==1)//if the led is turned on
    1e0c:	84 e4       	ldi	r24, 0x44	; 68
    1e0e:	60 e0       	ldi	r22, 0x00	; 0
    1e10:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LED_u8ReadStatus>
    1e14:	81 30       	cpi	r24, 0x01	; 1
    1e16:	11 f4       	brne	.+4      	; 0x1e1c <main+0x1ea>
			{
				response = ON_STATUS;//set the response as on status
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	0e 94 75 0d 	call	0x1aea	; 0x1aea <SPI_ui8TransmitRecive>
    1e22:	31 cf       	rjmp	.-414    	; 0x1c86 <main+0x54>
			break;//break the switch case
			case ROOM3_STATUS:
			if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==0)//if the led is turned off
    1e24:	84 e4       	ldi	r24, 0x44	; 68
    1e26:	66 e0       	ldi	r22, 0x06	; 6
    1e28:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LED_u8ReadStatus>
    1e2c:	88 23       	and	r24, r24
    1e2e:	11 f4       	brne	.+4      	; 0x1e34 <main+0x202>
			{
				response = OFF_STATUS;//set the response as off status
    1e30:	19 82       	std	Y+1, r1	; 0x01
    1e32:	08 c0       	rjmp	.+16     	; 0x1e44 <main+0x212>
			}
			else if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==1)//if the led is turned on
    1e34:	84 e4       	ldi	r24, 0x44	; 68
    1e36:	66 e0       	ldi	r22, 0x06	; 6
    1e38:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LED_u8ReadStatus>
    1e3c:	81 30       	cpi	r24, 0x01	; 1
    1e3e:	11 f4       	brne	.+4      	; 0x1e44 <main+0x212>
			{
				response = ON_STATUS;//set the response as on status
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	0e 94 75 0d 	call	0x1aea	; 0x1aea <SPI_ui8TransmitRecive>
    1e4a:	1d cf       	rjmp	.-454    	; 0x1c86 <main+0x54>
			break;//break the switch case
			case ROOM4_STATUS:
			if (LED_u8ReadStatus(ROOM4_PORT,ROOM4_PIN)==0)//if the led is turned off
    1e4c:	84 e4       	ldi	r24, 0x44	; 68
    1e4e:	67 e0       	ldi	r22, 0x07	; 7
    1e50:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LED_u8ReadStatus>
    1e54:	88 23       	and	r24, r24
    1e56:	11 f4       	brne	.+4      	; 0x1e5c <main+0x22a>
			{
				response = OFF_STATUS;//set the response as off status
    1e58:	19 82       	std	Y+1, r1	; 0x01
    1e5a:	08 c0       	rjmp	.+16     	; 0x1e6c <main+0x23a>
			}
			else if (LED_u8ReadStatus(ROOM4_PORT,ROOM4_PIN)==1)//if the led is turned on
    1e5c:	84 e4       	ldi	r24, 0x44	; 68
    1e5e:	67 e0       	ldi	r22, 0x07	; 7
    1e60:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LED_u8ReadStatus>
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	11 f4       	brne	.+4      	; 0x1e6c <main+0x23a>
			{
				response = ON_STATUS;//set the response as on status
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	0e 94 75 0d 	call	0x1aea	; 0x1aea <SPI_ui8TransmitRecive>
    1e72:	09 cf       	rjmp	.-494    	; 0x1c86 <main+0x54>
			break;//break the switch case
			case AIR_COND_STATUS:
			if (LED_u8ReadStatus(AIR_COND_PORT,AIR_COND_PIN)==0)//if the led is turned off
    1e74:	84 e4       	ldi	r24, 0x44	; 68
    1e76:	62 e0       	ldi	r22, 0x02	; 2
    1e78:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LED_u8ReadStatus>
    1e7c:	88 23       	and	r24, r24
    1e7e:	11 f4       	brne	.+4      	; 0x1e84 <main+0x252>
			{
				response = OFF_STATUS;//set the response as off status
    1e80:	19 82       	std	Y+1, r1	; 0x01
    1e82:	08 c0       	rjmp	.+16     	; 0x1e94 <main+0x262>
			}
			else if (LED_u8ReadStatus(AIR_COND_PORT,AIR_COND_PIN)==1)//if the led is turned on
    1e84:	84 e4       	ldi	r24, 0x44	; 68
    1e86:	62 e0       	ldi	r22, 0x02	; 2
    1e88:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LED_u8ReadStatus>
    1e8c:	81 30       	cpi	r24, 0x01	; 1
    1e8e:	11 f4       	brne	.+4      	; 0x1e94 <main+0x262>
			{
				response = ON_STATUS;//set the response as on status
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	0e 94 75 0d 	call	0x1aea	; 0x1aea <SPI_ui8TransmitRecive>
    1e9a:	f5 ce       	rjmp	.-534    	; 0x1c86 <main+0x54>
			break;
			case TV_STATUS:
			if (LED_u8ReadStatus(TV_PORT,TV_PIN)==0)//if the led is turned off
    1e9c:	84 e4       	ldi	r24, 0x44	; 68
    1e9e:	63 e0       	ldi	r22, 0x03	; 3
    1ea0:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LED_u8ReadStatus>
    1ea4:	88 23       	and	r24, r24
    1ea6:	11 f4       	brne	.+4      	; 0x1eac <main+0x27a>
			{
				response = OFF_STATUS;//set the response as off status
    1ea8:	19 82       	std	Y+1, r1	; 0x01
    1eaa:	08 c0       	rjmp	.+16     	; 0x1ebc <main+0x28a>
			}
			else if (LED_u8ReadStatus(TV_PORT,TV_PIN)==1)//if the led is turned on
    1eac:	84 e4       	ldi	r24, 0x44	; 68
    1eae:	63 e0       	ldi	r22, 0x03	; 3
    1eb0:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LED_u8ReadStatus>
    1eb4:	81 30       	cpi	r24, 0x01	; 1
    1eb6:	11 f4       	brne	.+4      	; 0x1ebc <main+0x28a>
			{
				response = ON_STATUS;//set the response as on status
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	0e 94 75 0d 	call	0x1aea	; 0x1aea <SPI_ui8TransmitRecive>
    1ec2:	e1 ce       	rjmp	.-574    	; 0x1c86 <main+0x54>
			break;//break the switch case
			
			/*********************************   TURN ON COMMANDS ********************************/
			case ROOM1_TURN_ON:
			LED_vTurnOn(ROOM1_PORT,ROOM1_PIN);//turn on the led of room 1
    1ec4:	84 e4       	ldi	r24, 0x44	; 68
    1ec6:	64 e0       	ldi	r22, 0x04	; 4
    1ec8:	0e 94 b6 0c 	call	0x196c	; 0x196c <LED_vTurnOn>
    1ecc:	dc ce       	rjmp	.-584    	; 0x1c86 <main+0x54>
			break;//break the switch case
			case ROOM2_TURN_ON:
			LED_vTurnOn(ROOM1_PORT,ROOM2_PIN);//turn on the led of room 2
    1ece:	84 e4       	ldi	r24, 0x44	; 68
    1ed0:	60 e0       	ldi	r22, 0x00	; 0
    1ed2:	0e 94 b6 0c 	call	0x196c	; 0x196c <LED_vTurnOn>
    1ed6:	d7 ce       	rjmp	.-594    	; 0x1c86 <main+0x54>
			break;//break the switch case
			case ROOM3_TURN_ON:
			LED_vTurnOn(ROOM3_PORT,ROOM3_PIN);//turn on the led of room 3
    1ed8:	84 e4       	ldi	r24, 0x44	; 68
    1eda:	66 e0       	ldi	r22, 0x06	; 6
    1edc:	0e 94 b6 0c 	call	0x196c	; 0x196c <LED_vTurnOn>
    1ee0:	d2 ce       	rjmp	.-604    	; 0x1c86 <main+0x54>
			break;//break the switch case
			case ROOM4_TURN_ON:
			LED_vTurnOn(ROOM4_PORT,ROOM4_PIN);//turn on the led of room 4
    1ee2:	84 e4       	ldi	r24, 0x44	; 68
    1ee4:	67 e0       	ldi	r22, 0x07	; 7
    1ee6:	0e 94 b6 0c 	call	0x196c	; 0x196c <LED_vTurnOn>
    1eea:	cd ce       	rjmp	.-614    	; 0x1c86 <main+0x54>
			break;//break the switch case
			case AIR_COND_TURN_ON:
			timer0_initializeCTC();
    1eec:	0e 94 50 10 	call	0x20a0	; 0x20a0 <timer0_initializeCTC>
			LED_vTurnOn(AIR_COND_PORT,AIR_COND_PIN);//turn on the led of air conditioning
    1ef0:	84 e4       	ldi	r24, 0x44	; 68
    1ef2:	62 e0       	ldi	r22, 0x02	; 2
    1ef4:	0e 94 b6 0c 	call	0x196c	; 0x196c <LED_vTurnOn>
    1ef8:	c6 ce       	rjmp	.-628    	; 0x1c86 <main+0x54>
			break;//break the switch case
			case TV_TURN_ON:
			LED_vTurnOn(TV_PORT,TV_PIN);//turn on the led of the TV
    1efa:	84 e4       	ldi	r24, 0x44	; 68
    1efc:	63 e0       	ldi	r22, 0x03	; 3
    1efe:	0e 94 b6 0c 	call	0x196c	; 0x196c <LED_vTurnOn>
    1f02:	c1 ce       	rjmp	.-638    	; 0x1c86 <main+0x54>
			break;//break the switch case
			case DOOR_OPEN:
				TMR1_start();
    1f04:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <TMR1_start>
				SERVOM_vStart(90);
    1f08:	8a e5       	ldi	r24, 0x5A	; 90
    1f0a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <SERVOM_vStart>
				SERVOM_vStop();
    1f0e:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <SERVOM_vStop>
				TMR1_stop();
    1f12:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <TMR1_stop>
    1f16:	b7 ce       	rjmp	.-658    	; 0x1c86 <main+0x54>

				break;//break the switch case
			
			/*********************************   TURN OFF COMMANDS ********************************/
			case ROOM1_TURN_OFF:
			LED_vTurnOff(ROOM1_PORT,ROOM1_PIN);//turn off the led of room 1
    1f18:	84 e4       	ldi	r24, 0x44	; 68
    1f1a:	64 e0       	ldi	r22, 0x04	; 4
    1f1c:	0e 94 c7 0c 	call	0x198e	; 0x198e <LED_vTurnOff>
    1f20:	b2 ce       	rjmp	.-668    	; 0x1c86 <main+0x54>
			break;//break the switch case
			case ROOM2_TURN_OFF:
			LED_vTurnOff(ROOM2_PORT,ROOM2_PIN);//turn off the led of room 2
    1f22:	84 e4       	ldi	r24, 0x44	; 68
    1f24:	60 e0       	ldi	r22, 0x00	; 0
    1f26:	0e 94 c7 0c 	call	0x198e	; 0x198e <LED_vTurnOff>
    1f2a:	ad ce       	rjmp	.-678    	; 0x1c86 <main+0x54>
			break;//break the switch case
			case ROOM3_TURN_OFF:
			LED_vTurnOff(ROOM3_PORT,ROOM3_PIN);//turn off the led of room 3
    1f2c:	84 e4       	ldi	r24, 0x44	; 68
    1f2e:	66 e0       	ldi	r22, 0x06	; 6
    1f30:	0e 94 c7 0c 	call	0x198e	; 0x198e <LED_vTurnOff>
    1f34:	a8 ce       	rjmp	.-688    	; 0x1c86 <main+0x54>
			break;//break the switch case
			case ROOM4_TURN_OFF:
			LED_vTurnOff(ROOM4_PORT,ROOM4_PIN);//turn off the led of room 4
    1f36:	84 e4       	ldi	r24, 0x44	; 68
    1f38:	67 e0       	ldi	r22, 0x07	; 7
    1f3a:	0e 94 c7 0c 	call	0x198e	; 0x198e <LED_vTurnOff>
    1f3e:	a3 ce       	rjmp	.-698    	; 0x1c86 <main+0x54>
			break;//break the switch case
			case AIR_COND_TURN_OFF:
			timer0_stop();
    1f40:	0e 94 86 10 	call	0x210c	; 0x210c <timer0_stop>
			LED_vTurnOff(AIR_COND_PORT,AIR_COND_PIN);//turn off the led of air conditioning
    1f44:	84 e4       	ldi	r24, 0x44	; 68
    1f46:	62 e0       	ldi	r22, 0x02	; 2
    1f48:	0e 94 c7 0c 	call	0x198e	; 0x198e <LED_vTurnOff>
    1f4c:	9c ce       	rjmp	.-712    	; 0x1c86 <main+0x54>
			break;//break the switch case
			case TV_TURN_OFF:
			LED_vTurnOff(TV_PORT,TV_PIN);//turn off the led of the TV
    1f4e:	84 e4       	ldi	r24, 0x44	; 68
    1f50:	63 e0       	ldi	r22, 0x03	; 3
    1f52:	0e 94 c7 0c 	call	0x198e	; 0x198e <LED_vTurnOff>
    1f56:	97 ce       	rjmp	.-722    	; 0x1c86 <main+0x54>
			break;//break the switch case
			
			/*********************************   Set temperature   ********************************/
			case SET_TEMPERATURE:
			required_temperature = SPI_ui8TransmitRecive(DEFAULT_ACK);//get the temperature from the master and store the temperature in required temperature 
    1f58:	8f ef       	ldi	r24, 0xFF	; 255
    1f5a:	0e 94 75 0d 	call	0x1aea	; 0x1aea <SPI_ui8TransmitRecive>
    1f5e:	88 2f       	mov	r24, r24
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	90 93 69 01 	sts	0x0169, r25
    1f66:	80 93 68 01 	sts	0x0168, r24
    1f6a:	8d ce       	rjmp	.-742    	; 0x1c86 <main+0x54>

00001f6c <__vector_10>:
		}
	}
}

ISR(TIMER0_COMP_vect)
{
    1f6c:	1f 92       	push	r1
    1f6e:	0f 92       	push	r0
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	0f 92       	push	r0
    1f74:	11 24       	eor	r1, r1
    1f76:	2f 93       	push	r18
    1f78:	3f 93       	push	r19
    1f7a:	4f 93       	push	r20
    1f7c:	5f 93       	push	r21
    1f7e:	6f 93       	push	r22
    1f80:	7f 93       	push	r23
    1f82:	8f 93       	push	r24
    1f84:	9f 93       	push	r25
    1f86:	af 93       	push	r26
    1f88:	bf 93       	push	r27
    1f8a:	ef 93       	push	r30
    1f8c:	ff 93       	push	r31
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
	counter++;//count the ticks of the timer zero
    1f96:	80 91 6c 01 	lds	r24, 0x016C
    1f9a:	8f 5f       	subi	r24, 0xFF	; 255
    1f9c:	80 93 6c 01 	sts	0x016C, r24
	if(counter>=10)//do that code every 10 ticks 
    1fa0:	80 91 6c 01 	lds	r24, 0x016C
    1fa4:	8a 30       	cpi	r24, 0x0A	; 10
    1fa6:	08 f4       	brcc	.+2      	; 0x1faa <__vector_10+0x3e>
    1fa8:	68 c0       	rjmp	.+208    	; 0x207a <__vector_10+0x10e>
	{
		counter=0;//clear the counter of ticks
    1faa:	10 92 6c 01 	sts	0x016C, r1
		temp_sensor_reading=(0.25*ADC_u16Read());//read the temperature from the temperature sensor connected to the ADC of the micro controller
    1fae:	0e 94 3f 07 	call	0xe7e	; 0xe7e <ADC_u16Read>
    1fb2:	cc 01       	movw	r24, r24
    1fb4:	a0 e0       	ldi	r26, 0x00	; 0
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	bc 01       	movw	r22, r24
    1fba:	cd 01       	movw	r24, r26
    1fbc:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	40 e8       	ldi	r20, 0x80	; 128
    1fce:	5e e3       	ldi	r21, 0x3E	; 62
    1fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	bc 01       	movw	r22, r24
    1fda:	cd 01       	movw	r24, r26
    1fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	90 93 6b 01 	sts	0x016B, r25
    1fe8:	80 93 6a 01 	sts	0x016A, r24
		if (temp_sensor_reading>=(required_temperature+1))//do that code if the read temperature if greater than required temperature by one or more
    1fec:	80 91 68 01 	lds	r24, 0x0168
    1ff0:	90 91 69 01 	lds	r25, 0x0169
    1ff4:	9c 01       	movw	r18, r24
    1ff6:	2f 5f       	subi	r18, 0xFF	; 255
    1ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    1ffa:	80 91 6a 01 	lds	r24, 0x016A
    1ffe:	90 91 6b 01 	lds	r25, 0x016B
    2002:	82 17       	cp	r24, r18
    2004:	93 07       	cpc	r25, r19
    2006:	40 f0       	brcs	.+16     	; 0x2018 <__vector_10+0xac>
		{
			LED_vTurnOn(AIR_COND_PORT,AIR_COND_PIN);//turn on the led of the air conditioning
    2008:	84 e4       	ldi	r24, 0x44	; 68
    200a:	62 e0       	ldi	r22, 0x02	; 2
    200c:	0e 94 b6 0c 	call	0x196c	; 0x196c <LED_vTurnOn>
			last_air_conditioning_value=AIR_CONDTIONING_ON;//save the value of the state of the air conditioning
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	80 93 6d 01 	sts	0x016D, r24
    2016:	31 c0       	rjmp	.+98     	; 0x207a <__vector_10+0x10e>
		}
		else if (temp_sensor_reading<=(required_temperature-1))//do that code if the read temperature if lesser than required temperature by one or more
    2018:	80 91 68 01 	lds	r24, 0x0168
    201c:	90 91 69 01 	lds	r25, 0x0169
    2020:	9c 01       	movw	r18, r24
    2022:	21 50       	subi	r18, 0x01	; 1
    2024:	30 40       	sbci	r19, 0x00	; 0
    2026:	80 91 6a 01 	lds	r24, 0x016A
    202a:	90 91 6b 01 	lds	r25, 0x016B
    202e:	28 17       	cp	r18, r24
    2030:	39 07       	cpc	r19, r25
    2032:	38 f0       	brcs	.+14     	; 0x2042 <__vector_10+0xd6>
		{
			LED_vTurnOff(AIR_COND_PORT,AIR_COND_PIN);//turn off the led of the air conditioning
    2034:	84 e4       	ldi	r24, 0x44	; 68
    2036:	62 e0       	ldi	r22, 0x02	; 2
    2038:	0e 94 c7 0c 	call	0x198e	; 0x198e <LED_vTurnOff>
			last_air_conditioning_value=AIR_CONDTIONING_OFF;//save the value of the state of the air conditioning
    203c:	10 92 6d 01 	sts	0x016D, r1
    2040:	1c c0       	rjmp	.+56     	; 0x207a <__vector_10+0x10e>
		}
		else if (required_temperature==temp_sensor_reading)//do that code if the read temperature is equal to the required temperature
    2042:	20 91 68 01 	lds	r18, 0x0168
    2046:	30 91 69 01 	lds	r19, 0x0169
    204a:	80 91 6a 01 	lds	r24, 0x016A
    204e:	90 91 6b 01 	lds	r25, 0x016B
    2052:	28 17       	cp	r18, r24
    2054:	39 07       	cpc	r19, r25
    2056:	89 f4       	brne	.+34     	; 0x207a <__vector_10+0x10e>
		{
			if (last_air_conditioning_value==AIR_CONDTIONING_ON)//in the case of the last saved status of the air conditioning was on 
    2058:	80 91 6d 01 	lds	r24, 0x016D
    205c:	81 30       	cpi	r24, 0x01	; 1
    205e:	29 f4       	brne	.+10     	; 0x206a <__vector_10+0xfe>
			{
				LED_vTurnOn(AIR_COND_PORT,AIR_COND_PIN);//turn on the led of the air conditioning
    2060:	84 e4       	ldi	r24, 0x44	; 68
    2062:	62 e0       	ldi	r22, 0x02	; 2
    2064:	0e 94 b6 0c 	call	0x196c	; 0x196c <LED_vTurnOn>
    2068:	08 c0       	rjmp	.+16     	; 0x207a <__vector_10+0x10e>
			}
			else if (last_air_conditioning_value==AIR_CONDTIONING_OFF)//in the case of the last saved status of the air conditioning was off 
    206a:	80 91 6d 01 	lds	r24, 0x016D
    206e:	88 23       	and	r24, r24
    2070:	21 f4       	brne	.+8      	; 0x207a <__vector_10+0x10e>
			{
				LED_vTurnOff(AIR_COND_PORT,AIR_COND_PIN);//turn off the led of the air conditioning
    2072:	84 e4       	ldi	r24, 0x44	; 68
    2074:	62 e0       	ldi	r22, 0x02	; 2
    2076:	0e 94 c7 0c 	call	0x198e	; 0x198e <LED_vTurnOff>
			}
		}
	}
}
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	ff 91       	pop	r31
    2080:	ef 91       	pop	r30
    2082:	bf 91       	pop	r27
    2084:	af 91       	pop	r26
    2086:	9f 91       	pop	r25
    2088:	8f 91       	pop	r24
    208a:	7f 91       	pop	r23
    208c:	6f 91       	pop	r22
    208e:	5f 91       	pop	r21
    2090:	4f 91       	pop	r20
    2092:	3f 91       	pop	r19
    2094:	2f 91       	pop	r18
    2096:	0f 90       	pop	r0
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	0f 90       	pop	r0
    209c:	1f 90       	pop	r1
    209e:	18 95       	reti

000020a0 <timer0_initializeCTC>:

#include "timer_driver.h"

void timer0_initializeCTC(void)
{
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 78; //to achieve tick equal to 10 msec
    20a8:	ec e5       	ldi	r30, 0x5C	; 92
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	8e e4       	ldi	r24, 0x4E	; 78
    20ae:	80 83       	st	Z, r24
	
	//Set timer mode
	//Set the mode as Compare match
	SET_BIT(TCCR0, WGM01);
    20b0:	a3 e5       	ldi	r26, 0x53	; 83
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e3 e5       	ldi	r30, 0x53	; 83
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	88 60       	ori	r24, 0x08	; 8
    20bc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM00);
    20be:	a3 e5       	ldi	r26, 0x53	; 83
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	e3 e5       	ldi	r30, 0x53	; 83
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	8f 7b       	andi	r24, 0xBF	; 191
    20ca:	8c 93       	st	X, r24
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
    20cc:	a3 e5       	ldi	r26, 0x53	; 83
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	e3 e5       	ldi	r30, 0x53	; 83
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	81 60       	ori	r24, 0x01	; 1
    20d8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    20da:	a3 e5       	ldi	r26, 0x53	; 83
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e3 e5       	ldi	r30, 0x53	; 83
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	8d 7f       	andi	r24, 0xFD	; 253
    20e6:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS02);
    20e8:	a3 e5       	ldi	r26, 0x53	; 83
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	e3 e5       	ldi	r30, 0x53	; 83
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	84 60       	ori	r24, 0x04	; 4
    20f4:	8c 93       	st	X, r24
	
	//Enable global interrupts
	sei();
    20f6:	78 94       	sei
	
	//Enable timer 0 interrupt for compare match
	SET_BIT(TIMSK, OCIE0);
    20f8:	a9 e5       	ldi	r26, 0x59	; 89
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e9 e5       	ldi	r30, 0x59	; 89
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	82 60       	ori	r24, 0x02	; 2
    2104:	8c 93       	st	X, r24
}
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <timer0_stop>:

void timer0_stop(void)
{
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
	//disable the clock to stop the counter
	CLR_BIT(TCCR0, CS00);
    2114:	a3 e5       	ldi	r26, 0x53	; 83
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	e3 e5       	ldi	r30, 0x53	; 83
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	8e 7f       	andi	r24, 0xFE	; 254
    2120:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    2122:	a3 e5       	ldi	r26, 0x53	; 83
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e3 e5       	ldi	r30, 0x53	; 83
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	8d 7f       	andi	r24, 0xFD	; 253
    212e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    2130:	a3 e5       	ldi	r26, 0x53	; 83
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e3 e5       	ldi	r30, 0x53	; 83
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	8b 7f       	andi	r24, 0xFB	; 251
    213c:	8c 93       	st	X, r24
}
    213e:	cf 91       	pop	r28
    2140:	df 91       	pop	r29
    2142:	08 95       	ret

00002144 <timer_initializefastpwm>:
void timer_initializefastpwm(void)
{
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 128;
    214c:	ec e5       	ldi	r30, 0x5C	; 92
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 e8       	ldi	r24, 0x80	; 128
    2152:	80 83       	st	Z, r24
	
	//Set timer mode
	//adjust fast pulse width modulation mode
	SET_BIT(TCCR0, WGM00); 
    2154:	a3 e5       	ldi	r26, 0x53	; 83
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e3 e5       	ldi	r30, 0x53	; 83
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	80 64       	ori	r24, 0x40	; 64
    2160:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    2162:	a3 e5       	ldi	r26, 0x53	; 83
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e3 e5       	ldi	r30, 0x53	; 83
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	88 60       	ori	r24, 0x08	; 8
    216e:	8c 93       	st	X, r24
	
	//Enable global interrupts
	sei();
    2170:	78 94       	sei
	
	SET_BIT(TCCR0, COM01); //adjust non inverting mode
    2172:	a3 e5       	ldi	r26, 0x53	; 83
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	e3 e5       	ldi	r30, 0x53	; 83
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	80 62       	ori	r24, 0x20	; 32
    217e:	8c 93       	st	X, r24
	
	//Enable timer0 interrupt for overflow mode
	SET_BIT(TIMSK,TOIE0);
    2180:	a9 e5       	ldi	r26, 0x59	; 89
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	e9 e5       	ldi	r30, 0x59	; 89
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	81 60       	ori	r24, 0x01	; 1
    218c:	8c 93       	st	X, r24
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
    218e:	a3 e5       	ldi	r26, 0x53	; 83
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e3 e5       	ldi	r30, 0x53	; 83
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	81 60       	ori	r24, 0x01	; 1
    219a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    219c:	a3 e5       	ldi	r26, 0x53	; 83
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e3 e5       	ldi	r30, 0x53	; 83
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	8d 7f       	andi	r24, 0xFD	; 253
    21a8:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS02);
    21aa:	a3 e5       	ldi	r26, 0x53	; 83
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	e3 e5       	ldi	r30, 0x53	; 83
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	84 60       	ori	r24, 0x04	; 4
    21b6:	8c 93       	st	X, r24
}
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	08 95       	ret

000021be <change_dutycycle>:
void change_dutycycle(float64 duty)
{
    21be:	0f 93       	push	r16
    21c0:	1f 93       	push	r17
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	00 d0       	rcall	.+0      	; 0x21c8 <change_dutycycle+0xa>
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <change_dutycycle+0xc>
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	69 83       	std	Y+1, r22	; 0x01
    21d0:	7a 83       	std	Y+2, r23	; 0x02
    21d2:	8b 83       	std	Y+3, r24	; 0x03
    21d4:	9c 83       	std	Y+4, r25	; 0x04
	OCR0 = (duty / 100) * 256;//Set the OCR0 depending on the duty percentage
    21d6:	0c e5       	ldi	r16, 0x5C	; 92
    21d8:	10 e0       	ldi	r17, 0x00	; 0
    21da:	69 81       	ldd	r22, Y+1	; 0x01
    21dc:	7a 81       	ldd	r23, Y+2	; 0x02
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	9c 81       	ldd	r25, Y+4	; 0x04
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	48 ec       	ldi	r20, 0xC8	; 200
    21e8:	52 e4       	ldi	r21, 0x42	; 66
    21ea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	bc 01       	movw	r22, r24
    21f4:	cd 01       	movw	r24, r26
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e8       	ldi	r20, 0x80	; 128
    21fc:	53 e4       	ldi	r21, 0x43	; 67
    21fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	bc 01       	movw	r22, r24
    2208:	cd 01       	movw	r24, r26
    220a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	f8 01       	movw	r30, r16
    2214:	80 83       	st	Z, r24
}
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	1f 91       	pop	r17
    2224:	0f 91       	pop	r16
    2226:	08 95       	ret

00002228 <__prologue_saves__>:
    2228:	2f 92       	push	r2
    222a:	3f 92       	push	r3
    222c:	4f 92       	push	r4
    222e:	5f 92       	push	r5
    2230:	6f 92       	push	r6
    2232:	7f 92       	push	r7
    2234:	8f 92       	push	r8
    2236:	9f 92       	push	r9
    2238:	af 92       	push	r10
    223a:	bf 92       	push	r11
    223c:	cf 92       	push	r12
    223e:	df 92       	push	r13
    2240:	ef 92       	push	r14
    2242:	ff 92       	push	r15
    2244:	0f 93       	push	r16
    2246:	1f 93       	push	r17
    2248:	cf 93       	push	r28
    224a:	df 93       	push	r29
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	ca 1b       	sub	r28, r26
    2252:	db 0b       	sbc	r29, r27
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	09 94       	ijmp

00002260 <__epilogue_restores__>:
    2260:	2a 88       	ldd	r2, Y+18	; 0x12
    2262:	39 88       	ldd	r3, Y+17	; 0x11
    2264:	48 88       	ldd	r4, Y+16	; 0x10
    2266:	5f 84       	ldd	r5, Y+15	; 0x0f
    2268:	6e 84       	ldd	r6, Y+14	; 0x0e
    226a:	7d 84       	ldd	r7, Y+13	; 0x0d
    226c:	8c 84       	ldd	r8, Y+12	; 0x0c
    226e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2270:	aa 84       	ldd	r10, Y+10	; 0x0a
    2272:	b9 84       	ldd	r11, Y+9	; 0x09
    2274:	c8 84       	ldd	r12, Y+8	; 0x08
    2276:	df 80       	ldd	r13, Y+7	; 0x07
    2278:	ee 80       	ldd	r14, Y+6	; 0x06
    227a:	fd 80       	ldd	r15, Y+5	; 0x05
    227c:	0c 81       	ldd	r16, Y+4	; 0x04
    227e:	1b 81       	ldd	r17, Y+3	; 0x03
    2280:	aa 81       	ldd	r26, Y+2	; 0x02
    2282:	b9 81       	ldd	r27, Y+1	; 0x01
    2284:	ce 0f       	add	r28, r30
    2286:	d1 1d       	adc	r29, r1
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61
    2292:	ed 01       	movw	r28, r26
    2294:	08 95       	ret

00002296 <_exit>:
    2296:	f8 94       	cli

00002298 <__stop_program>:
    2298:	ff cf       	rjmp	.-2      	; 0x2298 <__stop_program>
